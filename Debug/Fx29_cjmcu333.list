
Fx29_cjmcu333.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08008170  08008170  00009170  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008550  08008550  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008550  08008550  00009550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008558  08008558  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008558  08008558  00009558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800855c  0800855c  0000955c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008560  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  200001d4  08008734  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08008734  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ba  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023d1  00000000  00000000  00019bbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001bf90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a68  00000000  00000000  0001cd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ac1  00000000  00000000  0001d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109e3  00000000  00000000  00046259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc8cf  00000000  00000000  00056c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015350b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000497c  00000000  00000000  00153550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00157ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008158 	.word	0x08008158

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008158 	.word	0x08008158

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
 8000f58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <MX_ADC1_Init+0xe4>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f60:	4b2d      	ldr	r3, [pc, #180]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f66:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4817      	ldr	r0, [pc, #92]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fbc:	f000 fec2 	bl	8001d44 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000fc6:	f000 fa50 	bl	800146a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4810      	ldr	r0, [pc, #64]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8000fd6:	f001 fe43 	bl	8002c60 <HAL_ADCEx_MultiModeConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000fe0:	f000 fa43 	bl	800146a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8001020 <MX_ADC1_Init+0xe8>)
 8000fe6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fe8:	2306      	movs	r3, #6
 8000fea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000fec:	2306      	movs	r3, #6
 8000fee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ff0:	237f      	movs	r3, #127	@ 0x7f
 8000ff2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_ADC1_Init+0xe0>)
 8001002:	f001 f98f 	bl	8002324 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800100c:	f000 fa2d 	bl	800146a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	@ 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001f0 	.word	0x200001f0
 800101c:	50040000 	.word	0x50040000
 8001020:	14f00020 	.word	0x14f00020

08001024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ac      	sub	sp, #176	@ 0xb0
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2288      	movs	r2, #136	@ 0x88
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f004 ffbe 	bl	8005fc6 <memset>
  if(adcHandle->Instance==ADC1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a27      	ldr	r2, [pc, #156]	@ (80010ec <HAL_ADC_MspInit+0xc8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d147      	bne.n	80010e4 <HAL_ADC_MspInit+0xc0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001054:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001058:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800105a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800105e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001062:	2302      	movs	r3, #2
 8001064:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800106a:	2308      	movs	r3, #8
 800106c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800106e:	2307      	movs	r3, #7
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001076:	2302      	movs	r3, #2
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800107a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800107e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4618      	mov	r0, r3
 8001086:	f002 ffa7 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001090:	f000 f9eb 	bl	800146a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001094:	4b16      	ldr	r3, [pc, #88]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001098:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 800109a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800109e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a0:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b0:	4a0f      	ldr	r2, [pc, #60]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <HAL_ADC_MspInit+0xcc>)
 80010ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010ca:	230b      	movs	r3, #11
 80010cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e0:	f001 ff54 	bl	8002f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010e4:	bf00      	nop
 80010e6:	37b0      	adds	r7, #176	@ 0xb0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	50040000 	.word	0x50040000
 80010f0:	40021000 	.word	0x40021000

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	@ 0x28
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a2a      	ldr	r2, [pc, #168]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001110:	f043 0304 	orr.w	r3, r3, #4
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b28      	ldr	r3, [pc, #160]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0304 	and.w	r3, r3, #4
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001122:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001146:	4b1c      	ldr	r3, [pc, #112]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001152:	4b19      	ldr	r3, [pc, #100]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	4a18      	ldr	r2, [pc, #96]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800115e:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <MX_GPIO_Init+0xc4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2120      	movs	r1, #32
 800116e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001172:	f002 f8b5 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800117c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	480b      	ldr	r0, [pc, #44]	@ (80011bc <MX_GPIO_Init+0xc8>)
 800118e:	f001 fefd 	bl	8002f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001192:	2320      	movs	r3, #32
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ac:	f001 feee 	bl	8002f8c <HAL_GPIO_Init>

}
 80011b0:	bf00      	nop
 80011b2:	3728      	adds	r7, #40	@ 0x28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800

080011c0 <send_string>:
char buffer[50];
uint32_t adc_raw;
float voltage;

//串口打印
void send_string(char *str) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff f851 	bl	8000270 <strlen>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	f04f 33ff 	mov.w	r3, #4294967295
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <send_string+0x28>)
 80011da:	f003 fc07 	bl	80049ec <HAL_UART_Transmit>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000294 	.word	0x20000294
 80011ec:	00000000 	.word	0x00000000

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b08a      	sub	sp, #40	@ 0x28
 80011f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f6:	f000 fb21 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fa:	f000 f8e5 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fe:	f7ff ff79 	bl	80010f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001202:	f000 fa65 	bl	80016d0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001206:	f7ff fe97 	bl	8000f38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  // 启动 ADC
    //HAL_ADC_Start(&hadc1);

  // Vref
  float sum = 0;
 800120a:	f04f 0300 	mov.w	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 100; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	e02d      	b.n	8001272 <main+0x82>
  	            HAL_ADC_Start(&hadc1);
 8001216:	4864      	ldr	r0, [pc, #400]	@ (80013a8 <main+0x1b8>)
 8001218:	f000 fee4 	bl	8001fe4 <HAL_ADC_Start>
  	            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	4861      	ldr	r0, [pc, #388]	@ (80013a8 <main+0x1b8>)
 8001222:	f000 ff99 	bl	8002158 <HAL_ADC_PollForConversion>
  	            adc_raw = HAL_ADC_GetValue(&hadc1);
 8001226:	4860      	ldr	r0, [pc, #384]	@ (80013a8 <main+0x1b8>)
 8001228:	f001 f86e 	bl	8002308 <HAL_ADC_GetValue>
 800122c:	4603      	mov	r3, r0
 800122e:	4a5f      	ldr	r2, [pc, #380]	@ (80013ac <main+0x1bc>)
 8001230:	6013      	str	r3, [r2, #0]

  	            voltage = ((float)adc_raw) / 4095.0f * 3.417f;
 8001232:	4b5e      	ldr	r3, [pc, #376]	@ (80013ac <main+0x1bc>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800123e:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 80013b0 <main+0x1c0>
 8001242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001246:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80013b4 <main+0x1c4>
 800124a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800124e:	4b5a      	ldr	r3, [pc, #360]	@ (80013b8 <main+0x1c8>)
 8001250:	edc3 7a00 	vstr	s15, [r3]
  	            sum += voltage;
 8001254:	4b58      	ldr	r3, [pc, #352]	@ (80013b8 <main+0x1c8>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ed97 7a05 	vldr	s14, [r7, #20]
 800125e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001262:	edc7 7a05 	vstr	s15, [r7, #20]

  	            HAL_Delay(1);  // 给 ADC 一点稳定时间，可选
 8001266:	2001      	movs	r0, #1
 8001268:	f000 fb64 	bl	8001934 <HAL_Delay>
  for (int i = 0; i < 100; i++) {
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	3301      	adds	r3, #1
 8001270:	613b      	str	r3, [r7, #16]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2b63      	cmp	r3, #99	@ 0x63
 8001276:	ddce      	ble.n	8001216 <main+0x26>
  	        }
  float Vref = sum / 100.0f;
 8001278:	ed97 7a05 	vldr	s14, [r7, #20]
 800127c:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80013bc <main+0x1cc>
 8001280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001284:	edc7 7a02 	vstr	s15, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	        sum = 0;
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	617b      	str	r3, [r7, #20]



	  	  	HAL_ADC_Start(&hadc1);  // 每次都重启 ADC（保险）
 800128e:	4846      	ldr	r0, [pc, #280]	@ (80013a8 <main+0x1b8>)
 8001290:	f000 fea8 	bl	8001fe4 <HAL_ADC_Start>
	    	HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	4843      	ldr	r0, [pc, #268]	@ (80013a8 <main+0x1b8>)
 800129a:	f000 ff5d 	bl	8002158 <HAL_ADC_PollForConversion>
	        adc_raw = HAL_ADC_GetValue(&hadc1);
 800129e:	4842      	ldr	r0, [pc, #264]	@ (80013a8 <main+0x1b8>)
 80012a0:	f001 f832 	bl	8002308 <HAL_ADC_GetValue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a41      	ldr	r2, [pc, #260]	@ (80013ac <main+0x1bc>)
 80012a8:	6013      	str	r3, [r2, #0]

	        for (int i = 0; i < 100; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e02d      	b.n	800130c <main+0x11c>
	            HAL_ADC_Start(&hadc1);
 80012b0:	483d      	ldr	r0, [pc, #244]	@ (80013a8 <main+0x1b8>)
 80012b2:	f000 fe97 	bl	8001fe4 <HAL_ADC_Start>
	            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012b6:	f04f 31ff 	mov.w	r1, #4294967295
 80012ba:	483b      	ldr	r0, [pc, #236]	@ (80013a8 <main+0x1b8>)
 80012bc:	f000 ff4c 	bl	8002158 <HAL_ADC_PollForConversion>
	            adc_raw = HAL_ADC_GetValue(&hadc1);
 80012c0:	4839      	ldr	r0, [pc, #228]	@ (80013a8 <main+0x1b8>)
 80012c2:	f001 f821 	bl	8002308 <HAL_ADC_GetValue>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4a38      	ldr	r2, [pc, #224]	@ (80013ac <main+0x1bc>)
 80012ca:	6013      	str	r3, [r2, #0]

	            voltage = ((float)adc_raw) / 4095.0f * 3.417f;
 80012cc:	4b37      	ldr	r3, [pc, #220]	@ (80013ac <main+0x1bc>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012d8:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80013b0 <main+0x1c0>
 80012dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80013b4 <main+0x1c4>
 80012e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e8:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <main+0x1c8>)
 80012ea:	edc3 7a00 	vstr	s15, [r3]
	            sum += voltage;
 80012ee:	4b32      	ldr	r3, [pc, #200]	@ (80013b8 <main+0x1c8>)
 80012f0:	edd3 7a00 	vldr	s15, [r3]
 80012f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fc:	edc7 7a05 	vstr	s15, [r7, #20]

	            HAL_Delay(1);  // 给 ADC 一点稳定时间，可选
 8001300:	2001      	movs	r0, #1
 8001302:	f000 fb17 	bl	8001934 <HAL_Delay>
	        for (int i = 0; i < 100; i++) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b63      	cmp	r3, #99	@ 0x63
 8001310:	ddce      	ble.n	80012b0 <main+0xc0>
	        }

	        float avg_voltage = sum / 100.0f;
 8001312:	ed97 7a05 	vldr	s14, [r7, #20]
 8001316:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80013bc <main+0x1cc>
 800131a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800131e:	edc7 7a01 	vstr	s15, [r7, #4]
	        float g = 158.33*	(avg_voltage - Vref) / 0.00981;
 8001322:	ed97 7a01 	vldr	s14, [r7, #4]
 8001326:	edd7 7a02 	vldr	s15, [r7, #8]
 800132a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800132e:	ee17 0a90 	vmov	r0, s15
 8001332:	f7ff f909 	bl	8000548 <__aeabi_f2d>
 8001336:	a318      	add	r3, pc, #96	@ (adr r3, 8001398 <main+0x1a8>)
 8001338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133c:	f7ff f95c 	bl	80005f8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	a315      	add	r3, pc, #84	@ (adr r3, 80013a0 <main+0x1b0>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff fa7d 	bl	800084c <__aeabi_ddiv>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f7ff fc25 	bl	8000ba8 <__aeabi_d2f>
 800135e:	4603      	mov	r3, r0
 8001360:	603b      	str	r3, [r7, #0]


	        snprintf(buffer, sizeof(buffer), "Voltage AVG: %.3f V  Poids = %.3f g \r\n", avg_voltage,g);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f8f0 	bl	8000548 <__aeabi_f2d>
 8001368:	4604      	mov	r4, r0
 800136a:	460d      	mov	r5, r1
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800137a:	e9cd 4500 	strd	r4, r5, [sp]
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <main+0x1d0>)
 8001380:	2132      	movs	r1, #50	@ 0x32
 8001382:	4810      	ldr	r0, [pc, #64]	@ (80013c4 <main+0x1d4>)
 8001384:	f004 fda8 	bl	8005ed8 <sniprintf>
	        send_string(buffer);
 8001388:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <main+0x1d4>)
 800138a:	f7ff ff19 	bl	80011c0 <send_string>

	      HAL_Delay(500);  // 每秒2次，防止刷屏太快
 800138e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001392:	f000 facf 	bl	8001934 <HAL_Delay>
  {
 8001396:	e777      	b.n	8001288 <main+0x98>
 8001398:	5c28f5c3 	.word	0x5c28f5c3
 800139c:	4063ca8f 	.word	0x4063ca8f
 80013a0:	e963dc48 	.word	0xe963dc48
 80013a4:	3f841743 	.word	0x3f841743
 80013a8:	200001f0 	.word	0x200001f0
 80013ac:	20000288 	.word	0x20000288
 80013b0:	457ff000 	.word	0x457ff000
 80013b4:	405ab021 	.word	0x405ab021
 80013b8:	2000028c 	.word	0x2000028c
 80013bc:	42c80000 	.word	0x42c80000
 80013c0:	08008170 	.word	0x08008170
 80013c4:	20000254 	.word	0x20000254

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b096      	sub	sp, #88	@ 0x58
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	2244      	movs	r2, #68	@ 0x44
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f004 fdf5 	bl	8005fc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013ee:	f001 ff9d 	bl	800332c <HAL_PWREx_ControlVoltageScaling>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f8:	f000 f837 	bl	800146a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001400:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001404:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001406:	2310      	movs	r3, #16
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140e:	2302      	movs	r3, #2
 8001410:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001416:	230a      	movs	r3, #10
 8001418:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800141a:	2307      	movs	r3, #7
 800141c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001422:	2302      	movs	r3, #2
 8001424:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4618      	mov	r0, r3
 800142c:	f001 ffd4 	bl	80033d8 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001436:	f000 f818 	bl	800146a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2303      	movs	r3, #3
 8001440:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2104      	movs	r1, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fb9c 	bl	8003b90 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800145e:	f000 f804 	bl	800146a <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3758      	adds	r7, #88	@ 0x58
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146e:	b672      	cpsid	i
}
 8001470:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001472:	bf00      	nop
 8001474:	e7fd      	b.n	8001472 <Error_Handler+0x8>
	...

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001482:	4a0e      	ldr	r2, [pc, #56]	@ (80014bc <HAL_MspInit+0x44>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6613      	str	r3, [r2, #96]	@ 0x60
 800148a:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <HAL_MspInit+0x44>)
 800148c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149a:	4a08      	ldr	r2, [pc, #32]	@ (80014bc <HAL_MspInit+0x44>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_MspInit+0x44>)
 80014a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000

080014c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <NMI_Handler+0x4>

080014c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <MemManage_Handler+0x4>

080014d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <BusFault_Handler+0x4>

080014e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <UsageFault_Handler+0x4>

080014e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001516:	f000 f9ed 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}

0800151e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0
  return 1;
 8001522:	2301      	movs	r3, #1
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <_kill>:

int _kill(int pid, int sig)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001538:	f004 fd98 	bl	800606c <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	2216      	movs	r2, #22
 8001540:	601a      	str	r2, [r3, #0]
  return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <_exit>:

void _exit (int status)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001556:	f04f 31ff 	mov.w	r1, #4294967295
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff ffe7 	bl	800152e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <_exit+0x12>

08001564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
  }

  return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e009      	b.n	80015c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf1      	blt.n	80015b0 <_write+0x12>
  }
  return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_close>:

int _close(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_isatty>:

int _isatty(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f004 fcfc 	bl	800606c <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20018000 	.word	0x20018000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	20000290 	.word	0x20000290
 80016a8:	20000470 	.word	0x20000470

080016ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <SystemInit+0x20>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b6:	4a05      	ldr	r2, [pc, #20]	@ (80016cc <SystemInit+0x20>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016d4:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <MX_USART2_UART_Init+0x5c>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001706:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001708:	2200      	movs	r2, #0
 800170a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170c:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <MX_USART2_UART_Init+0x58>)
 8001714:	f003 f91c 	bl	8004950 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800171e:	f7ff fea4 	bl	800146a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000294 	.word	0x20000294
 800172c:	40004400 	.word	0x40004400

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0ac      	sub	sp, #176	@ 0xb0
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2288      	movs	r2, #136	@ 0x88
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f004 fc38 	bl	8005fc6 <memset>
  if(uartHandle->Instance==USART2)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <HAL_UART_MspInit+0xb0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d13b      	bne.n	80017d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001760:	2302      	movs	r3, #2
 8001762:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001764:	2300      	movs	r3, #0
 8001766:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4618      	mov	r0, r3
 800176e:	f002 fc33 	bl	8003fd8 <HAL_RCCEx_PeriphCLKConfig>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001778:	f7ff fe77 	bl	800146a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 800177e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 8001782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001786:	6593      	str	r3, [r2, #88]	@ 0x58
 8001788:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 800178a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001794:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 8001796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001798:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <HAL_UART_MspInit+0xb4>)
 80017a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ac:	230c      	movs	r3, #12
 80017ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017c4:	2307      	movs	r3, #7
 80017c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017ce:	4619      	mov	r1, r3
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d4:	f001 fbda 	bl	8002f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017d8:	bf00      	nop
 80017da:	37b0      	adds	r7, #176	@ 0xb0
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40004400 	.word	0x40004400
 80017e4:	40021000 	.word	0x40021000

080017e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001820 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017ec:	f7ff ff5e 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f2:	490d      	ldr	r1, [pc, #52]	@ (8001828 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f4:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <LoopForever+0xe>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f8:	e002      	b.n	8001800 <LoopCopyDataInit>

080017fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fe:	3304      	adds	r3, #4

08001800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001804:	d3f9      	bcc.n	80017fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001806:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001808:	4c0a      	ldr	r4, [pc, #40]	@ (8001834 <LoopForever+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800180c:	e001      	b.n	8001812 <LoopFillZerobss>

0800180e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001810:	3204      	adds	r2, #4

08001812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001814:	d3fb      	bcc.n	800180e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001816:	f004 fc2f 	bl	8006078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181a:	f7ff fce9 	bl	80011f0 <main>

0800181e <LoopForever>:

LoopForever:
    b LoopForever
 800181e:	e7fe      	b.n	800181e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001820:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800182c:	08008560 	.word	0x08008560
  ldr r2, =_sbss
 8001830:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001834:	2000046c 	.word	0x2000046c

08001838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC1_2_IRQHandler>
	...

0800183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_Init+0x3c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_Init+0x3c>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001850:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f001 fb66 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001858:	2000      	movs	r0, #0
 800185a:	f000 f80f 	bl	800187c <HAL_InitTick>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d002      	beq.n	800186a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	e001      	b.n	800186e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800186a:	f7ff fe05 	bl	8001478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800186e:	79fb      	ldrb	r3, [r7, #7]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001888:	4b17      	ldr	r3, [pc, #92]	@ (80018e8 <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d023      	beq.n	80018d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001890:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <HAL_InitTick+0x70>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <HAL_InitTick+0x6c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f001 fb63 	bl	8002f72 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10f      	bne.n	80018d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d809      	bhi.n	80018cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f001 fb3b 	bl	8002f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_InitTick+0x74>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	e007      	b.n	80018dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
 80018d0:	e004      	b.n	80018dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	73fb      	strb	r3, [r7, #15]
 80018d6:	e001      	b.n	80018dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000008 	.word	0x20000008
 8001918:	2000031c 	.word	0x2000031c

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	2000031c 	.word	0x2000031c

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000008 	.word	0x20000008

0800197c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	609a      	str	r2, [r3, #8]
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
 80019f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3360      	adds	r3, #96	@ 0x60
 80019f6:	461a      	mov	r2, r3
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <LL_ADC_SetOffset+0x44>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	4313      	orrs	r3, r2
 8001a14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	03fff000 	.word	0x03fff000

08001a2c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3360      	adds	r3, #96	@ 0x60
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	3360      	adds	r3, #96	@ 0x60
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3330      	adds	r3, #48	@ 0x30
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	4413      	add	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	211f      	movs	r1, #31
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	0e9b      	lsrs	r3, r3, #26
 8001aec:	f003 011f 	and.w	r1, r3, #31
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f003 031f 	and.w	r3, r3, #31
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	431a      	orrs	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b00:	bf00      	nop
 8001b02:	371c      	adds	r7, #28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0e5b      	lsrs	r3, r3, #25
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	4413      	add	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0d1b      	lsrs	r3, r3, #20
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2107      	movs	r1, #7
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	401a      	ands	r2, r3
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	0d1b      	lsrs	r3, r3, #20
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	431a      	orrs	r2, r3
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b56:	bf00      	nop
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	401a      	ands	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0318 	and.w	r3, r3, #24
 8001b86:	4908      	ldr	r1, [pc, #32]	@ (8001ba8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b88:	40d9      	lsrs	r1, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	400b      	ands	r3, r1
 8001b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b92:	431a      	orrs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	0007ffff 	.word	0x0007ffff

08001bac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001bf4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6093      	str	r3, [r2, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c1c:	d101      	bne.n	8001c22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <LL_ADC_IsEnabled+0x18>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <LL_ADC_IsEnabled+0x1a>
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cde:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ce2:	f043 0204 	orr.w	r2, r3, #4
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d101      	bne.n	8001d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d101      	bne.n	8001d34 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d44:	b590      	push	{r4, r7, lr}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e130      	b.n	8001fc0 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d109      	bne.n	8001d80 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff f959 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff3f 	bl	8001c08 <LL_ADC_IsDeepPowerDownEnabled>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff25 	bl	8001be4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ff5a 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff3e 	bl	8001c30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001db4:	4b84      	ldr	r3, [pc, #528]	@ (8001fc8 <HAL_ADC_Init+0x284>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	4a84      	ldr	r2, [pc, #528]	@ (8001fcc <HAL_ADC_Init+0x288>)
 8001dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc0:	099b      	lsrs	r3, r3, #6
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff3c 	bl	8001c58 <LL_ADC_IsInternalRegulatorEnabled>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dea:	f043 0210 	orr.w	r2, r3, #16
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff ff75 	bl	8001cf6 <LL_ADC_REG_IsConversionOngoing>
 8001e0c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 80c9 	bne.w	8001fae <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 80c5 	bne.w	8001fae <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e2c:	f043 0202 	orr.w	r2, r3, #2
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff35 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d115      	bne.n	8001e70 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e44:	4862      	ldr	r0, [pc, #392]	@ (8001fd0 <HAL_ADC_Init+0x28c>)
 8001e46:	f7ff ff2f 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e4a:	4604      	mov	r4, r0
 8001e4c:	4861      	ldr	r0, [pc, #388]	@ (8001fd4 <HAL_ADC_Init+0x290>)
 8001e4e:	f7ff ff2b 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e52:	4603      	mov	r3, r0
 8001e54:	431c      	orrs	r4, r3
 8001e56:	4860      	ldr	r0, [pc, #384]	@ (8001fd8 <HAL_ADC_Init+0x294>)
 8001e58:	f7ff ff26 	bl	8001ca8 <LL_ADC_IsEnabled>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	4323      	orrs	r3, r4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d105      	bne.n	8001e70 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	485c      	ldr	r0, [pc, #368]	@ (8001fdc <HAL_ADC_Init+0x298>)
 8001e6c:	f7ff fd86 	bl	800197c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e5b      	ldrb	r3, [r3, #25]
 8001e74:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e7a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e80:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e86:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d106      	bne.n	8001eac <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	045b      	lsls	r3, r3, #17
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	4b44      	ldr	r3, [pc, #272]	@ (8001fe0 <HAL_ADC_Init+0x29c>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6812      	ldr	r2, [r2, #0]
 8001ed6:	69b9      	ldr	r1, [r7, #24]
 8001ed8:	430b      	orrs	r3, r1
 8001eda:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff1b 	bl	8001d1c <LL_ADC_INJ_IsConversionOngoing>
 8001ee6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d13d      	bne.n	8001f6a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d13a      	bne.n	8001f6a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ef8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f00:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001f10:	f023 0302 	bic.w	r3, r3, #2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	69b9      	ldr	r1, [r7, #24]
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d118      	bne.n	8001f5a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001f32:	f023 0304 	bic.w	r3, r3, #4
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	611a      	str	r2, [r3, #16]
 8001f58:	e007      	b.n	8001f6a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	691a      	ldr	r2, [r3, #16]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10c      	bne.n	8001f8c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f78:	f023 010f 	bic.w	r1, r3, #15
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f8a:	e007      	b.n	8001f9c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 020f 	bic.w	r2, r2, #15
 8001f9a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa0:	f023 0303 	bic.w	r3, r3, #3
 8001fa4:	f043 0201 	orr.w	r2, r3, #1
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	655a      	str	r2, [r3, #84]	@ 0x54
 8001fac:	e007      	b.n	8001fbe <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb2:	f043 0210 	orr.w	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3724      	adds	r7, #36	@ 0x24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd90      	pop	{r4, r7, pc}
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	053e2d63 	.word	0x053e2d63
 8001fd0:	50040000 	.word	0x50040000
 8001fd4:	50040100 	.word	0x50040100
 8001fd8:	50040200 	.word	0x50040200
 8001fdc:	50040300 	.word	0x50040300
 8001fe0:	fff0c007 	.word	0xfff0c007

08001fe4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fec:	4857      	ldr	r0, [pc, #348]	@ (800214c <HAL_ADC_Start+0x168>)
 8001fee:	f7ff fddd 	bl	8001bac <LL_ADC_GetMultimode>
 8001ff2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fe7c 	bl	8001cf6 <LL_ADC_REG_IsConversionOngoing>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	f040 809c 	bne.w	800213e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_ADC_Start+0x30>
 8002010:	2302      	movs	r3, #2
 8002012:	e097      	b.n	8002144 <HAL_ADC_Start+0x160>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 fd73 	bl	8002b08 <ADC_Enable>
 8002022:	4603      	mov	r3, r0
 8002024:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 8083 	bne.w	8002134 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002032:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a42      	ldr	r2, [pc, #264]	@ (8002150 <HAL_ADC_Start+0x16c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d002      	beq.n	8002052 <HAL_ADC_Start+0x6e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	e000      	b.n	8002054 <HAL_ADC_Start+0x70>
 8002052:	4b40      	ldr	r3, [pc, #256]	@ (8002154 <HAL_ADC_Start+0x170>)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6812      	ldr	r2, [r2, #0]
 8002058:	4293      	cmp	r3, r2
 800205a:	d002      	beq.n	8002062 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d105      	bne.n	800206e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002066:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002072:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800207a:	d106      	bne.n	800208a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002080:	f023 0206 	bic.w	r2, r3, #6
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	@ 0x58
 8002088:	e002      	b.n	8002090 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	221c      	movs	r2, #28
 8002096:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002150 <HAL_ADC_Start+0x16c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d002      	beq.n	80020b0 <HAL_ADC_Start+0xcc>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	e000      	b.n	80020b2 <HAL_ADC_Start+0xce>
 80020b0:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_ADC_Start+0x170>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d002      	beq.n	80020cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d114      	bne.n	80020f6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d007      	beq.n	80020ea <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fded 	bl	8001cce <LL_ADC_REG_StartConversion>
 80020f4:	e025      	b.n	8002142 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <HAL_ADC_Start+0x16c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d002      	beq.n	8002112 <HAL_ADC_Start+0x12e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e000      	b.n	8002114 <HAL_ADC_Start+0x130>
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <HAL_ADC_Start+0x170>)
 8002114:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00f      	beq.n	8002142 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002126:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800212a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	@ 0x54
 8002132:	e006      	b.n	8002142 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800213c:	e001      	b.n	8002142 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800213e:	2302      	movs	r3, #2
 8002140:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002142:	7dfb      	ldrb	r3, [r7, #23]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	50040300 	.word	0x50040300
 8002150:	50040100 	.word	0x50040100
 8002154:	50040000 	.word	0x50040000

08002158 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002162:	4866      	ldr	r0, [pc, #408]	@ (80022fc <HAL_ADC_PollForConversion+0x1a4>)
 8002164:	f7ff fd22 	bl	8001bac <LL_ADC_GetMultimode>
 8002168:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	2b08      	cmp	r3, #8
 8002170:	d102      	bne.n	8002178 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002172:	2308      	movs	r3, #8
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e02a      	b.n	80021ce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b05      	cmp	r3, #5
 8002182:	d002      	beq.n	800218a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b09      	cmp	r3, #9
 8002188:	d111      	bne.n	80021ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0a4      	b.n	80022f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021a8:	2304      	movs	r3, #4
 80021aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80021ac:	e00f      	b.n	80021ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80021ae:	4853      	ldr	r0, [pc, #332]	@ (80022fc <HAL_ADC_PollForConversion+0x1a4>)
 80021b0:	f7ff fd0a 	bl	8001bc8 <LL_ADC_GetMultiDMATransfer>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021be:	f043 0220 	orr.w	r2, r3, #32
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e093      	b.n	80022f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80021ca:	2304      	movs	r3, #4
 80021cc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ce:	f7ff fba5 	bl	800191c <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021d4:	e021      	b.n	800221a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021dc:	d01d      	beq.n	800221a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021de:	f7ff fb9d 	bl	800191c <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d302      	bcc.n	80021f4 <HAL_ADC_PollForConversion+0x9c>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d112      	bne.n	800221a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10b      	bne.n	800221a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e06b      	b.n	80022f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	4013      	ands	r3, r2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0d6      	beq.n	80021d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fc28 	bl	8001a8e <LL_ADC_REG_IsTriggerSourceSWStart>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7e5b      	ldrb	r3, [r3, #25]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d118      	bne.n	800227e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b08      	cmp	r3, #8
 8002258:	d111      	bne.n	800227e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d105      	bne.n	800227e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <HAL_ADC_PollForConversion+0x1a8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d002      	beq.n	800228e <HAL_ADC_PollForConversion+0x136>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	e000      	b.n	8002290 <HAL_ADC_PollForConversion+0x138>
 800228e:	4b1d      	ldr	r3, [pc, #116]	@ (8002304 <HAL_ADC_PollForConversion+0x1ac>)
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	4293      	cmp	r3, r2
 8002296:	d008      	beq.n	80022aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d002      	beq.n	80022aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d104      	bne.n	80022b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	e00c      	b.n	80022ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a11      	ldr	r2, [pc, #68]	@ (8002300 <HAL_ADC_PollForConversion+0x1a8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d002      	beq.n	80022c4 <HAL_ADC_PollForConversion+0x16c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	e000      	b.n	80022c6 <HAL_ADC_PollForConversion+0x16e>
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_ADC_PollForConversion+0x1ac>)
 80022c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d104      	bne.n	80022de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2208      	movs	r2, #8
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e008      	b.n	80022f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	220c      	movs	r2, #12
 80022ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	50040300 	.word	0x50040300
 8002300:	50040100 	.word	0x50040100
 8002304:	50040000 	.word	0x50040000

08002308 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b0b6      	sub	sp, #216	@ 0xd8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002334:	2300      	movs	r3, #0
 8002336:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x22>
 8002342:	2302      	movs	r3, #2
 8002344:	e3c9      	b.n	8002ada <HAL_ADC_ConfigChannel+0x7b6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fccf 	bl	8001cf6 <LL_ADC_REG_IsConversionOngoing>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 83aa 	bne.w	8002ab4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d824      	bhi.n	80023ba <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	3b02      	subs	r3, #2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d81b      	bhi.n	80023b2 <HAL_ADC_ConfigChannel+0x8e>
 800237a:	a201      	add	r2, pc, #4	@ (adr r2, 8002380 <HAL_ADC_ConfigChannel+0x5c>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	08002391 	.word	0x08002391
 8002384:	08002399 	.word	0x08002399
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023a9 	.word	0x080023a9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002390:	230c      	movs	r3, #12
 8002392:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002396:	e010      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002398:	2312      	movs	r3, #18
 800239a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800239e:	e00c      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80023a0:	2318      	movs	r3, #24
 80023a2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023a6:	e008      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80023a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80023b2:	2306      	movs	r3, #6
 80023b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80023b8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	461a      	mov	r2, r3
 80023c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80023c8:	f7ff fb74 	bl	8001ab4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fc90 	bl	8001cf6 <LL_ADC_REG_IsConversionOngoing>
 80023d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff fc9c 	bl	8001d1c <LL_ADC_INJ_IsConversionOngoing>
 80023e4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 81a4 	bne.w	800273a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 819f 	bne.w	800273a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	461a      	mov	r2, r3
 800240a:	f7ff fb7f 	bl	8001b0c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	08db      	lsrs	r3, r3, #3
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	2b04      	cmp	r3, #4
 800242e:	d00a      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6919      	ldr	r1, [r3, #16]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002440:	f7ff fad0 	bl	80019e4 <LL_ADC_SetOffset>
 8002444:	e179      	b.n	800273a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2100      	movs	r1, #0
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff faed 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10a      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x14e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fae2 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	e01e      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x18c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2100      	movs	r1, #0
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fad7 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002494:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80024a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_ADC_ConfigChannel+0x1a4>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0e9b      	lsrs	r3, r3, #26
 80024c2:	f003 031f 	and.w	r3, r3, #31
 80024c6:	e018      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1d6>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80024dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80024e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80024ec:	2320      	movs	r3, #32
 80024ee:	e004      	b.n	80024fa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80024f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	2100      	movs	r1, #0
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff faa6 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff fa8a 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002518:	4603      	mov	r3, r0
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x214>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fa7f 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 800252e:	4603      	mov	r3, r0
 8002530:	0e9b      	lsrs	r3, r3, #26
 8002532:	f003 021f 	and.w	r2, r3, #31
 8002536:	e01e      	b.n	8002576 <HAL_ADC_ConfigChannel+0x252>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fa74 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 8002544:	4603      	mov	r3, r0
 8002546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002556:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800255a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800255e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800256a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257e:	2b00      	cmp	r3, #0
 8002580:	d105      	bne.n	800258e <HAL_ADC_ConfigChannel+0x26a>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0e9b      	lsrs	r3, r3, #26
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x29c>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002596:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80025a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80025a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80025aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80025b2:	2320      	movs	r3, #32
 80025b4:	e004      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80025b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d106      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2200      	movs	r2, #0
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fa43 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2102      	movs	r1, #2
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff fa27 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10a      	bne.n	80025fe <HAL_ADC_ConfigChannel+0x2da>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2102      	movs	r1, #2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fa1c 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	0e9b      	lsrs	r3, r3, #26
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	e01e      	b.n	800263c <HAL_ADC_ConfigChannel+0x318>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2102      	movs	r1, #2
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff fa11 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800261c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002620:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800262c:	2320      	movs	r3, #32
 800262e:	e004      	b.n	800263a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002630:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x330>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0e9b      	lsrs	r3, r3, #26
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	e014      	b.n	800267e <HAL_ADC_ConfigChannel+0x35a>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002664:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002668:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002670:	2320      	movs	r3, #32
 8002672:	e004      	b.n	800267e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002674:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002678:	fab3 f383 	clz	r3, r3
 800267c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800267e:	429a      	cmp	r2, r3
 8002680:	d106      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	2102      	movs	r1, #2
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f9e4 	bl	8001a58 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2103      	movs	r1, #3
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff f9c8 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 800269c:	4603      	mov	r3, r0
 800269e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10a      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x398>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2103      	movs	r1, #3
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff f9bd 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 80026b2:	4603      	mov	r3, r0
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 021f 	and.w	r2, r3, #31
 80026ba:	e017      	b.n	80026ec <HAL_ADC_ConfigChannel+0x3c8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2103      	movs	r1, #3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f9b2 	bl	8001a2c <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80026d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80026d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80026de:	2320      	movs	r3, #32
 80026e0:	e003      	b.n	80026ea <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80026e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x3e0>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	0e9b      	lsrs	r3, r3, #26
 80026fe:	f003 031f 	and.w	r3, r3, #31
 8002702:	e011      	b.n	8002728 <HAL_ADC_ConfigChannel+0x404>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800270c:	fa93 f3a3 	rbit	r3, r3
 8002710:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002712:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002714:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e003      	b.n	8002728 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002728:	429a      	cmp	r2, r3
 800272a:	d106      	bne.n	800273a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2200      	movs	r2, #0
 8002732:	2103      	movs	r1, #3
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff f98f 	bl	8001a58 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fab2 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8140 	bne.w	80029cc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	461a      	mov	r2, r3
 800275a:	f7ff fa03 	bl	8001b64 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a8f      	ldr	r2, [pc, #572]	@ (80029a0 <HAL_ADC_ConfigChannel+0x67c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	f040 8131 	bne.w	80029cc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x46e>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	0e9b      	lsrs	r3, r3, #26
 8002780:	3301      	adds	r3, #1
 8002782:	f003 031f 	and.w	r3, r3, #31
 8002786:	2b09      	cmp	r3, #9
 8002788:	bf94      	ite	ls
 800278a:	2301      	movls	r3, #1
 800278c:	2300      	movhi	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e019      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4a2>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800279a:	fa93 f3a3 	rbit	r3, r3
 800279e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80027a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80027aa:	2320      	movs	r3, #32
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80027ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b0:	fab3 f383 	clz	r3, r3
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	2b09      	cmp	r3, #9
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d079      	beq.n	80028be <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d107      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x4c2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	0e9b      	lsrs	r3, r3, #26
 80027dc:	3301      	adds	r3, #1
 80027de:	069b      	lsls	r3, r3, #26
 80027e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e4:	e015      	b.n	8002812 <HAL_ADC_ConfigChannel+0x4ee>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e003      	b.n	800280a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002802:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800281a:	2b00      	cmp	r3, #0
 800281c:	d109      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x50e>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	0e9b      	lsrs	r3, r3, #26
 8002824:	3301      	adds	r3, #1
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	2101      	movs	r1, #1
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	e017      	b.n	8002862 <HAL_ADC_ConfigChannel+0x53e>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800283a:	fa93 f3a3 	rbit	r3, r3
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002842:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800284a:	2320      	movs	r3, #32
 800284c:	e003      	b.n	8002856 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800284e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	2101      	movs	r1, #1
 800285e:	fa01 f303 	lsl.w	r3, r1, r3
 8002862:	ea42 0103 	orr.w	r1, r2, r3
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x564>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	0e9b      	lsrs	r3, r3, #26
 8002878:	3301      	adds	r3, #1
 800287a:	f003 021f 	and.w	r2, r3, #31
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	051b      	lsls	r3, r3, #20
 8002886:	e018      	b.n	80028ba <HAL_ADC_ConfigChannel+0x596>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002898:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800289a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e003      	b.n	80028ac <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80028a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	f003 021f 	and.w	r2, r3, #31
 80028b2:	4613      	mov	r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4413      	add	r3, r2
 80028b8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ba:	430b      	orrs	r3, r1
 80028bc:	e081      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <HAL_ADC_ConfigChannel+0x5b6>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	3301      	adds	r3, #1
 80028d2:	069b      	lsls	r3, r3, #26
 80028d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d8:	e015      	b.n	8002906 <HAL_ADC_ConfigChannel+0x5e2>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	069b      	lsls	r3, r3, #26
 8002902:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x602>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	3301      	adds	r3, #1
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	2101      	movs	r1, #1
 8002920:	fa01 f303 	lsl.w	r3, r1, r3
 8002924:	e017      	b.n	8002956 <HAL_ADC_ConfigChannel+0x632>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	61bb      	str	r3, [r7, #24]
  return result;
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800293e:	2320      	movs	r3, #32
 8002940:	e003      	b.n	800294a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f003 031f 	and.w	r3, r3, #31
 8002950:	2101      	movs	r1, #1
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	ea42 0103 	orr.w	r1, r2, r3
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x65e>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0e9b      	lsrs	r3, r3, #26
 800296c:	3301      	adds	r3, #1
 800296e:	f003 021f 	and.w	r2, r3, #31
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	3b1e      	subs	r3, #30
 800297a:	051b      	lsls	r3, r3, #20
 800297c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x69c>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	fa93 f3a3 	rbit	r3, r3
 800298e:	60fb      	str	r3, [r7, #12]
  return result;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d104      	bne.n	80029a4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800299a:	2320      	movs	r3, #32
 800299c:	e006      	b.n	80029ac <HAL_ADC_ConfigChannel+0x688>
 800299e:	bf00      	nop
 80029a0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	3301      	adds	r3, #1
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	4613      	mov	r3, r2
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	4413      	add	r3, r2
 80029b8:	3b1e      	subs	r3, #30
 80029ba:	051b      	lsls	r3, r3, #20
 80029bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7ff f8a0 	bl	8001b0c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b44      	ldr	r3, [pc, #272]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x7c0>)
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07a      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d8:	4843      	ldr	r0, [pc, #268]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7c4>)
 80029da:	f7fe fff5 	bl	80019c8 <LL_ADC_GetCommonPathInternalCh>
 80029de:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a41      	ldr	r2, [pc, #260]	@ (8002aec <HAL_ADC_ConfigChannel+0x7c8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d12c      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d126      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3c      	ldr	r2, [pc, #240]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7cc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_ADC_ConfigChannel+0x6e8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d15d      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a14:	4619      	mov	r1, r3
 8002a16:	4834      	ldr	r0, [pc, #208]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a18:	f7fe ffc3 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a1c:	4b36      	ldr	r3, [pc, #216]	@ (8002af8 <HAL_ADC_ConfigChannel+0x7d4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	099b      	lsrs	r3, r3, #6
 8002a22:	4a36      	ldr	r2, [pc, #216]	@ (8002afc <HAL_ADC_ConfigChannel+0x7d8>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	099b      	lsrs	r3, r3, #6
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a36:	e002      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f9      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a44:	e040      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d118      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d112      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a23      	ldr	r2, [pc, #140]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d004      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x74c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a22      	ldr	r2, [pc, #136]	@ (8002af4 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d12d      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a78:	4619      	mov	r1, r3
 8002a7a:	481b      	ldr	r0, [pc, #108]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a7c:	f7fe ff91 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a80:	e024      	b.n	8002acc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1f      	ldr	r2, [pc, #124]	@ (8002b04 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d120      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d11a      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d115      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aa6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002aaa:	4619      	mov	r1, r3
 8002aac:	480e      	ldr	r0, [pc, #56]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x7c4>)
 8002aae:	f7fe ff78 	bl	80019a2 <LL_ADC_SetCommonPathInternalCh>
 8002ab2:	e00c      	b.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ac6:	e002      	b.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002acc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ad6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	37d8      	adds	r7, #216	@ 0xd8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	80080000 	.word	0x80080000
 8002ae8:	50040300 	.word	0x50040300
 8002aec:	c7520000 	.word	0xc7520000
 8002af0:	50040000 	.word	0x50040000
 8002af4:	50040200 	.word	0x50040200
 8002af8:	20000000 	.word	0x20000000
 8002afc:	053e2d63 	.word	0x053e2d63
 8002b00:	cb840000 	.word	0xcb840000
 8002b04:	80000001 	.word	0x80000001

08002b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff f8c5 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d169      	bne.n	8002bf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	@ (8002c04 <ADC_Enable+0xfc>)
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b36:	f043 0210 	orr.w	r2, r3, #16
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	f043 0201 	orr.w	r2, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e055      	b.n	8002bfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f894 	bl	8001c80 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b58:	482b      	ldr	r0, [pc, #172]	@ (8002c08 <ADC_Enable+0x100>)
 8002b5a:	f7fe ff35 	bl	80019c8 <LL_ADC_GetCommonPathInternalCh>
 8002b5e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002b60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <ADC_Enable+0x104>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	099b      	lsrs	r3, r3, #6
 8002b6e:	4a28      	ldr	r2, [pc, #160]	@ (8002c10 <ADC_Enable+0x108>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	099b      	lsrs	r3, r3, #6
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b82:	e002      	b.n	8002b8a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f9      	bne.n	8002b84 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b90:	f7fe fec4 	bl	800191c <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b96:	e028      	b.n	8002bea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff f883 	bl	8001ca8 <LL_ADC_IsEnabled>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d104      	bne.n	8002bb2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff f867 	bl	8001c80 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bb2:	f7fe feb3 	bl	800191c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d914      	bls.n	8002bea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d00d      	beq.n	8002bea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e007      	b.n	8002bfa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d1cf      	bne.n	8002b98 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	8000003f 	.word	0x8000003f
 8002c08:	50040300 	.word	0x50040300
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	053e2d63 	.word	0x053e2d63

08002c14 <LL_ADC_IsEnabled>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d101      	bne.n	8002c2c <LL_ADC_IsEnabled+0x18>
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e000      	b.n	8002c2e <LL_ADC_IsEnabled+0x1a>
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b09f      	sub	sp, #124	@ 0x7c
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d101      	bne.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e093      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c86:	2300      	movs	r3, #0
 8002c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a47      	ldr	r2, [pc, #284]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d102      	bne.n	8002c9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c98:	4b46      	ldr	r3, [pc, #280]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	e001      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cac:	f043 0220 	orr.w	r2, r3, #32
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e072      	b.n	8002da6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff ffb9 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002cc8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ffb3 	bl	8002c3a <LL_ADC_REG_IsConversionOngoing>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d154      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d151      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ce0:	4b35      	ldr	r3, [pc, #212]	@ (8002db8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ce2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02c      	beq.n	8002d46 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002cec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cfe:	035b      	lsls	r3, r3, #13
 8002d00:	430b      	orrs	r3, r1
 8002d02:	431a      	orrs	r2, r3
 8002d04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d06:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d08:	4829      	ldr	r0, [pc, #164]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d0a:	f7ff ff83 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d0e:	4604      	mov	r4, r0
 8002d10:	4828      	ldr	r0, [pc, #160]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d12:	f7ff ff7f 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d16:	4603      	mov	r3, r0
 8002d18:	431c      	orrs	r4, r3
 8002d1a:	4828      	ldr	r0, [pc, #160]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d1c:	f7ff ff7a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4323      	orrs	r3, r4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d137      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6811      	ldr	r1, [r2, #0]
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d42:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d44:	e028      	b.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d50:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d52:	4817      	ldr	r0, [pc, #92]	@ (8002db0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002d54:	f7ff ff5e 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d58:	4604      	mov	r4, r0
 8002d5a:	4816      	ldr	r0, [pc, #88]	@ (8002db4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002d5c:	f7ff ff5a 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d60:	4603      	mov	r3, r0
 8002d62:	431c      	orrs	r4, r3
 8002d64:	4815      	ldr	r0, [pc, #84]	@ (8002dbc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002d66:	f7ff ff55 	bl	8002c14 <LL_ADC_IsEnabled>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	4323      	orrs	r3, r4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d112      	bne.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d7a:	f023 030f 	bic.w	r3, r3, #15
 8002d7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d82:	e009      	b.n	8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	f043 0220 	orr.w	r2, r3, #32
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002d96:	e000      	b.n	8002d9a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002da2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	377c      	adds	r7, #124	@ 0x7c
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd90      	pop	{r4, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	50040000 	.word	0x50040000
 8002db4:	50040100 	.word	0x50040100
 8002db8:	50040300 	.word	0x50040300
 8002dbc:	50040200 	.word	0x50040200

08002dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	@ (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	@ (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	@ (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	@ 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	@ (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff47 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff5c 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f7ff ffb0 	bl	8002ee0 <SysTick_Config>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f9a:	e17f      	b.n	800329c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8171 	beq.w	8003296 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d005      	beq.n	8002fcc <HAL_GPIO_Init+0x40>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	2b02      	cmp	r3, #2
 8002fca:	d130      	bne.n	800302e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003002:	2201      	movs	r2, #1
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4013      	ands	r3, r2
 8003010:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	f003 0201 	and.w	r2, r3, #1
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b03      	cmp	r3, #3
 8003038:	d118      	bne.n	800306c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003040:	2201      	movs	r2, #1
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	f003 0201 	and.w	r2, r3, #1
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b03      	cmp	r3, #3
 8003076:	d017      	beq.n	80030a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	2203      	movs	r2, #3
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d123      	bne.n	80030fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	220f      	movs	r2, #15
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	6939      	ldr	r1, [r7, #16]
 80030f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0203 	and.w	r2, r3, #3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	4313      	orrs	r3, r2
 8003128:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80ac 	beq.w	8003296 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	4b5f      	ldr	r3, [pc, #380]	@ (80032bc <HAL_GPIO_Init+0x330>)
 8003140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003142:	4a5e      	ldr	r2, [pc, #376]	@ (80032bc <HAL_GPIO_Init+0x330>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6613      	str	r3, [r2, #96]	@ 0x60
 800314a:	4b5c      	ldr	r3, [pc, #368]	@ (80032bc <HAL_GPIO_Init+0x330>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003156:	4a5a      	ldr	r2, [pc, #360]	@ (80032c0 <HAL_GPIO_Init+0x334>)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	3302      	adds	r3, #2
 800315e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003162:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003180:	d025      	beq.n	80031ce <HAL_GPIO_Init+0x242>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a4f      	ldr	r2, [pc, #316]	@ (80032c4 <HAL_GPIO_Init+0x338>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d01f      	beq.n	80031ca <HAL_GPIO_Init+0x23e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a4e      	ldr	r2, [pc, #312]	@ (80032c8 <HAL_GPIO_Init+0x33c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x23a>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a4d      	ldr	r2, [pc, #308]	@ (80032cc <HAL_GPIO_Init+0x340>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x236>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4c      	ldr	r2, [pc, #304]	@ (80032d0 <HAL_GPIO_Init+0x344>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x232>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4b      	ldr	r2, [pc, #300]	@ (80032d4 <HAL_GPIO_Init+0x348>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x22e>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4a      	ldr	r2, [pc, #296]	@ (80032d8 <HAL_GPIO_Init+0x34c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x22a>
 80031b2:	2306      	movs	r3, #6
 80031b4:	e00c      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e00a      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e008      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031be:	2304      	movs	r3, #4
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e004      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e002      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x244>
 80031ce:	2300      	movs	r3, #0
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	f002 0203 	and.w	r2, r2, #3
 80031d6:	0092      	lsls	r2, r2, #2
 80031d8:	4093      	lsls	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031e0:	4937      	ldr	r1, [pc, #220]	@ (80032c0 <HAL_GPIO_Init+0x334>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031ee:	4b3b      	ldr	r3, [pc, #236]	@ (80032dc <HAL_GPIO_Init+0x350>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	43db      	mvns	r3, r3
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4013      	ands	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003212:	4a32      	ldr	r2, [pc, #200]	@ (80032dc <HAL_GPIO_Init+0x350>)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003218:	4b30      	ldr	r3, [pc, #192]	@ (80032dc <HAL_GPIO_Init+0x350>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	43db      	mvns	r3, r3
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4013      	ands	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800323c:	4a27      	ldr	r2, [pc, #156]	@ (80032dc <HAL_GPIO_Init+0x350>)
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003242:	4b26      	ldr	r3, [pc, #152]	@ (80032dc <HAL_GPIO_Init+0x350>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003266:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_GPIO_Init+0x350>)
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800326c:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_GPIO_Init+0x350>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003290:	4a12      	ldr	r2, [pc, #72]	@ (80032dc <HAL_GPIO_Init+0x350>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	3301      	adds	r3, #1
 800329a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa22 f303 	lsr.w	r3, r2, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f47f ae78 	bne.w	8002f9c <HAL_GPIO_Init+0x10>
  }
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40010000 	.word	0x40010000
 80032c4:	48000400 	.word	0x48000400
 80032c8:	48000800 	.word	0x48000800
 80032cc:	48000c00 	.word	0x48000c00
 80032d0:	48001000 	.word	0x48001000
 80032d4:	48001400 	.word	0x48001400
 80032d8:	48001800 	.word	0x48001800
 80032dc:	40010400 	.word	0x40010400

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032fc:	e002      	b.n	8003304 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032fe:	887a      	ldrh	r2, [r7, #2]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003304:	bf00      	nop
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003314:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_PWREx_GetVoltageRange+0x18>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800331c:	4618      	mov	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40007000 	.word	0x40007000

0800332c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800333a:	d130      	bne.n	800339e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800333c:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003348:	d038      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800334a:	4b20      	ldr	r3, [pc, #128]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003352:	4a1e      	ldr	r2, [pc, #120]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003354:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003358:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800335a:	4b1d      	ldr	r3, [pc, #116]	@ (80033d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2232      	movs	r2, #50	@ 0x32
 8003360:	fb02 f303 	mul.w	r3, r2, r3
 8003364:	4a1b      	ldr	r2, [pc, #108]	@ (80033d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003366:	fba2 2303 	umull	r2, r3, r2, r3
 800336a:	0c9b      	lsrs	r3, r3, #18
 800336c:	3301      	adds	r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003370:	e002      	b.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3b01      	subs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003378:	4b14      	ldr	r3, [pc, #80]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003384:	d102      	bne.n	800338c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f2      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338c:	4b0f      	ldr	r3, [pc, #60]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003398:	d110      	bne.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e00f      	b.n	80033be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800339e:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033aa:	d007      	beq.n	80033bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ac:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80033b4:	4a05      	ldr	r2, [pc, #20]	@ (80033cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40007000 	.word	0x40007000
 80033d0:	20000000 	.word	0x20000000
 80033d4:	431bde83 	.word	0x431bde83

080033d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e3ca      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ea:	4b97      	ldr	r3, [pc, #604]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f4:	4b94      	ldr	r3, [pc, #592]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0310 	and.w	r3, r3, #16
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80e4 	beq.w	80035d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d007      	beq.n	8003422 <HAL_RCC_OscConfig+0x4a>
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f040 808b 	bne.w	8003530 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b01      	cmp	r3, #1
 800341e:	f040 8087 	bne.w	8003530 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003422:	4b89      	ldr	r3, [pc, #548]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_RCC_OscConfig+0x62>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e3a2      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1a      	ldr	r2, [r3, #32]
 800343e:	4b82      	ldr	r3, [pc, #520]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	2b00      	cmp	r3, #0
 8003448:	d004      	beq.n	8003454 <HAL_RCC_OscConfig+0x7c>
 800344a:	4b7f      	ldr	r3, [pc, #508]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003452:	e005      	b.n	8003460 <HAL_RCC_OscConfig+0x88>
 8003454:	4b7c      	ldr	r3, [pc, #496]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003460:	4293      	cmp	r3, r2
 8003462:	d223      	bcs.n	80034ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fd55 	bl	8003f18 <RCC_SetFlashLatencyFromMSIRange>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e383      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003478:	4b73      	ldr	r3, [pc, #460]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a72      	ldr	r2, [pc, #456]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800347e:	f043 0308 	orr.w	r3, r3, #8
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b70      	ldr	r3, [pc, #448]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	496d      	ldr	r1, [pc, #436]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003492:	4313      	orrs	r3, r2
 8003494:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003496:	4b6c      	ldr	r3, [pc, #432]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	021b      	lsls	r3, r3, #8
 80034a4:	4968      	ldr	r1, [pc, #416]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
 80034aa:	e025      	b.n	80034f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034ac:	4b66      	ldr	r3, [pc, #408]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a65      	ldr	r2, [pc, #404]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034b2:	f043 0308 	orr.w	r3, r3, #8
 80034b6:	6013      	str	r3, [r2, #0]
 80034b8:	4b63      	ldr	r3, [pc, #396]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4960      	ldr	r1, [pc, #384]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	021b      	lsls	r3, r3, #8
 80034d8:	495b      	ldr	r1, [pc, #364]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fd15 	bl	8003f18 <RCC_SetFlashLatencyFromMSIRange>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e343      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034f8:	f000 fc4a 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b52      	ldr	r3, [pc, #328]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	091b      	lsrs	r3, r3, #4
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	4950      	ldr	r1, [pc, #320]	@ (800364c <HAL_RCC_OscConfig+0x274>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	fa22 f303 	lsr.w	r3, r2, r3
 8003514:	4a4e      	ldr	r2, [pc, #312]	@ (8003650 <HAL_RCC_OscConfig+0x278>)
 8003516:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003518:	4b4e      	ldr	r3, [pc, #312]	@ (8003654 <HAL_RCC_OscConfig+0x27c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe f9ad 	bl	800187c <HAL_InitTick>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003526:	7bfb      	ldrb	r3, [r7, #15]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d052      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	e327      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003538:	4b43      	ldr	r3, [pc, #268]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a42      	ldr	r2, [pc, #264]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003544:	f7fe f9ea 	bl	800191c <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354c:	f7fe f9e6 	bl	800191c <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e310      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800355e:	4b3a      	ldr	r3, [pc, #232]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800356a:	4b37      	ldr	r3, [pc, #220]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a36      	ldr	r2, [pc, #216]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003570:	f043 0308 	orr.w	r3, r3, #8
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b34      	ldr	r3, [pc, #208]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	4931      	ldr	r1, [pc, #196]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003588:	4b2f      	ldr	r3, [pc, #188]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	492c      	ldr	r1, [pc, #176]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
 800359c:	e01a      	b.n	80035d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800359e:	4b2a      	ldr	r3, [pc, #168]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a29      	ldr	r2, [pc, #164]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035aa:	f7fe f9b7 	bl	800191c <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035b2:	f7fe f9b3 	bl	800191c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e2dd      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c4:	4b20      	ldr	r3, [pc, #128]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1f0      	bne.n	80035b2 <HAL_RCC_OscConfig+0x1da>
 80035d0:	e000      	b.n	80035d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d074      	beq.n	80036ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x21a>
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	2b0c      	cmp	r3, #12
 80035ea:	d10e      	bne.n	800360a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d10b      	bne.n	800360a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f2:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d064      	beq.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d160      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e2ba      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003612:	d106      	bne.n	8003622 <HAL_RCC_OscConfig+0x24a>
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0b      	ldr	r2, [pc, #44]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800361a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e026      	b.n	8003670 <HAL_RCC_OscConfig+0x298>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800362a:	d115      	bne.n	8003658 <HAL_RCC_OscConfig+0x280>
 800362c:	4b06      	ldr	r3, [pc, #24]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a05      	ldr	r2, [pc, #20]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 8003632:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b03      	ldr	r3, [pc, #12]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a02      	ldr	r2, [pc, #8]	@ (8003648 <HAL_RCC_OscConfig+0x270>)
 800363e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	e014      	b.n	8003670 <HAL_RCC_OscConfig+0x298>
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	08008198 	.word	0x08008198
 8003650:	20000000 	.word	0x20000000
 8003654:	20000004 	.word	0x20000004
 8003658:	4ba0      	ldr	r3, [pc, #640]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a9f      	ldr	r2, [pc, #636]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	4b9d      	ldr	r3, [pc, #628]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a9c      	ldr	r2, [pc, #624]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800366a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d013      	beq.n	80036a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe f950 	bl	800191c <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003680:	f7fe f94c 	bl	800191c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b64      	cmp	r3, #100	@ 0x64
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e276      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	4b92      	ldr	r3, [pc, #584]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x2a8>
 800369e:	e014      	b.n	80036ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f93c 	bl	800191c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fe f938 	bl	800191c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	@ 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e262      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ba:	4b88      	ldr	r3, [pc, #544]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x2d0>
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d060      	beq.n	8003798 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_OscConfig+0x310>
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d116      	bne.n	8003716 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	4b7c      	ldr	r3, [pc, #496]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_OscConfig+0x328>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e23f      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b76      	ldr	r3, [pc, #472]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	4973      	ldr	r1, [pc, #460]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003714:	e040      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d023      	beq.n	8003766 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800371e:	4b6f      	ldr	r3, [pc, #444]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a6e      	ldr	r2, [pc, #440]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fe f8f7 	bl	800191c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003732:	f7fe f8f3 	bl	800191c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e21d      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003744:	4b65      	ldr	r3, [pc, #404]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b62      	ldr	r3, [pc, #392]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	495f      	ldr	r1, [pc, #380]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]
 8003764:	e018      	b.n	8003798 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003766:	4b5d      	ldr	r3, [pc, #372]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a5c      	ldr	r2, [pc, #368]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800376c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fe f8d3 	bl	800191c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800377a:	f7fe f8cf 	bl	800191c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1f9      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378c:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1f0      	bne.n	800377a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0308 	and.w	r3, r3, #8
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d03c      	beq.n	800381e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ac:	4b4b      	ldr	r3, [pc, #300]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80037ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037b2:	4a4a      	ldr	r2, [pc, #296]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe f8ae 	bl	800191c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe f8aa 	bl	800191c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1d4      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d6:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80037d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ef      	beq.n	80037c4 <HAL_RCC_OscConfig+0x3ec>
 80037e4:	e01b      	b.n	800381e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e6:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037ec:	4a3b      	ldr	r2, [pc, #236]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe f891 	bl	800191c <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe f88d 	bl	800191c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1b7      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	4b32      	ldr	r3, [pc, #200]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1ef      	bne.n	80037fe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a6 	beq.w	8003978 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382c:	2300      	movs	r3, #0
 800382e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003830:	4b2a      	ldr	r3, [pc, #168]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10d      	bne.n	8003858 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383c:	4b27      	ldr	r3, [pc, #156]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	4a26      	ldr	r2, [pc, #152]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 8003842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003846:	6593      	str	r3, [r2, #88]	@ 0x58
 8003848:	4b24      	ldr	r3, [pc, #144]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003854:	2301      	movs	r3, #1
 8003856:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003858:	4b21      	ldr	r3, [pc, #132]	@ (80038e0 <HAL_RCC_OscConfig+0x508>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d118      	bne.n	8003896 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003864:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <HAL_RCC_OscConfig+0x508>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_RCC_OscConfig+0x508>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800386e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003870:	f7fe f854 	bl	800191c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003878:	f7fe f850 	bl	800191c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e17a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	4b15      	ldr	r3, [pc, #84]	@ (80038e0 <HAL_RCC_OscConfig+0x508>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d108      	bne.n	80038b0 <HAL_RCC_OscConfig+0x4d8>
 800389e:	4b0f      	ldr	r3, [pc, #60]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038ae:	e029      	b.n	8003904 <HAL_RCC_OscConfig+0x52c>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b05      	cmp	r3, #5
 80038b6:	d115      	bne.n	80038e4 <HAL_RCC_OscConfig+0x50c>
 80038b8:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	4a07      	ldr	r2, [pc, #28]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038c8:	4b04      	ldr	r3, [pc, #16]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	4a03      	ldr	r2, [pc, #12]	@ (80038dc <HAL_RCC_OscConfig+0x504>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038d8:	e014      	b.n	8003904 <HAL_RCC_OscConfig+0x52c>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	4b9c      	ldr	r3, [pc, #624]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a9b      	ldr	r2, [pc, #620]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80038f4:	4b98      	ldr	r3, [pc, #608]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038fa:	4a97      	ldr	r2, [pc, #604]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 80038fc:	f023 0304 	bic.w	r3, r3, #4
 8003900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d016      	beq.n	800393a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe f806 	bl	800191c <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe f802 	bl	800191c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e12a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800392a:	4b8b      	ldr	r3, [pc, #556]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0ed      	beq.n	8003914 <HAL_RCC_OscConfig+0x53c>
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800393a:	f7fd ffef 	bl	800191c <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003940:	e00a      	b.n	8003958 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003942:	f7fd ffeb 	bl	800191c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003950:	4293      	cmp	r3, r2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e113      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003958:	4b7f      	ldr	r3, [pc, #508]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ed      	bne.n	8003942 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b7a      	ldr	r3, [pc, #488]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	4a79      	ldr	r2, [pc, #484]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80fe 	beq.w	8003b7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003986:	2b02      	cmp	r3, #2
 8003988:	f040 80d0 	bne.w	8003b2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800398c:	4b72      	ldr	r3, [pc, #456]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399c:	429a      	cmp	r2, r3
 800399e:	d130      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	3b01      	subs	r3, #1
 80039ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d127      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d11f      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80039cc:	2a07      	cmp	r2, #7
 80039ce:	bf14      	ite	ne
 80039d0:	2201      	movne	r2, #1
 80039d2:	2200      	moveq	r2, #0
 80039d4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d113      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	3b01      	subs	r3, #1
 80039e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d109      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	085b      	lsrs	r3, r3, #1
 80039fa:	3b01      	subs	r3, #1
 80039fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d06e      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d069      	beq.n	8003adc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a08:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a14:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0ad      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a24:	4b4c      	ldr	r3, [pc, #304]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a4b      	ldr	r2, [pc, #300]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a30:	f7fd ff74 	bl	800191c <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd ff70 	bl	800191c <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e09a      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4a:	4b43      	ldr	r3, [pc, #268]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a56:	4b40      	ldr	r3, [pc, #256]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	4b40      	ldr	r3, [pc, #256]	@ (8003b5c <HAL_RCC_OscConfig+0x784>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003a66:	3a01      	subs	r2, #1
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003a70:	0212      	lsls	r2, r2, #8
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a78:	0852      	lsrs	r2, r2, #1
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	0552      	lsls	r2, r2, #21
 8003a7e:	4311      	orrs	r1, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a84:	0852      	lsrs	r2, r2, #1
 8003a86:	3a01      	subs	r2, #1
 8003a88:	0652      	lsls	r2, r2, #25
 8003a8a:	4311      	orrs	r1, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003a90:	0912      	lsrs	r2, r2, #4
 8003a92:	0452      	lsls	r2, r2, #17
 8003a94:	430a      	orrs	r2, r1
 8003a96:	4930      	ldr	r1, [pc, #192]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a2a      	ldr	r2, [pc, #168]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003ab2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab4:	f7fd ff32 	bl	800191c <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd ff2e 	bl	800191c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e058      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ace:	4b22      	ldr	r3, [pc, #136]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ada:	e050      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e04f      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d148      	bne.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aec:	4b1a      	ldr	r3, [pc, #104]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a19      	ldr	r2, [pc, #100]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003af2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003af6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003af8:	4b17      	ldr	r3, [pc, #92]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b04:	f7fd ff0a 	bl	800191c <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd ff06 	bl	800191c <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e030      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x734>
 8003b2a:	e028      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0c      	cmp	r3, #12
 8003b30:	d023      	beq.n	8003b7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <HAL_RCC_OscConfig+0x780>)
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd feed 	bl	800191c <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b44:	e00c      	b.n	8003b60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fd fee9 	bl	800191c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d905      	bls.n	8003b60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e013      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b09      	ldr	r3, [pc, #36]	@ (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ec      	bne.n	8003b46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4905      	ldr	r1, [pc, #20]	@ (8003b88 <HAL_RCC_OscConfig+0x7b0>)
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_RCC_OscConfig+0x7b4>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60cb      	str	r3, [r1, #12]
 8003b78:	e001      	b.n	8003b7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3720      	adds	r7, #32
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	feeefffc 	.word	0xfeeefffc

08003b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0e7      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba4:	4b75      	ldr	r3, [pc, #468]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d910      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb2:	4b72      	ldr	r3, [pc, #456]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 0207 	bic.w	r2, r3, #7
 8003bba:	4970      	ldr	r1, [pc, #448]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e0cf      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d010      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b66      	ldr	r3, [pc, #408]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d908      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf0:	4b63      	ldr	r3, [pc, #396]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4960      	ldr	r1, [pc, #384]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d04c      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d107      	bne.n	8003c26 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c16:	4b5a      	ldr	r3, [pc, #360]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d121      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0a6      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d107      	bne.n	8003c3e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c2e:	4b54      	ldr	r3, [pc, #336]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d115      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e09a      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c46:	4b4e      	ldr	r3, [pc, #312]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e08e      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c56:	4b4a      	ldr	r3, [pc, #296]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e086      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b46      	ldr	r3, [pc, #280]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4943      	ldr	r1, [pc, #268]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fd fe50 	bl	800191c <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fd fe4c 	bl	800191c <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e06e      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b3a      	ldr	r3, [pc, #232]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d010      	beq.n	8003cd6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	4b31      	ldr	r3, [pc, #196]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d208      	bcs.n	8003cd6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cc4:	4b2e      	ldr	r3, [pc, #184]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	492b      	ldr	r1, [pc, #172]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cd6:	4b29      	ldr	r3, [pc, #164]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d210      	bcs.n	8003d06 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce4:	4b25      	ldr	r3, [pc, #148]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f023 0207 	bic.w	r2, r3, #7
 8003cec:	4923      	ldr	r1, [pc, #140]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <HAL_RCC_ClockConfig+0x1ec>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e036      	b.n	8003d74 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d12:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	4918      	ldr	r1, [pc, #96]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d30:	4b13      	ldr	r3, [pc, #76]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4910      	ldr	r1, [pc, #64]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d44:	f000 f824 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	091b      	lsrs	r3, r3, #4
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	490b      	ldr	r1, [pc, #44]	@ (8003d84 <HAL_RCC_ClockConfig+0x1f4>)
 8003d56:	5ccb      	ldrb	r3, [r1, r3]
 8003d58:	f003 031f 	and.w	r3, r3, #31
 8003d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d60:	4a09      	ldr	r2, [pc, #36]	@ (8003d88 <HAL_RCC_ClockConfig+0x1f8>)
 8003d62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_ClockConfig+0x1fc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd fd87 	bl	800187c <HAL_InitTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d72:	7afb      	ldrb	r3, [r7, #11]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08008198 	.word	0x08008198
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	@ 0x24
 8003d94:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da8:	4b3b      	ldr	r3, [pc, #236]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b0c      	cmp	r3, #12
 8003dbc:	d121      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d11e      	bne.n	8003e02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003dc4:	4b34      	ldr	r3, [pc, #208]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003dd0:	4b31      	ldr	r3, [pc, #196]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dd6:	0a1b      	lsrs	r3, r3, #8
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	61fb      	str	r3, [r7, #28]
 8003dde:	e005      	b.n	8003dec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003de0:	4b2d      	ldr	r3, [pc, #180]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	091b      	lsrs	r3, r3, #4
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003dec:	4a2b      	ldr	r2, [pc, #172]	@ (8003e9c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d102      	bne.n	8003e0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e08:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	e004      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d101      	bne.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e14:	4b23      	ldr	r3, [pc, #140]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	2b0c      	cmp	r3, #12
 8003e1c:	d134      	bne.n	8003e88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f003 0303 	and.w	r3, r3, #3
 8003e26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d003      	beq.n	8003e36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d003      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0xac>
 8003e34:	e005      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e38:	617b      	str	r3, [r7, #20]
      break;
 8003e3a:	e005      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e3e:	617b      	str	r3, [r7, #20]
      break;
 8003e40:	e002      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	617b      	str	r3, [r7, #20]
      break;
 8003e46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e48:	4b13      	ldr	r3, [pc, #76]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	3301      	adds	r3, #1
 8003e54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e56:	4b10      	ldr	r3, [pc, #64]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	fb03 f202 	mul.w	r2, r3, r2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003e98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	0e5b      	lsrs	r3, r3, #25
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	3301      	adds	r3, #1
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e88:	69bb      	ldr	r3, [r7, #24]
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3724      	adds	r7, #36	@ 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	080081b0 	.word	0x080081b0
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	@ (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000000 	.word	0x20000000

08003ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ec4:	f7ff fff0 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b06      	ldr	r3, [pc, #24]	@ (8003ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4904      	ldr	r1, [pc, #16]	@ (8003ee8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	f003 031f 	and.w	r3, r3, #31
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	080081a8 	.word	0x080081a8

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ef0:	f7ff ffda 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0adb      	lsrs	r3, r3, #11
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4904      	ldr	r1, [pc, #16]	@ (8003f14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40021000 	.word	0x40021000
 8003f14:	080081a8 	.word	0x080081a8

08003f18 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f20:	2300      	movs	r3, #0
 8003f22:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f24:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003f30:	f7ff f9ee 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8003f34:	6178      	str	r0, [r7, #20]
 8003f36:	e014      	b.n	8003f62 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f38:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3c:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f44:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f50:	f7ff f9de 	bl	8003310 <HAL_PWREx_GetVoltageRange>
 8003f54:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f56:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f68:	d10b      	bne.n	8003f82 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b80      	cmp	r3, #128	@ 0x80
 8003f6e:	d919      	bls.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f74:	d902      	bls.n	8003f7c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f76:	2302      	movs	r3, #2
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	e013      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	e010      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b80      	cmp	r3, #128	@ 0x80
 8003f86:	d902      	bls.n	8003f8e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f88:	2303      	movs	r3, #3
 8003f8a:	613b      	str	r3, [r7, #16]
 8003f8c:	e00a      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b80      	cmp	r3, #128	@ 0x80
 8003f92:	d102      	bne.n	8003f9a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f94:	2302      	movs	r3, #2
 8003f96:	613b      	str	r3, [r7, #16]
 8003f98:	e004      	b.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b70      	cmp	r3, #112	@ 0x70
 8003f9e:	d101      	bne.n	8003fa4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 0207 	bic.w	r2, r3, #7
 8003fac:	4909      	ldr	r1, [pc, #36]	@ (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003fb4:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40022000 	.word	0x40022000

08003fd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d041      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ff8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ffc:	d02a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ffe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004002:	d824      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004004:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800400a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800400e:	d81e      	bhi.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004018:	d010      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800401a:	e018      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800401c:	4b86      	ldr	r3, [pc, #536]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4a85      	ldr	r2, [pc, #532]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004026:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004028:	e015      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3304      	adds	r3, #4
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fabb 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800403a:	e00c      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3320      	adds	r3, #32
 8004040:	2100      	movs	r1, #0
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fba6 	bl	8004794 <RCCEx_PLLSAI2_Config>
 8004048:	4603      	mov	r3, r0
 800404a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800404c:	e003      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	74fb      	strb	r3, [r7, #19]
      break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004054:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004056:	7cfb      	ldrb	r3, [r7, #19]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800405c:	4b76      	ldr	r3, [pc, #472]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004062:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800406a:	4973      	ldr	r1, [pc, #460]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	4313      	orrs	r3, r2
 800406e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004072:	e001      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d041      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800408c:	d02a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800408e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004092:	d824      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004098:	d008      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800409a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800409e:	d81e      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80040a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040a8:	d010      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80040aa:	e018      	b.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040ac:	4b62      	ldr	r3, [pc, #392]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a61      	ldr	r2, [pc, #388]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b8:	e015      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	2100      	movs	r1, #0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fa73 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80040c6:	4603      	mov	r3, r0
 80040c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ca:	e00c      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3320      	adds	r3, #32
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fb5e 	bl	8004794 <RCCEx_PLLSAI2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	74fb      	strb	r3, [r7, #19]
      break;
 80040e2:	e000      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80040e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ec:	4b52      	ldr	r3, [pc, #328]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80040fa:	494f      	ldr	r1, [pc, #316]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004102:	e001      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004104:	7cfb      	ldrb	r3, [r7, #19]
 8004106:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80a0 	beq.w	8004256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004116:	2300      	movs	r3, #0
 8004118:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800412a:	2300      	movs	r3, #0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00d      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004130:	4b41      	ldr	r3, [pc, #260]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004134:	4a40      	ldr	r2, [pc, #256]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800413a:	6593      	str	r3, [r2, #88]	@ 0x58
 800413c:	4b3e      	ldr	r3, [pc, #248]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004148:	2301      	movs	r3, #1
 800414a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800414c:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a3a      	ldr	r2, [pc, #232]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004158:	f7fd fbe0 	bl	800191c <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800415e:	e009      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004160:	f7fd fbdc 	bl	800191c <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d902      	bls.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	74fb      	strb	r3, [r7, #19]
        break;
 8004172:	e005      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004174:	4b31      	ldr	r3, [pc, #196]	@ (800423c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0ef      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004180:	7cfb      	ldrb	r3, [r7, #19]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d15c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004186:	4b2c      	ldr	r3, [pc, #176]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004190:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d019      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041a4:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041b0:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a20      	ldr	r2, [pc, #128]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041d0:	4a19      	ldr	r2, [pc, #100]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d016      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e2:	f7fd fb9b 	bl	800191c <HAL_GetTick>
 80041e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e8:	e00b      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fd fb97 	bl	800191c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d902      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d0ec      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10c      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004216:	4b08      	ldr	r3, [pc, #32]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004226:	4904      	ldr	r1, [pc, #16]	@ (8004238 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004228:	4313      	orrs	r3, r2
 800422a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800422e:	e009      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
 8004234:	e006      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004244:	7c7b      	ldrb	r3, [r7, #17]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424a:	4b9e      	ldr	r3, [pc, #632]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800424e:	4a9d      	ldr	r2, [pc, #628]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004262:	4b98      	ldr	r3, [pc, #608]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	4994      	ldr	r1, [pc, #592]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004284:	4b8f      	ldr	r3, [pc, #572]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800428a:	f023 020c 	bic.w	r2, r3, #12
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004292:	498c      	ldr	r1, [pc, #560]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042a6:	4b87      	ldr	r3, [pc, #540]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	4983      	ldr	r1, [pc, #524]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00a      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042c8:	4b7e      	ldr	r3, [pc, #504]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	497b      	ldr	r1, [pc, #492]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042ea:	4b76      	ldr	r3, [pc, #472]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042f8:	4972      	ldr	r1, [pc, #456]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800430c:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004312:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	496a      	ldr	r1, [pc, #424]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433c:	4961      	ldr	r1, [pc, #388]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004350:	4b5c      	ldr	r3, [pc, #368]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435e:	4959      	ldr	r1, [pc, #356]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004360:	4313      	orrs	r3, r2
 8004362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004372:	4b54      	ldr	r3, [pc, #336]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004378:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004380:	4950      	ldr	r1, [pc, #320]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004394:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800439a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a2:	4948      	ldr	r1, [pc, #288]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043b6:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c4:	493f      	ldr	r1, [pc, #252]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d028      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d8:	4b3a      	ldr	r3, [pc, #232]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e6:	4937      	ldr	r1, [pc, #220]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043f6:	d106      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f8:	4b32      	ldr	r3, [pc, #200]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a31      	ldr	r2, [pc, #196]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004402:	60d3      	str	r3, [r2, #12]
 8004404:	e011      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800440a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800440e:	d10c      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3304      	adds	r3, #4
 8004414:	2101      	movs	r1, #1
 8004416:	4618      	mov	r0, r3
 8004418:	f000 f8c8 	bl	80045ac <RCCEx_PLLSAI1_Config>
 800441c:	4603      	mov	r3, r0
 800441e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004420:	7cfb      	ldrb	r3, [r7, #19]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004436:	4b23      	ldr	r3, [pc, #140]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004444:	491f      	ldr	r1, [pc, #124]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004450:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004454:	d106      	bne.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004456:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	4a1a      	ldr	r2, [pc, #104]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004460:	60d3      	str	r3, [r2, #12]
 8004462:	e011      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800446c:	d10c      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3304      	adds	r3, #4
 8004472:	2101      	movs	r1, #1
 8004474:	4618      	mov	r0, r3
 8004476:	f000 f899 	bl	80045ac <RCCEx_PLLSAI1_Config>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004484:	7cfb      	ldrb	r3, [r7, #19]
 8004486:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02b      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800449a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a2:	4908      	ldr	r1, [pc, #32]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044b2:	d109      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b4:	4b03      	ldr	r3, [pc, #12]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a02      	ldr	r2, [pc, #8]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044be:	60d3      	str	r3, [r2, #12]
 80044c0:	e014      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f867 	bl	80045ac <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02f      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f8:	4b2b      	ldr	r3, [pc, #172]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004506:	4928      	ldr	r1, [pc, #160]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 f844 	bl	80045ac <RCCEx_PLLSAI1_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004528:	7cfb      	ldrb	r3, [r7, #19]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d014      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800452e:	7cfb      	ldrb	r3, [r7, #19]
 8004530:	74bb      	strb	r3, [r7, #18]
 8004532:	e011      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3320      	adds	r3, #32
 8004542:	2102      	movs	r1, #2
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f925 	bl	8004794 <RCCEx_PLLSAI2_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004564:	4b10      	ldr	r3, [pc, #64]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004572:	490d      	ldr	r1, [pc, #52]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004586:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800458c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004596:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004598:	4313      	orrs	r3, r2
 800459a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800459e:	7cbb      	ldrb	r3, [r7, #18]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}
 80045a8:	40021000 	.word	0x40021000

080045ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ba:	4b75      	ldr	r3, [pc, #468]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d018      	beq.n	80045f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80045c6:	4b72      	ldr	r3, [pc, #456]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f003 0203 	and.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d10d      	bne.n	80045f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
       ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80045de:	4b6c      	ldr	r3, [pc, #432]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	091b      	lsrs	r3, r3, #4
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
       ||
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d047      	beq.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
 80045f6:	e044      	b.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d018      	beq.n	8004632 <RCCEx_PLLSAI1_Config+0x86>
 8004600:	2b03      	cmp	r3, #3
 8004602:	d825      	bhi.n	8004650 <RCCEx_PLLSAI1_Config+0xa4>
 8004604:	2b01      	cmp	r3, #1
 8004606:	d002      	beq.n	800460e <RCCEx_PLLSAI1_Config+0x62>
 8004608:	2b02      	cmp	r3, #2
 800460a:	d009      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x74>
 800460c:	e020      	b.n	8004650 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800460e:	4b60      	ldr	r3, [pc, #384]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d11d      	bne.n	8004656 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461e:	e01a      	b.n	8004656 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004620:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004630:	e013      	b.n	800465a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004632:	4b57      	ldr	r3, [pc, #348]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10f      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800463e:	4b54      	ldr	r3, [pc, #336]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800464e:	e006      	b.n	800465e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e004      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004656:	bf00      	nop
 8004658:	e002      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800465a:	bf00      	nop
 800465c:	e000      	b.n	8004660 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800465e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004660:	7bfb      	ldrb	r3, [r7, #15]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10d      	bne.n	8004682 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004666:	4b4a      	ldr	r3, [pc, #296]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	3b01      	subs	r3, #1
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	430b      	orrs	r3, r1
 800467c:	4944      	ldr	r1, [pc, #272]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d17d      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004688:	4b41      	ldr	r3, [pc, #260]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a40      	ldr	r2, [pc, #256]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004694:	f7fd f942 	bl	800191c <HAL_GetTick>
 8004698:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800469a:	e009      	b.n	80046b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800469c:	f7fd f93e 	bl	800191c <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d902      	bls.n	80046b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	73fb      	strb	r3, [r7, #15]
        break;
 80046ae:	e005      	b.n	80046bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046b0:	4b37      	ldr	r3, [pc, #220]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ef      	bne.n	800469c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d160      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d111      	bne.n	80046ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c8:	4b31      	ldr	r3, [pc, #196]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80046d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6892      	ldr	r2, [r2, #8]
 80046d8:	0211      	lsls	r1, r2, #8
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68d2      	ldr	r2, [r2, #12]
 80046de:	0912      	lsrs	r2, r2, #4
 80046e0:	0452      	lsls	r2, r2, #17
 80046e2:	430a      	orrs	r2, r1
 80046e4:	492a      	ldr	r1, [pc, #168]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	610b      	str	r3, [r1, #16]
 80046ea:	e027      	b.n	800473c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d112      	bne.n	8004718 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046f2:	4b27      	ldr	r3, [pc, #156]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80046fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6892      	ldr	r2, [r2, #8]
 8004702:	0211      	lsls	r1, r2, #8
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6912      	ldr	r2, [r2, #16]
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0552      	lsls	r2, r2, #21
 800470e:	430a      	orrs	r2, r1
 8004710:	491f      	ldr	r1, [pc, #124]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004712:	4313      	orrs	r3, r2
 8004714:	610b      	str	r3, [r1, #16]
 8004716:	e011      	b.n	800473c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004720:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6892      	ldr	r2, [r2, #8]
 8004728:	0211      	lsls	r1, r2, #8
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6952      	ldr	r2, [r2, #20]
 800472e:	0852      	lsrs	r2, r2, #1
 8004730:	3a01      	subs	r2, #1
 8004732:	0652      	lsls	r2, r2, #25
 8004734:	430a      	orrs	r2, r1
 8004736:	4916      	ldr	r1, [pc, #88]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800473c:	4b14      	ldr	r3, [pc, #80]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd f8e8 	bl	800191c <HAL_GetTick>
 800474c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800474e:	e009      	b.n	8004764 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004750:	f7fd f8e4 	bl	800191c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d902      	bls.n	8004764 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	73fb      	strb	r3, [r7, #15]
          break;
 8004762:	e005      	b.n	8004770 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004764:	4b0a      	ldr	r3, [pc, #40]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0ef      	beq.n	8004750 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004776:	4b06      	ldr	r3, [pc, #24]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4904      	ldr	r1, [pc, #16]	@ (8004790 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	4313      	orrs	r3, r2
 8004782:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004784:	7bfb      	ldrb	r3, [r7, #15]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40021000 	.word	0x40021000

08004794 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047a2:	4b6a      	ldr	r3, [pc, #424]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d018      	beq.n	80047e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047ae:	4b67      	ldr	r3, [pc, #412]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0203 	and.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d10d      	bne.n	80047da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
       ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80047c6:	4b61      	ldr	r3, [pc, #388]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
       ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d047      	beq.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e044      	b.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d018      	beq.n	800481a <RCCEx_PLLSAI2_Config+0x86>
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d825      	bhi.n	8004838 <RCCEx_PLLSAI2_Config+0xa4>
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d002      	beq.n	80047f6 <RCCEx_PLLSAI2_Config+0x62>
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d009      	beq.n	8004808 <RCCEx_PLLSAI2_Config+0x74>
 80047f4:	e020      	b.n	8004838 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80047f6:	4b55      	ldr	r3, [pc, #340]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d11d      	bne.n	800483e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004806:	e01a      	b.n	800483e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004808:	4b50      	ldr	r3, [pc, #320]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004810:	2b00      	cmp	r3, #0
 8004812:	d116      	bne.n	8004842 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004818:	e013      	b.n	8004842 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800481a:	4b4c      	ldr	r3, [pc, #304]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004826:	4b49      	ldr	r3, [pc, #292]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004836:	e006      	b.n	8004846 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      break;
 800483c:	e004      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800483e:	bf00      	nop
 8004840:	e002      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004846:	bf00      	nop
    }

    if(status == HAL_OK)
 8004848:	7bfb      	ldrb	r3, [r7, #15]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d10d      	bne.n	800486a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800484e:	4b3f      	ldr	r3, [pc, #252]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6819      	ldr	r1, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	430b      	orrs	r3, r1
 8004864:	4939      	ldr	r1, [pc, #228]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004866:	4313      	orrs	r3, r2
 8004868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800486a:	7bfb      	ldrb	r3, [r7, #15]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d167      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004870:	4b36      	ldr	r3, [pc, #216]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a35      	ldr	r2, [pc, #212]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004876:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800487a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487c:	f7fd f84e 	bl	800191c <HAL_GetTick>
 8004880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004882:	e009      	b.n	8004898 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004884:	f7fd f84a 	bl	800191c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d902      	bls.n	8004898 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	73fb      	strb	r3, [r7, #15]
        break;
 8004896:	e005      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004898:	4b2c      	ldr	r3, [pc, #176]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1ef      	bne.n	8004884 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d14a      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d111      	bne.n	80048d4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048b0:	4b26      	ldr	r3, [pc, #152]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80048b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6892      	ldr	r2, [r2, #8]
 80048c0:	0211      	lsls	r1, r2, #8
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	68d2      	ldr	r2, [r2, #12]
 80048c6:	0912      	lsrs	r2, r2, #4
 80048c8:	0452      	lsls	r2, r2, #17
 80048ca:	430a      	orrs	r2, r1
 80048cc:	491f      	ldr	r1, [pc, #124]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	614b      	str	r3, [r1, #20]
 80048d2:	e011      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80048dc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
 80048e4:	0211      	lsls	r1, r2, #8
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6912      	ldr	r2, [r2, #16]
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4916      	ldr	r1, [pc, #88]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a13      	ldr	r2, [pc, #76]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004902:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004904:	f7fd f80a 	bl	800191c <HAL_GetTick>
 8004908:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800490a:	e009      	b.n	8004920 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800490c:	f7fd f806 	bl	800191c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d902      	bls.n	8004920 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	73fb      	strb	r3, [r7, #15]
          break;
 800491e:	e005      	b.n	800492c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004920:	4b0a      	ldr	r3, [pc, #40]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0ef      	beq.n	800490c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800492c:	7bfb      	ldrb	r3, [r7, #15]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004932:	4b06      	ldr	r3, [pc, #24]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004934:	695a      	ldr	r2, [r3, #20]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	4904      	ldr	r1, [pc, #16]	@ (800494c <RCCEx_PLLSAI2_Config+0x1b8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40021000 	.word	0x40021000

08004950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e040      	b.n	80049e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fc fedc 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2224      	movs	r2, #36	@ 0x24
 800497c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fb6a 	bl	8005070 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8af 	bl	8004b00 <UART_SetConfig>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e01b      	b.n	80049e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fbe9 	bl	80051b4 <UART_CheckIdleState>
 80049e2:	4603      	mov	r3, r0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	@ 0x28
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d177      	bne.n	8004af4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <HAL_UART_Transmit+0x24>
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e070      	b.n	8004af6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2221      	movs	r2, #33	@ 0x21
 8004a20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a22:	f7fc ff7b 	bl	800191c <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	d108      	bne.n	8004a54 <HAL_UART_Transmit+0x68>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e003      	b.n	8004a5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a5c:	e02f      	b.n	8004abe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	@ 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fc4b 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d004      	beq.n	8004a7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e03b      	b.n	8004af6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10b      	bne.n	8004a9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	881a      	ldrh	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a90:	b292      	uxth	r2, r2
 8004a92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	3302      	adds	r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]
 8004a9a:	e007      	b.n	8004aac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1c9      	bne.n	8004a5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2140      	movs	r1, #64	@ 0x40
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 fc15 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d004      	beq.n	8004aea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2220      	movs	r2, #32
 8004ae4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e005      	b.n	8004af6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b08a      	sub	sp, #40	@ 0x28
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4ba4      	ldr	r3, [pc, #656]	@ (8004dc0 <UART_SetConfig+0x2c0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a99      	ldr	r2, [pc, #612]	@ (8004dc4 <UART_SetConfig+0x2c4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a90      	ldr	r2, [pc, #576]	@ (8004dc8 <UART_SetConfig+0x2c8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d126      	bne.n	8004bd8 <UART_SetConfig+0xd8>
 8004b8a:	4b90      	ldr	r3, [pc, #576]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d81b      	bhi.n	8004bd0 <UART_SetConfig+0xd0>
 8004b98:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba0 <UART_SetConfig+0xa0>)
 8004b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9e:	bf00      	nop
 8004ba0:	08004bb1 	.word	0x08004bb1
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc9 	.word	0x08004bc9
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bb6:	e116      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bbe:	e112      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bc6:	e10e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bce:	e10a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd6:	e106      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8004dd0 <UART_SetConfig+0x2d0>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d138      	bne.n	8004c54 <UART_SetConfig+0x154>
 8004be2:	4b7a      	ldr	r3, [pc, #488]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004be8:	f003 030c 	and.w	r3, r3, #12
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d82d      	bhi.n	8004c4c <UART_SetConfig+0x14c>
 8004bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf8 <UART_SetConfig+0xf8>)
 8004bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf6:	bf00      	nop
 8004bf8:	08004c2d 	.word	0x08004c2d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c4d 	.word	0x08004c4d
 8004c04:	08004c4d 	.word	0x08004c4d
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c4d 	.word	0x08004c4d
 8004c10:	08004c4d 	.word	0x08004c4d
 8004c14:	08004c4d 	.word	0x08004c4d
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	08004c4d 	.word	0x08004c4d
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c32:	e0d8      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c34:	2302      	movs	r3, #2
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c3a:	e0d4      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c42:	e0d0      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c44:	2308      	movs	r3, #8
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c4a:	e0cc      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c4c:	2310      	movs	r3, #16
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c52:	e0c8      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a5e      	ldr	r2, [pc, #376]	@ (8004dd4 <UART_SetConfig+0x2d4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d125      	bne.n	8004caa <UART_SetConfig+0x1aa>
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c68:	2b30      	cmp	r3, #48	@ 0x30
 8004c6a:	d016      	beq.n	8004c9a <UART_SetConfig+0x19a>
 8004c6c:	2b30      	cmp	r3, #48	@ 0x30
 8004c6e:	d818      	bhi.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d00a      	beq.n	8004c8a <UART_SetConfig+0x18a>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d814      	bhi.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <UART_SetConfig+0x182>
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d008      	beq.n	8004c92 <UART_SetConfig+0x192>
 8004c80:	e00f      	b.n	8004ca2 <UART_SetConfig+0x1a2>
 8004c82:	2300      	movs	r3, #0
 8004c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c88:	e0ad      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c90:	e0a9      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c92:	2304      	movs	r3, #4
 8004c94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c98:	e0a5      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca0:	e0a1      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ca2:	2310      	movs	r3, #16
 8004ca4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ca8:	e09d      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a4a      	ldr	r2, [pc, #296]	@ (8004dd8 <UART_SetConfig+0x2d8>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d125      	bne.n	8004d00 <UART_SetConfig+0x200>
 8004cb4:	4b45      	ldr	r3, [pc, #276]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cc0:	d016      	beq.n	8004cf0 <UART_SetConfig+0x1f0>
 8004cc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004cc4:	d818      	bhi.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cc6:	2b80      	cmp	r3, #128	@ 0x80
 8004cc8:	d00a      	beq.n	8004ce0 <UART_SetConfig+0x1e0>
 8004cca:	2b80      	cmp	r3, #128	@ 0x80
 8004ccc:	d814      	bhi.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <UART_SetConfig+0x1d8>
 8004cd2:	2b40      	cmp	r3, #64	@ 0x40
 8004cd4:	d008      	beq.n	8004ce8 <UART_SetConfig+0x1e8>
 8004cd6:	e00f      	b.n	8004cf8 <UART_SetConfig+0x1f8>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cde:	e082      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce6:	e07e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004ce8:	2304      	movs	r3, #4
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cee:	e07a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004cf0:	2308      	movs	r3, #8
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf6:	e076      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfe:	e072      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	@ (8004ddc <UART_SetConfig+0x2dc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d12a      	bne.n	8004d60 <UART_SetConfig+0x260>
 8004d0a:	4b30      	ldr	r3, [pc, #192]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d18:	d01a      	beq.n	8004d50 <UART_SetConfig+0x250>
 8004d1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d1e:	d81b      	bhi.n	8004d58 <UART_SetConfig+0x258>
 8004d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d24:	d00c      	beq.n	8004d40 <UART_SetConfig+0x240>
 8004d26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d2a:	d815      	bhi.n	8004d58 <UART_SetConfig+0x258>
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <UART_SetConfig+0x238>
 8004d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d34:	d008      	beq.n	8004d48 <UART_SetConfig+0x248>
 8004d36:	e00f      	b.n	8004d58 <UART_SetConfig+0x258>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d3e:	e052      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d40:	2302      	movs	r3, #2
 8004d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d46:	e04e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d4e:	e04a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d56:	e046      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5e:	e042      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a17      	ldr	r2, [pc, #92]	@ (8004dc4 <UART_SetConfig+0x2c4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d13a      	bne.n	8004de0 <UART_SetConfig+0x2e0>
 8004d6a:	4b18      	ldr	r3, [pc, #96]	@ (8004dcc <UART_SetConfig+0x2cc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004d74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d78:	d01a      	beq.n	8004db0 <UART_SetConfig+0x2b0>
 8004d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004d7e:	d81b      	bhi.n	8004db8 <UART_SetConfig+0x2b8>
 8004d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d84:	d00c      	beq.n	8004da0 <UART_SetConfig+0x2a0>
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d8a:	d815      	bhi.n	8004db8 <UART_SetConfig+0x2b8>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <UART_SetConfig+0x298>
 8004d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d94:	d008      	beq.n	8004da8 <UART_SetConfig+0x2a8>
 8004d96:	e00f      	b.n	8004db8 <UART_SetConfig+0x2b8>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d9e:	e022      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004da0:	2302      	movs	r3, #2
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004da6:	e01e      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dae:	e01a      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004db6:	e016      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dbe:	e012      	b.n	8004de6 <UART_SetConfig+0x2e6>
 8004dc0:	efff69f3 	.word	0xefff69f3
 8004dc4:	40008000 	.word	0x40008000
 8004dc8:	40013800 	.word	0x40013800
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	40004400 	.word	0x40004400
 8004dd4:	40004800 	.word	0x40004800
 8004dd8:	40004c00 	.word	0x40004c00
 8004ddc:	40005000 	.word	0x40005000
 8004de0:	2310      	movs	r3, #16
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a9f      	ldr	r2, [pc, #636]	@ (8005068 <UART_SetConfig+0x568>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d17a      	bne.n	8004ee6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d824      	bhi.n	8004e42 <UART_SetConfig+0x342>
 8004df8:	a201      	add	r2, pc, #4	@ (adr r2, 8004e00 <UART_SetConfig+0x300>)
 8004dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfe:	bf00      	nop
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e43 	.word	0x08004e43
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e43 	.word	0x08004e43
 8004e10:	08004e33 	.word	0x08004e33
 8004e14:	08004e43 	.word	0x08004e43
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e43 	.word	0x08004e43
 8004e20:	08004e3b 	.word	0x08004e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7ff f84c 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8004e28:	61f8      	str	r0, [r7, #28]
        break;
 8004e2a:	e010      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e2c:	4b8f      	ldr	r3, [pc, #572]	@ (800506c <UART_SetConfig+0x56c>)
 8004e2e:	61fb      	str	r3, [r7, #28]
        break;
 8004e30:	e00d      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e32:	f7fe ffad 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8004e36:	61f8      	str	r0, [r7, #28]
        break;
 8004e38:	e009      	b.n	8004e4e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3e:	61fb      	str	r3, [r7, #28]
        break;
 8004e40:	e005      	b.n	8004e4e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80fb 	beq.w	800504c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	4413      	add	r3, r2
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d305      	bcc.n	8004e72 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d903      	bls.n	8004e7a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e78:	e0e8      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	461c      	mov	r4, r3
 8004e80:	4615      	mov	r5, r2
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	022b      	lsls	r3, r5, #8
 8004e8c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e90:	0222      	lsls	r2, r4, #8
 8004e92:	68f9      	ldr	r1, [r7, #12]
 8004e94:	6849      	ldr	r1, [r1, #4]
 8004e96:	0849      	lsrs	r1, r1, #1
 8004e98:	2000      	movs	r0, #0
 8004e9a:	4688      	mov	r8, r1
 8004e9c:	4681      	mov	r9, r0
 8004e9e:	eb12 0a08 	adds.w	sl, r2, r8
 8004ea2:	eb43 0b09 	adc.w	fp, r3, r9
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	607a      	str	r2, [r7, #4]
 8004eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eb4:	4650      	mov	r0, sl
 8004eb6:	4659      	mov	r1, fp
 8004eb8:	f7fb fec6 	bl	8000c48 <__aeabi_uldivmod>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eca:	d308      	bcc.n	8004ede <UART_SetConfig+0x3de>
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ed2:	d204      	bcs.n	8004ede <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e0b6      	b.n	800504c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ee4:	e0b2      	b.n	800504c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eee:	d15e      	bne.n	8004fae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004ef0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ef4:	2b08      	cmp	r3, #8
 8004ef6:	d828      	bhi.n	8004f4a <UART_SetConfig+0x44a>
 8004ef8:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <UART_SetConfig+0x400>)
 8004efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efe:	bf00      	nop
 8004f00:	08004f25 	.word	0x08004f25
 8004f04:	08004f2d 	.word	0x08004f2d
 8004f08:	08004f35 	.word	0x08004f35
 8004f0c:	08004f4b 	.word	0x08004f4b
 8004f10:	08004f3b 	.word	0x08004f3b
 8004f14:	08004f4b 	.word	0x08004f4b
 8004f18:	08004f4b 	.word	0x08004f4b
 8004f1c:	08004f4b 	.word	0x08004f4b
 8004f20:	08004f43 	.word	0x08004f43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f24:	f7fe ffcc 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8004f28:	61f8      	str	r0, [r7, #28]
        break;
 8004f2a:	e014      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe ffde 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8004f30:	61f8      	str	r0, [r7, #28]
        break;
 8004f32:	e010      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f34:	4b4d      	ldr	r3, [pc, #308]	@ (800506c <UART_SetConfig+0x56c>)
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e00d      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f3a:	f7fe ff29 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8004f3e:	61f8      	str	r0, [r7, #28]
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f46:	61fb      	str	r3, [r7, #28]
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d077      	beq.n	800504c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	005a      	lsls	r2, r3, #1
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	085b      	lsrs	r3, r3, #1
 8004f66:	441a      	add	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b0f      	cmp	r3, #15
 8004f76:	d916      	bls.n	8004fa6 <UART_SetConfig+0x4a6>
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7e:	d212      	bcs.n	8004fa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	f023 030f 	bic.w	r3, r3, #15
 8004f88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	f003 0307 	and.w	r3, r3, #7
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	8afb      	ldrh	r3, [r7, #22]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	8afa      	ldrh	r2, [r7, #22]
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	e052      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fac:	e04e      	b.n	800504c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d827      	bhi.n	8005006 <UART_SetConfig+0x506>
 8004fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fbc <UART_SetConfig+0x4bc>)
 8004fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbc:	08004fe1 	.word	0x08004fe1
 8004fc0:	08004fe9 	.word	0x08004fe9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08005007 	.word	0x08005007
 8004fcc:	08004ff7 	.word	0x08004ff7
 8004fd0:	08005007 	.word	0x08005007
 8004fd4:	08005007 	.word	0x08005007
 8004fd8:	08005007 	.word	0x08005007
 8004fdc:	08004fff 	.word	0x08004fff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fe0:	f7fe ff6e 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 8004fe4:	61f8      	str	r0, [r7, #28]
        break;
 8004fe6:	e014      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe8:	f7fe ff80 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8004fec:	61f8      	str	r0, [r7, #28]
        break;
 8004fee:	e010      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800506c <UART_SetConfig+0x56c>)
 8004ff2:	61fb      	str	r3, [r7, #28]
        break;
 8004ff4:	e00d      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff6:	f7fe fecb 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8004ffa:	61f8      	str	r0, [r7, #28]
        break;
 8004ffc:	e009      	b.n	8005012 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005002:	61fb      	str	r3, [r7, #28]
        break;
 8005004:	e005      	b.n	8005012 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005010:	bf00      	nop
    }

    if (pclk != 0U)
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085a      	lsrs	r2, r3, #1
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	441a      	add	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	fbb2 f3f3 	udiv	r3, r2, r3
 800502a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d909      	bls.n	8005046 <UART_SetConfig+0x546>
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005038:	d205      	bcs.n	8005046 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e002      	b.n	800504c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005058:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800505c:	4618      	mov	r0, r3
 800505e:	3728      	adds	r7, #40	@ 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005066:	bf00      	nop
 8005068:	40008000 	.word	0x40008000
 800506c:	00f42400 	.word	0x00f42400

08005070 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	f003 0308 	and.w	r3, r3, #8
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00a      	beq.n	8005122 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01a      	beq.n	8005186 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800516e:	d10a      	bne.n	8005186 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b098      	sub	sp, #96	@ 0x60
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051c4:	f7fc fbaa 	bl	800191c <HAL_GetTick>
 80051c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d12e      	bne.n	8005236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e0:	2200      	movs	r2, #0
 80051e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f88c 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d021      	beq.n	8005236 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005202:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005206:	653b      	str	r3, [r7, #80]	@ 0x50
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005210:	647b      	str	r3, [r7, #68]	@ 0x44
 8005212:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005216:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800521e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e6      	bne.n	80051f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e062      	b.n	80052fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d149      	bne.n	80052d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005244:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f856 	bl	8005304 <UART_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d03c      	beq.n	80052d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	623b      	str	r3, [r7, #32]
   return(result);
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800527c:	633b      	str	r3, [r7, #48]	@ 0x30
 800527e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800528a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e6      	bne.n	800525e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	60fb      	str	r3, [r7, #12]
   return(result);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3308      	adds	r3, #8
 80052ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052b0:	61fa      	str	r2, [r7, #28]
 80052b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69b9      	ldr	r1, [r7, #24]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	617b      	str	r3, [r7, #20]
   return(result);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e011      	b.n	80052fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3758      	adds	r7, #88	@ 0x58
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005314:	e04f      	b.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531c:	d04b      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531e:	f7fc fafd 	bl	800191c <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	429a      	cmp	r2, r3
 800532c:	d302      	bcc.n	8005334 <UART_WaitOnFlagUntilTimeout+0x30>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e04e      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b00      	cmp	r3, #0
 8005344:	d037      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b80      	cmp	r3, #128	@ 0x80
 800534a:	d034      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b40      	cmp	r3, #64	@ 0x40
 8005350:	d031      	beq.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0308 	and.w	r3, r3, #8
 800535c:	2b08      	cmp	r3, #8
 800535e:	d110      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2208      	movs	r2, #8
 8005366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f838 	bl	80053de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2208      	movs	r2, #8
 8005372:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e029      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005390:	d111      	bne.n	80053b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f81e 	bl	80053de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e00f      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	4013      	ands	r3, r2
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	bf0c      	ite	eq
 80053c6:	2301      	moveq	r3, #1
 80053c8:	2300      	movne	r3, #0
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	461a      	mov	r2, r3
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d0a0      	beq.n	8005316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053de:	b480      	push	{r7}
 80053e0:	b095      	sub	sp, #84	@ 0x54
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ee:	e853 3f00 	ldrex	r3, [r3]
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	461a      	mov	r2, r3
 8005402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005404:	643b      	str	r3, [r7, #64]	@ 0x40
 8005406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800540a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e6      	bne.n	80053e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	e853 3f00 	ldrex	r3, [r3]
 8005426:	61fb      	str	r3, [r7, #28]
   return(result);
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	3308      	adds	r3, #8
 8005436:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005438:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800543a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e5      	bne.n	8005418 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005450:	2b01      	cmp	r3, #1
 8005452:	d118      	bne.n	8005486 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	e853 3f00 	ldrex	r3, [r3]
 8005460:	60bb      	str	r3, [r7, #8]
   return(result);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0310 	bic.w	r3, r3, #16
 8005468:	647b      	str	r3, [r7, #68]	@ 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	461a      	mov	r2, r3
 8005470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e6      	bne.n	8005454 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800549a:	bf00      	nop
 800549c:	3754      	adds	r7, #84	@ 0x54
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <__cvt>:
 80054a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054aa:	ec57 6b10 	vmov	r6, r7, d0
 80054ae:	2f00      	cmp	r7, #0
 80054b0:	460c      	mov	r4, r1
 80054b2:	4619      	mov	r1, r3
 80054b4:	463b      	mov	r3, r7
 80054b6:	bfbb      	ittet	lt
 80054b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80054bc:	461f      	movlt	r7, r3
 80054be:	2300      	movge	r3, #0
 80054c0:	232d      	movlt	r3, #45	@ 0x2d
 80054c2:	700b      	strb	r3, [r1, #0]
 80054c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80054c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80054ca:	4691      	mov	r9, r2
 80054cc:	f023 0820 	bic.w	r8, r3, #32
 80054d0:	bfbc      	itt	lt
 80054d2:	4632      	movlt	r2, r6
 80054d4:	4616      	movlt	r6, r2
 80054d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054da:	d005      	beq.n	80054e8 <__cvt+0x42>
 80054dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80054e0:	d100      	bne.n	80054e4 <__cvt+0x3e>
 80054e2:	3401      	adds	r4, #1
 80054e4:	2102      	movs	r1, #2
 80054e6:	e000      	b.n	80054ea <__cvt+0x44>
 80054e8:	2103      	movs	r1, #3
 80054ea:	ab03      	add	r3, sp, #12
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	ab02      	add	r3, sp, #8
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	ec47 6b10 	vmov	d0, r6, r7
 80054f6:	4653      	mov	r3, sl
 80054f8:	4622      	mov	r2, r4
 80054fa:	f000 fe6d 	bl	80061d8 <_dtoa_r>
 80054fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005502:	4605      	mov	r5, r0
 8005504:	d119      	bne.n	800553a <__cvt+0x94>
 8005506:	f019 0f01 	tst.w	r9, #1
 800550a:	d00e      	beq.n	800552a <__cvt+0x84>
 800550c:	eb00 0904 	add.w	r9, r0, r4
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	4630      	mov	r0, r6
 8005516:	4639      	mov	r1, r7
 8005518:	f7fb fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800551c:	b108      	cbz	r0, 8005522 <__cvt+0x7c>
 800551e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005522:	2230      	movs	r2, #48	@ 0x30
 8005524:	9b03      	ldr	r3, [sp, #12]
 8005526:	454b      	cmp	r3, r9
 8005528:	d31e      	bcc.n	8005568 <__cvt+0xc2>
 800552a:	9b03      	ldr	r3, [sp, #12]
 800552c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800552e:	1b5b      	subs	r3, r3, r5
 8005530:	4628      	mov	r0, r5
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	b004      	add	sp, #16
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800553e:	eb00 0904 	add.w	r9, r0, r4
 8005542:	d1e5      	bne.n	8005510 <__cvt+0x6a>
 8005544:	7803      	ldrb	r3, [r0, #0]
 8005546:	2b30      	cmp	r3, #48	@ 0x30
 8005548:	d10a      	bne.n	8005560 <__cvt+0xba>
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	4630      	mov	r0, r6
 8005550:	4639      	mov	r1, r7
 8005552:	f7fb fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005556:	b918      	cbnz	r0, 8005560 <__cvt+0xba>
 8005558:	f1c4 0401 	rsb	r4, r4, #1
 800555c:	f8ca 4000 	str.w	r4, [sl]
 8005560:	f8da 3000 	ldr.w	r3, [sl]
 8005564:	4499      	add	r9, r3
 8005566:	e7d3      	b.n	8005510 <__cvt+0x6a>
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	9103      	str	r1, [sp, #12]
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e7d9      	b.n	8005524 <__cvt+0x7e>

08005570 <__exponent>:
 8005570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005572:	2900      	cmp	r1, #0
 8005574:	bfba      	itte	lt
 8005576:	4249      	neglt	r1, r1
 8005578:	232d      	movlt	r3, #45	@ 0x2d
 800557a:	232b      	movge	r3, #43	@ 0x2b
 800557c:	2909      	cmp	r1, #9
 800557e:	7002      	strb	r2, [r0, #0]
 8005580:	7043      	strb	r3, [r0, #1]
 8005582:	dd29      	ble.n	80055d8 <__exponent+0x68>
 8005584:	f10d 0307 	add.w	r3, sp, #7
 8005588:	461d      	mov	r5, r3
 800558a:	270a      	movs	r7, #10
 800558c:	461a      	mov	r2, r3
 800558e:	fbb1 f6f7 	udiv	r6, r1, r7
 8005592:	fb07 1416 	mls	r4, r7, r6, r1
 8005596:	3430      	adds	r4, #48	@ 0x30
 8005598:	f802 4c01 	strb.w	r4, [r2, #-1]
 800559c:	460c      	mov	r4, r1
 800559e:	2c63      	cmp	r4, #99	@ 0x63
 80055a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80055a4:	4631      	mov	r1, r6
 80055a6:	dcf1      	bgt.n	800558c <__exponent+0x1c>
 80055a8:	3130      	adds	r1, #48	@ 0x30
 80055aa:	1e94      	subs	r4, r2, #2
 80055ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80055b0:	1c41      	adds	r1, r0, #1
 80055b2:	4623      	mov	r3, r4
 80055b4:	42ab      	cmp	r3, r5
 80055b6:	d30a      	bcc.n	80055ce <__exponent+0x5e>
 80055b8:	f10d 0309 	add.w	r3, sp, #9
 80055bc:	1a9b      	subs	r3, r3, r2
 80055be:	42ac      	cmp	r4, r5
 80055c0:	bf88      	it	hi
 80055c2:	2300      	movhi	r3, #0
 80055c4:	3302      	adds	r3, #2
 80055c6:	4403      	add	r3, r0
 80055c8:	1a18      	subs	r0, r3, r0
 80055ca:	b003      	add	sp, #12
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80055d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80055d6:	e7ed      	b.n	80055b4 <__exponent+0x44>
 80055d8:	2330      	movs	r3, #48	@ 0x30
 80055da:	3130      	adds	r1, #48	@ 0x30
 80055dc:	7083      	strb	r3, [r0, #2]
 80055de:	70c1      	strb	r1, [r0, #3]
 80055e0:	1d03      	adds	r3, r0, #4
 80055e2:	e7f1      	b.n	80055c8 <__exponent+0x58>

080055e4 <_printf_float>:
 80055e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e8:	b08d      	sub	sp, #52	@ 0x34
 80055ea:	460c      	mov	r4, r1
 80055ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055f0:	4616      	mov	r6, r2
 80055f2:	461f      	mov	r7, r3
 80055f4:	4605      	mov	r5, r0
 80055f6:	f000 fcef 	bl	8005fd8 <_localeconv_r>
 80055fa:	6803      	ldr	r3, [r0, #0]
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fa fe36 	bl	8000270 <strlen>
 8005604:	2300      	movs	r3, #0
 8005606:	930a      	str	r3, [sp, #40]	@ 0x28
 8005608:	f8d8 3000 	ldr.w	r3, [r8]
 800560c:	9005      	str	r0, [sp, #20]
 800560e:	3307      	adds	r3, #7
 8005610:	f023 0307 	bic.w	r3, r3, #7
 8005614:	f103 0208 	add.w	r2, r3, #8
 8005618:	f894 a018 	ldrb.w	sl, [r4, #24]
 800561c:	f8d4 b000 	ldr.w	fp, [r4]
 8005620:	f8c8 2000 	str.w	r2, [r8]
 8005624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005628:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800562c:	9307      	str	r3, [sp, #28]
 800562e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005632:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005636:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800563a:	4b9c      	ldr	r3, [pc, #624]	@ (80058ac <_printf_float+0x2c8>)
 800563c:	f04f 32ff 	mov.w	r2, #4294967295
 8005640:	f7fb fa74 	bl	8000b2c <__aeabi_dcmpun>
 8005644:	bb70      	cbnz	r0, 80056a4 <_printf_float+0xc0>
 8005646:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800564a:	4b98      	ldr	r3, [pc, #608]	@ (80058ac <_printf_float+0x2c8>)
 800564c:	f04f 32ff 	mov.w	r2, #4294967295
 8005650:	f7fb fa4e 	bl	8000af0 <__aeabi_dcmple>
 8005654:	bb30      	cbnz	r0, 80056a4 <_printf_float+0xc0>
 8005656:	2200      	movs	r2, #0
 8005658:	2300      	movs	r3, #0
 800565a:	4640      	mov	r0, r8
 800565c:	4649      	mov	r1, r9
 800565e:	f7fb fa3d 	bl	8000adc <__aeabi_dcmplt>
 8005662:	b110      	cbz	r0, 800566a <_printf_float+0x86>
 8005664:	232d      	movs	r3, #45	@ 0x2d
 8005666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800566a:	4a91      	ldr	r2, [pc, #580]	@ (80058b0 <_printf_float+0x2cc>)
 800566c:	4b91      	ldr	r3, [pc, #580]	@ (80058b4 <_printf_float+0x2d0>)
 800566e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005672:	bf94      	ite	ls
 8005674:	4690      	movls	r8, r2
 8005676:	4698      	movhi	r8, r3
 8005678:	2303      	movs	r3, #3
 800567a:	6123      	str	r3, [r4, #16]
 800567c:	f02b 0304 	bic.w	r3, fp, #4
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	f04f 0900 	mov.w	r9, #0
 8005686:	9700      	str	r7, [sp, #0]
 8005688:	4633      	mov	r3, r6
 800568a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800568c:	4621      	mov	r1, r4
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f9d2 	bl	8005a38 <_printf_common>
 8005694:	3001      	adds	r0, #1
 8005696:	f040 808d 	bne.w	80057b4 <_printf_float+0x1d0>
 800569a:	f04f 30ff 	mov.w	r0, #4294967295
 800569e:	b00d      	add	sp, #52	@ 0x34
 80056a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a4:	4642      	mov	r2, r8
 80056a6:	464b      	mov	r3, r9
 80056a8:	4640      	mov	r0, r8
 80056aa:	4649      	mov	r1, r9
 80056ac:	f7fb fa3e 	bl	8000b2c <__aeabi_dcmpun>
 80056b0:	b140      	cbz	r0, 80056c4 <_printf_float+0xe0>
 80056b2:	464b      	mov	r3, r9
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfbc      	itt	lt
 80056b8:	232d      	movlt	r3, #45	@ 0x2d
 80056ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80056be:	4a7e      	ldr	r2, [pc, #504]	@ (80058b8 <_printf_float+0x2d4>)
 80056c0:	4b7e      	ldr	r3, [pc, #504]	@ (80058bc <_printf_float+0x2d8>)
 80056c2:	e7d4      	b.n	800566e <_printf_float+0x8a>
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80056ca:	9206      	str	r2, [sp, #24]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	d13b      	bne.n	8005748 <_printf_float+0x164>
 80056d0:	2306      	movs	r3, #6
 80056d2:	6063      	str	r3, [r4, #4]
 80056d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80056d8:	2300      	movs	r3, #0
 80056da:	6022      	str	r2, [r4, #0]
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	ab0a      	add	r3, sp, #40	@ 0x28
 80056e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80056e4:	ab09      	add	r3, sp, #36	@ 0x24
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	6861      	ldr	r1, [r4, #4]
 80056ea:	ec49 8b10 	vmov	d0, r8, r9
 80056ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056f2:	4628      	mov	r0, r5
 80056f4:	f7ff fed7 	bl	80054a6 <__cvt>
 80056f8:	9b06      	ldr	r3, [sp, #24]
 80056fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056fc:	2b47      	cmp	r3, #71	@ 0x47
 80056fe:	4680      	mov	r8, r0
 8005700:	d129      	bne.n	8005756 <_printf_float+0x172>
 8005702:	1cc8      	adds	r0, r1, #3
 8005704:	db02      	blt.n	800570c <_printf_float+0x128>
 8005706:	6863      	ldr	r3, [r4, #4]
 8005708:	4299      	cmp	r1, r3
 800570a:	dd41      	ble.n	8005790 <_printf_float+0x1ac>
 800570c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005710:	fa5f fa8a 	uxtb.w	sl, sl
 8005714:	3901      	subs	r1, #1
 8005716:	4652      	mov	r2, sl
 8005718:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800571c:	9109      	str	r1, [sp, #36]	@ 0x24
 800571e:	f7ff ff27 	bl	8005570 <__exponent>
 8005722:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005724:	1813      	adds	r3, r2, r0
 8005726:	2a01      	cmp	r2, #1
 8005728:	4681      	mov	r9, r0
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	dc02      	bgt.n	8005734 <_printf_float+0x150>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d2      	lsls	r2, r2, #31
 8005732:	d501      	bpl.n	8005738 <_printf_float+0x154>
 8005734:	3301      	adds	r3, #1
 8005736:	6123      	str	r3, [r4, #16]
 8005738:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0a2      	beq.n	8005686 <_printf_float+0xa2>
 8005740:	232d      	movs	r3, #45	@ 0x2d
 8005742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005746:	e79e      	b.n	8005686 <_printf_float+0xa2>
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	2a47      	cmp	r2, #71	@ 0x47
 800574c:	d1c2      	bne.n	80056d4 <_printf_float+0xf0>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1c0      	bne.n	80056d4 <_printf_float+0xf0>
 8005752:	2301      	movs	r3, #1
 8005754:	e7bd      	b.n	80056d2 <_printf_float+0xee>
 8005756:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800575a:	d9db      	bls.n	8005714 <_printf_float+0x130>
 800575c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005760:	d118      	bne.n	8005794 <_printf_float+0x1b0>
 8005762:	2900      	cmp	r1, #0
 8005764:	6863      	ldr	r3, [r4, #4]
 8005766:	dd0b      	ble.n	8005780 <_printf_float+0x19c>
 8005768:	6121      	str	r1, [r4, #16]
 800576a:	b913      	cbnz	r3, 8005772 <_printf_float+0x18e>
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	07d0      	lsls	r0, r2, #31
 8005770:	d502      	bpl.n	8005778 <_printf_float+0x194>
 8005772:	3301      	adds	r3, #1
 8005774:	440b      	add	r3, r1
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	65a1      	str	r1, [r4, #88]	@ 0x58
 800577a:	f04f 0900 	mov.w	r9, #0
 800577e:	e7db      	b.n	8005738 <_printf_float+0x154>
 8005780:	b913      	cbnz	r3, 8005788 <_printf_float+0x1a4>
 8005782:	6822      	ldr	r2, [r4, #0]
 8005784:	07d2      	lsls	r2, r2, #31
 8005786:	d501      	bpl.n	800578c <_printf_float+0x1a8>
 8005788:	3302      	adds	r3, #2
 800578a:	e7f4      	b.n	8005776 <_printf_float+0x192>
 800578c:	2301      	movs	r3, #1
 800578e:	e7f2      	b.n	8005776 <_printf_float+0x192>
 8005790:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005796:	4299      	cmp	r1, r3
 8005798:	db05      	blt.n	80057a6 <_printf_float+0x1c2>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	6121      	str	r1, [r4, #16]
 800579e:	07d8      	lsls	r0, r3, #31
 80057a0:	d5ea      	bpl.n	8005778 <_printf_float+0x194>
 80057a2:	1c4b      	adds	r3, r1, #1
 80057a4:	e7e7      	b.n	8005776 <_printf_float+0x192>
 80057a6:	2900      	cmp	r1, #0
 80057a8:	bfd4      	ite	le
 80057aa:	f1c1 0202 	rsble	r2, r1, #2
 80057ae:	2201      	movgt	r2, #1
 80057b0:	4413      	add	r3, r2
 80057b2:	e7e0      	b.n	8005776 <_printf_float+0x192>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	055a      	lsls	r2, r3, #21
 80057b8:	d407      	bmi.n	80057ca <_printf_float+0x1e6>
 80057ba:	6923      	ldr	r3, [r4, #16]
 80057bc:	4642      	mov	r2, r8
 80057be:	4631      	mov	r1, r6
 80057c0:	4628      	mov	r0, r5
 80057c2:	47b8      	blx	r7
 80057c4:	3001      	adds	r0, #1
 80057c6:	d12b      	bne.n	8005820 <_printf_float+0x23c>
 80057c8:	e767      	b.n	800569a <_printf_float+0xb6>
 80057ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80057ce:	f240 80dd 	bls.w	800598c <_printf_float+0x3a8>
 80057d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057d6:	2200      	movs	r2, #0
 80057d8:	2300      	movs	r3, #0
 80057da:	f7fb f975 	bl	8000ac8 <__aeabi_dcmpeq>
 80057de:	2800      	cmp	r0, #0
 80057e0:	d033      	beq.n	800584a <_printf_float+0x266>
 80057e2:	4a37      	ldr	r2, [pc, #220]	@ (80058c0 <_printf_float+0x2dc>)
 80057e4:	2301      	movs	r3, #1
 80057e6:	4631      	mov	r1, r6
 80057e8:	4628      	mov	r0, r5
 80057ea:	47b8      	blx	r7
 80057ec:	3001      	adds	r0, #1
 80057ee:	f43f af54 	beq.w	800569a <_printf_float+0xb6>
 80057f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057f6:	4543      	cmp	r3, r8
 80057f8:	db02      	blt.n	8005800 <_printf_float+0x21c>
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	07d8      	lsls	r0, r3, #31
 80057fe:	d50f      	bpl.n	8005820 <_printf_float+0x23c>
 8005800:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	f43f af45 	beq.w	800569a <_printf_float+0xb6>
 8005810:	f04f 0900 	mov.w	r9, #0
 8005814:	f108 38ff 	add.w	r8, r8, #4294967295
 8005818:	f104 0a1a 	add.w	sl, r4, #26
 800581c:	45c8      	cmp	r8, r9
 800581e:	dc09      	bgt.n	8005834 <_printf_float+0x250>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	079b      	lsls	r3, r3, #30
 8005824:	f100 8103 	bmi.w	8005a2e <_printf_float+0x44a>
 8005828:	68e0      	ldr	r0, [r4, #12]
 800582a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800582c:	4298      	cmp	r0, r3
 800582e:	bfb8      	it	lt
 8005830:	4618      	movlt	r0, r3
 8005832:	e734      	b.n	800569e <_printf_float+0xba>
 8005834:	2301      	movs	r3, #1
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af2b 	beq.w	800569a <_printf_float+0xb6>
 8005844:	f109 0901 	add.w	r9, r9, #1
 8005848:	e7e8      	b.n	800581c <_printf_float+0x238>
 800584a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800584c:	2b00      	cmp	r3, #0
 800584e:	dc39      	bgt.n	80058c4 <_printf_float+0x2e0>
 8005850:	4a1b      	ldr	r2, [pc, #108]	@ (80058c0 <_printf_float+0x2dc>)
 8005852:	2301      	movs	r3, #1
 8005854:	4631      	mov	r1, r6
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	f43f af1d 	beq.w	800569a <_printf_float+0xb6>
 8005860:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005864:	ea59 0303 	orrs.w	r3, r9, r3
 8005868:	d102      	bne.n	8005870 <_printf_float+0x28c>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	07d9      	lsls	r1, r3, #31
 800586e:	d5d7      	bpl.n	8005820 <_printf_float+0x23c>
 8005870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005874:	4631      	mov	r1, r6
 8005876:	4628      	mov	r0, r5
 8005878:	47b8      	blx	r7
 800587a:	3001      	adds	r0, #1
 800587c:	f43f af0d 	beq.w	800569a <_printf_float+0xb6>
 8005880:	f04f 0a00 	mov.w	sl, #0
 8005884:	f104 0b1a 	add.w	fp, r4, #26
 8005888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588a:	425b      	negs	r3, r3
 800588c:	4553      	cmp	r3, sl
 800588e:	dc01      	bgt.n	8005894 <_printf_float+0x2b0>
 8005890:	464b      	mov	r3, r9
 8005892:	e793      	b.n	80057bc <_printf_float+0x1d8>
 8005894:	2301      	movs	r3, #1
 8005896:	465a      	mov	r2, fp
 8005898:	4631      	mov	r1, r6
 800589a:	4628      	mov	r0, r5
 800589c:	47b8      	blx	r7
 800589e:	3001      	adds	r0, #1
 80058a0:	f43f aefb 	beq.w	800569a <_printf_float+0xb6>
 80058a4:	f10a 0a01 	add.w	sl, sl, #1
 80058a8:	e7ee      	b.n	8005888 <_printf_float+0x2a4>
 80058aa:	bf00      	nop
 80058ac:	7fefffff 	.word	0x7fefffff
 80058b0:	080081e0 	.word	0x080081e0
 80058b4:	080081e4 	.word	0x080081e4
 80058b8:	080081e8 	.word	0x080081e8
 80058bc:	080081ec 	.word	0x080081ec
 80058c0:	080081f0 	.word	0x080081f0
 80058c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80058ca:	4553      	cmp	r3, sl
 80058cc:	bfa8      	it	ge
 80058ce:	4653      	movge	r3, sl
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	4699      	mov	r9, r3
 80058d4:	dc36      	bgt.n	8005944 <_printf_float+0x360>
 80058d6:	f04f 0b00 	mov.w	fp, #0
 80058da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058de:	f104 021a 	add.w	r2, r4, #26
 80058e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80058e4:	9306      	str	r3, [sp, #24]
 80058e6:	eba3 0309 	sub.w	r3, r3, r9
 80058ea:	455b      	cmp	r3, fp
 80058ec:	dc31      	bgt.n	8005952 <_printf_float+0x36e>
 80058ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f0:	459a      	cmp	sl, r3
 80058f2:	dc3a      	bgt.n	800596a <_printf_float+0x386>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	07da      	lsls	r2, r3, #31
 80058f8:	d437      	bmi.n	800596a <_printf_float+0x386>
 80058fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058fc:	ebaa 0903 	sub.w	r9, sl, r3
 8005900:	9b06      	ldr	r3, [sp, #24]
 8005902:	ebaa 0303 	sub.w	r3, sl, r3
 8005906:	4599      	cmp	r9, r3
 8005908:	bfa8      	it	ge
 800590a:	4699      	movge	r9, r3
 800590c:	f1b9 0f00 	cmp.w	r9, #0
 8005910:	dc33      	bgt.n	800597a <_printf_float+0x396>
 8005912:	f04f 0800 	mov.w	r8, #0
 8005916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800591a:	f104 0b1a 	add.w	fp, r4, #26
 800591e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005920:	ebaa 0303 	sub.w	r3, sl, r3
 8005924:	eba3 0309 	sub.w	r3, r3, r9
 8005928:	4543      	cmp	r3, r8
 800592a:	f77f af79 	ble.w	8005820 <_printf_float+0x23c>
 800592e:	2301      	movs	r3, #1
 8005930:	465a      	mov	r2, fp
 8005932:	4631      	mov	r1, r6
 8005934:	4628      	mov	r0, r5
 8005936:	47b8      	blx	r7
 8005938:	3001      	adds	r0, #1
 800593a:	f43f aeae 	beq.w	800569a <_printf_float+0xb6>
 800593e:	f108 0801 	add.w	r8, r8, #1
 8005942:	e7ec      	b.n	800591e <_printf_float+0x33a>
 8005944:	4642      	mov	r2, r8
 8005946:	4631      	mov	r1, r6
 8005948:	4628      	mov	r0, r5
 800594a:	47b8      	blx	r7
 800594c:	3001      	adds	r0, #1
 800594e:	d1c2      	bne.n	80058d6 <_printf_float+0x2f2>
 8005950:	e6a3      	b.n	800569a <_printf_float+0xb6>
 8005952:	2301      	movs	r3, #1
 8005954:	4631      	mov	r1, r6
 8005956:	4628      	mov	r0, r5
 8005958:	9206      	str	r2, [sp, #24]
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f ae9c 	beq.w	800569a <_printf_float+0xb6>
 8005962:	9a06      	ldr	r2, [sp, #24]
 8005964:	f10b 0b01 	add.w	fp, fp, #1
 8005968:	e7bb      	b.n	80058e2 <_printf_float+0x2fe>
 800596a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800596e:	4631      	mov	r1, r6
 8005970:	4628      	mov	r0, r5
 8005972:	47b8      	blx	r7
 8005974:	3001      	adds	r0, #1
 8005976:	d1c0      	bne.n	80058fa <_printf_float+0x316>
 8005978:	e68f      	b.n	800569a <_printf_float+0xb6>
 800597a:	9a06      	ldr	r2, [sp, #24]
 800597c:	464b      	mov	r3, r9
 800597e:	4442      	add	r2, r8
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	d1c3      	bne.n	8005912 <_printf_float+0x32e>
 800598a:	e686      	b.n	800569a <_printf_float+0xb6>
 800598c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005990:	f1ba 0f01 	cmp.w	sl, #1
 8005994:	dc01      	bgt.n	800599a <_printf_float+0x3b6>
 8005996:	07db      	lsls	r3, r3, #31
 8005998:	d536      	bpl.n	8005a08 <_printf_float+0x424>
 800599a:	2301      	movs	r3, #1
 800599c:	4642      	mov	r2, r8
 800599e:	4631      	mov	r1, r6
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	f43f ae78 	beq.w	800569a <_printf_float+0xb6>
 80059aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059ae:	4631      	mov	r1, r6
 80059b0:	4628      	mov	r0, r5
 80059b2:	47b8      	blx	r7
 80059b4:	3001      	adds	r0, #1
 80059b6:	f43f ae70 	beq.w	800569a <_printf_float+0xb6>
 80059ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059be:	2200      	movs	r2, #0
 80059c0:	2300      	movs	r3, #0
 80059c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059c6:	f7fb f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 80059ca:	b9c0      	cbnz	r0, 80059fe <_printf_float+0x41a>
 80059cc:	4653      	mov	r3, sl
 80059ce:	f108 0201 	add.w	r2, r8, #1
 80059d2:	4631      	mov	r1, r6
 80059d4:	4628      	mov	r0, r5
 80059d6:	47b8      	blx	r7
 80059d8:	3001      	adds	r0, #1
 80059da:	d10c      	bne.n	80059f6 <_printf_float+0x412>
 80059dc:	e65d      	b.n	800569a <_printf_float+0xb6>
 80059de:	2301      	movs	r3, #1
 80059e0:	465a      	mov	r2, fp
 80059e2:	4631      	mov	r1, r6
 80059e4:	4628      	mov	r0, r5
 80059e6:	47b8      	blx	r7
 80059e8:	3001      	adds	r0, #1
 80059ea:	f43f ae56 	beq.w	800569a <_printf_float+0xb6>
 80059ee:	f108 0801 	add.w	r8, r8, #1
 80059f2:	45d0      	cmp	r8, sl
 80059f4:	dbf3      	blt.n	80059de <_printf_float+0x3fa>
 80059f6:	464b      	mov	r3, r9
 80059f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059fc:	e6df      	b.n	80057be <_printf_float+0x1da>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	f104 0b1a 	add.w	fp, r4, #26
 8005a06:	e7f4      	b.n	80059f2 <_printf_float+0x40e>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	e7e1      	b.n	80059d2 <_printf_float+0x3ee>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	464a      	mov	r2, r9
 8005a12:	4631      	mov	r1, r6
 8005a14:	4628      	mov	r0, r5
 8005a16:	47b8      	blx	r7
 8005a18:	3001      	adds	r0, #1
 8005a1a:	f43f ae3e 	beq.w	800569a <_printf_float+0xb6>
 8005a1e:	f108 0801 	add.w	r8, r8, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	dcf0      	bgt.n	8005a0e <_printf_float+0x42a>
 8005a2c:	e6fc      	b.n	8005828 <_printf_float+0x244>
 8005a2e:	f04f 0800 	mov.w	r8, #0
 8005a32:	f104 0919 	add.w	r9, r4, #25
 8005a36:	e7f4      	b.n	8005a22 <_printf_float+0x43e>

08005a38 <_printf_common>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	4698      	mov	r8, r3
 8005a40:	688a      	ldr	r2, [r1, #8]
 8005a42:	690b      	ldr	r3, [r1, #16]
 8005a44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	bfb8      	it	lt
 8005a4c:	4613      	movlt	r3, r2
 8005a4e:	6033      	str	r3, [r6, #0]
 8005a50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a54:	4607      	mov	r7, r0
 8005a56:	460c      	mov	r4, r1
 8005a58:	b10a      	cbz	r2, 8005a5e <_printf_common+0x26>
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	6823      	ldr	r3, [r4, #0]
 8005a60:	0699      	lsls	r1, r3, #26
 8005a62:	bf42      	ittt	mi
 8005a64:	6833      	ldrmi	r3, [r6, #0]
 8005a66:	3302      	addmi	r3, #2
 8005a68:	6033      	strmi	r3, [r6, #0]
 8005a6a:	6825      	ldr	r5, [r4, #0]
 8005a6c:	f015 0506 	ands.w	r5, r5, #6
 8005a70:	d106      	bne.n	8005a80 <_printf_common+0x48>
 8005a72:	f104 0a19 	add.w	sl, r4, #25
 8005a76:	68e3      	ldr	r3, [r4, #12]
 8005a78:	6832      	ldr	r2, [r6, #0]
 8005a7a:	1a9b      	subs	r3, r3, r2
 8005a7c:	42ab      	cmp	r3, r5
 8005a7e:	dc26      	bgt.n	8005ace <_printf_common+0x96>
 8005a80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	3b00      	subs	r3, #0
 8005a88:	bf18      	it	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	0692      	lsls	r2, r2, #26
 8005a8e:	d42b      	bmi.n	8005ae8 <_printf_common+0xb0>
 8005a90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a94:	4641      	mov	r1, r8
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c8      	blx	r9
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d01e      	beq.n	8005adc <_printf_common+0xa4>
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	6922      	ldr	r2, [r4, #16]
 8005aa2:	f003 0306 	and.w	r3, r3, #6
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	bf02      	ittt	eq
 8005aaa:	68e5      	ldreq	r5, [r4, #12]
 8005aac:	6833      	ldreq	r3, [r6, #0]
 8005aae:	1aed      	subeq	r5, r5, r3
 8005ab0:	68a3      	ldr	r3, [r4, #8]
 8005ab2:	bf0c      	ite	eq
 8005ab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ab8:	2500      	movne	r5, #0
 8005aba:	4293      	cmp	r3, r2
 8005abc:	bfc4      	itt	gt
 8005abe:	1a9b      	subgt	r3, r3, r2
 8005ac0:	18ed      	addgt	r5, r5, r3
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	341a      	adds	r4, #26
 8005ac6:	42b5      	cmp	r5, r6
 8005ac8:	d11a      	bne.n	8005b00 <_printf_common+0xc8>
 8005aca:	2000      	movs	r0, #0
 8005acc:	e008      	b.n	8005ae0 <_printf_common+0xa8>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4641      	mov	r1, r8
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	47c8      	blx	r9
 8005ad8:	3001      	adds	r0, #1
 8005ada:	d103      	bne.n	8005ae4 <_printf_common+0xac>
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	e7c6      	b.n	8005a76 <_printf_common+0x3e>
 8005ae8:	18e1      	adds	r1, r4, r3
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	2030      	movs	r0, #48	@ 0x30
 8005aee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005af2:	4422      	add	r2, r4
 8005af4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005af8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005afc:	3302      	adds	r3, #2
 8005afe:	e7c7      	b.n	8005a90 <_printf_common+0x58>
 8005b00:	2301      	movs	r3, #1
 8005b02:	4622      	mov	r2, r4
 8005b04:	4641      	mov	r1, r8
 8005b06:	4638      	mov	r0, r7
 8005b08:	47c8      	blx	r9
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	d0e6      	beq.n	8005adc <_printf_common+0xa4>
 8005b0e:	3601      	adds	r6, #1
 8005b10:	e7d9      	b.n	8005ac6 <_printf_common+0x8e>
	...

08005b14 <_printf_i>:
 8005b14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	7e0f      	ldrb	r7, [r1, #24]
 8005b1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b1c:	2f78      	cmp	r7, #120	@ 0x78
 8005b1e:	4691      	mov	r9, r2
 8005b20:	4680      	mov	r8, r0
 8005b22:	460c      	mov	r4, r1
 8005b24:	469a      	mov	sl, r3
 8005b26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b2a:	d807      	bhi.n	8005b3c <_printf_i+0x28>
 8005b2c:	2f62      	cmp	r7, #98	@ 0x62
 8005b2e:	d80a      	bhi.n	8005b46 <_printf_i+0x32>
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f000 80d2 	beq.w	8005cda <_printf_i+0x1c6>
 8005b36:	2f58      	cmp	r7, #88	@ 0x58
 8005b38:	f000 80b9 	beq.w	8005cae <_printf_i+0x19a>
 8005b3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b44:	e03a      	b.n	8005bbc <_printf_i+0xa8>
 8005b46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b4a:	2b15      	cmp	r3, #21
 8005b4c:	d8f6      	bhi.n	8005b3c <_printf_i+0x28>
 8005b4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b54 <_printf_i+0x40>)
 8005b50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b54:	08005bad 	.word	0x08005bad
 8005b58:	08005bc1 	.word	0x08005bc1
 8005b5c:	08005b3d 	.word	0x08005b3d
 8005b60:	08005b3d 	.word	0x08005b3d
 8005b64:	08005b3d 	.word	0x08005b3d
 8005b68:	08005b3d 	.word	0x08005b3d
 8005b6c:	08005bc1 	.word	0x08005bc1
 8005b70:	08005b3d 	.word	0x08005b3d
 8005b74:	08005b3d 	.word	0x08005b3d
 8005b78:	08005b3d 	.word	0x08005b3d
 8005b7c:	08005b3d 	.word	0x08005b3d
 8005b80:	08005cc1 	.word	0x08005cc1
 8005b84:	08005beb 	.word	0x08005beb
 8005b88:	08005c7b 	.word	0x08005c7b
 8005b8c:	08005b3d 	.word	0x08005b3d
 8005b90:	08005b3d 	.word	0x08005b3d
 8005b94:	08005ce3 	.word	0x08005ce3
 8005b98:	08005b3d 	.word	0x08005b3d
 8005b9c:	08005beb 	.word	0x08005beb
 8005ba0:	08005b3d 	.word	0x08005b3d
 8005ba4:	08005b3d 	.word	0x08005b3d
 8005ba8:	08005c83 	.word	0x08005c83
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	1d1a      	adds	r2, r3, #4
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6032      	str	r2, [r6, #0]
 8005bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e09d      	b.n	8005cfc <_printf_i+0x1e8>
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	6820      	ldr	r0, [r4, #0]
 8005bc4:	1d19      	adds	r1, r3, #4
 8005bc6:	6031      	str	r1, [r6, #0]
 8005bc8:	0606      	lsls	r6, r0, #24
 8005bca:	d501      	bpl.n	8005bd0 <_printf_i+0xbc>
 8005bcc:	681d      	ldr	r5, [r3, #0]
 8005bce:	e003      	b.n	8005bd8 <_printf_i+0xc4>
 8005bd0:	0645      	lsls	r5, r0, #25
 8005bd2:	d5fb      	bpl.n	8005bcc <_printf_i+0xb8>
 8005bd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bd8:	2d00      	cmp	r5, #0
 8005bda:	da03      	bge.n	8005be4 <_printf_i+0xd0>
 8005bdc:	232d      	movs	r3, #45	@ 0x2d
 8005bde:	426d      	negs	r5, r5
 8005be0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005be4:	4859      	ldr	r0, [pc, #356]	@ (8005d4c <_printf_i+0x238>)
 8005be6:	230a      	movs	r3, #10
 8005be8:	e011      	b.n	8005c0e <_printf_i+0xfa>
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	0608      	lsls	r0, r1, #24
 8005bf0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bf4:	d402      	bmi.n	8005bfc <_printf_i+0xe8>
 8005bf6:	0649      	lsls	r1, r1, #25
 8005bf8:	bf48      	it	mi
 8005bfa:	b2ad      	uxthmi	r5, r5
 8005bfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bfe:	4853      	ldr	r0, [pc, #332]	@ (8005d4c <_printf_i+0x238>)
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	bf14      	ite	ne
 8005c04:	230a      	movne	r3, #10
 8005c06:	2308      	moveq	r3, #8
 8005c08:	2100      	movs	r1, #0
 8005c0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c0e:	6866      	ldr	r6, [r4, #4]
 8005c10:	60a6      	str	r6, [r4, #8]
 8005c12:	2e00      	cmp	r6, #0
 8005c14:	bfa2      	ittt	ge
 8005c16:	6821      	ldrge	r1, [r4, #0]
 8005c18:	f021 0104 	bicge.w	r1, r1, #4
 8005c1c:	6021      	strge	r1, [r4, #0]
 8005c1e:	b90d      	cbnz	r5, 8005c24 <_printf_i+0x110>
 8005c20:	2e00      	cmp	r6, #0
 8005c22:	d04b      	beq.n	8005cbc <_printf_i+0x1a8>
 8005c24:	4616      	mov	r6, r2
 8005c26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005c2e:	5dc7      	ldrb	r7, [r0, r7]
 8005c30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c34:	462f      	mov	r7, r5
 8005c36:	42bb      	cmp	r3, r7
 8005c38:	460d      	mov	r5, r1
 8005c3a:	d9f4      	bls.n	8005c26 <_printf_i+0x112>
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d10b      	bne.n	8005c58 <_printf_i+0x144>
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	07df      	lsls	r7, r3, #31
 8005c44:	d508      	bpl.n	8005c58 <_printf_i+0x144>
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	6861      	ldr	r1, [r4, #4]
 8005c4a:	4299      	cmp	r1, r3
 8005c4c:	bfde      	ittt	le
 8005c4e:	2330      	movle	r3, #48	@ 0x30
 8005c50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c58:	1b92      	subs	r2, r2, r6
 8005c5a:	6122      	str	r2, [r4, #16]
 8005c5c:	f8cd a000 	str.w	sl, [sp]
 8005c60:	464b      	mov	r3, r9
 8005c62:	aa03      	add	r2, sp, #12
 8005c64:	4621      	mov	r1, r4
 8005c66:	4640      	mov	r0, r8
 8005c68:	f7ff fee6 	bl	8005a38 <_printf_common>
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d14a      	bne.n	8005d06 <_printf_i+0x1f2>
 8005c70:	f04f 30ff 	mov.w	r0, #4294967295
 8005c74:	b004      	add	sp, #16
 8005c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	f043 0320 	orr.w	r3, r3, #32
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	4833      	ldr	r0, [pc, #204]	@ (8005d50 <_printf_i+0x23c>)
 8005c84:	2778      	movs	r7, #120	@ 0x78
 8005c86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	6831      	ldr	r1, [r6, #0]
 8005c8e:	061f      	lsls	r7, r3, #24
 8005c90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c94:	d402      	bmi.n	8005c9c <_printf_i+0x188>
 8005c96:	065f      	lsls	r7, r3, #25
 8005c98:	bf48      	it	mi
 8005c9a:	b2ad      	uxthmi	r5, r5
 8005c9c:	6031      	str	r1, [r6, #0]
 8005c9e:	07d9      	lsls	r1, r3, #31
 8005ca0:	bf44      	itt	mi
 8005ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ca6:	6023      	strmi	r3, [r4, #0]
 8005ca8:	b11d      	cbz	r5, 8005cb2 <_printf_i+0x19e>
 8005caa:	2310      	movs	r3, #16
 8005cac:	e7ac      	b.n	8005c08 <_printf_i+0xf4>
 8005cae:	4827      	ldr	r0, [pc, #156]	@ (8005d4c <_printf_i+0x238>)
 8005cb0:	e7e9      	b.n	8005c86 <_printf_i+0x172>
 8005cb2:	6823      	ldr	r3, [r4, #0]
 8005cb4:	f023 0320 	bic.w	r3, r3, #32
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	e7f6      	b.n	8005caa <_printf_i+0x196>
 8005cbc:	4616      	mov	r6, r2
 8005cbe:	e7bd      	b.n	8005c3c <_printf_i+0x128>
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	6825      	ldr	r5, [r4, #0]
 8005cc4:	6961      	ldr	r1, [r4, #20]
 8005cc6:	1d18      	adds	r0, r3, #4
 8005cc8:	6030      	str	r0, [r6, #0]
 8005cca:	062e      	lsls	r6, r5, #24
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	d501      	bpl.n	8005cd4 <_printf_i+0x1c0>
 8005cd0:	6019      	str	r1, [r3, #0]
 8005cd2:	e002      	b.n	8005cda <_printf_i+0x1c6>
 8005cd4:	0668      	lsls	r0, r5, #25
 8005cd6:	d5fb      	bpl.n	8005cd0 <_printf_i+0x1bc>
 8005cd8:	8019      	strh	r1, [r3, #0]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	4616      	mov	r6, r2
 8005ce0:	e7bc      	b.n	8005c5c <_printf_i+0x148>
 8005ce2:	6833      	ldr	r3, [r6, #0]
 8005ce4:	1d1a      	adds	r2, r3, #4
 8005ce6:	6032      	str	r2, [r6, #0]
 8005ce8:	681e      	ldr	r6, [r3, #0]
 8005cea:	6862      	ldr	r2, [r4, #4]
 8005cec:	2100      	movs	r1, #0
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f7fa fa6e 	bl	80001d0 <memchr>
 8005cf4:	b108      	cbz	r0, 8005cfa <_printf_i+0x1e6>
 8005cf6:	1b80      	subs	r0, r0, r6
 8005cf8:	6060      	str	r0, [r4, #4]
 8005cfa:	6863      	ldr	r3, [r4, #4]
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d04:	e7aa      	b.n	8005c5c <_printf_i+0x148>
 8005d06:	6923      	ldr	r3, [r4, #16]
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	47d0      	blx	sl
 8005d10:	3001      	adds	r0, #1
 8005d12:	d0ad      	beq.n	8005c70 <_printf_i+0x15c>
 8005d14:	6823      	ldr	r3, [r4, #0]
 8005d16:	079b      	lsls	r3, r3, #30
 8005d18:	d413      	bmi.n	8005d42 <_printf_i+0x22e>
 8005d1a:	68e0      	ldr	r0, [r4, #12]
 8005d1c:	9b03      	ldr	r3, [sp, #12]
 8005d1e:	4298      	cmp	r0, r3
 8005d20:	bfb8      	it	lt
 8005d22:	4618      	movlt	r0, r3
 8005d24:	e7a6      	b.n	8005c74 <_printf_i+0x160>
 8005d26:	2301      	movs	r3, #1
 8005d28:	4632      	mov	r2, r6
 8005d2a:	4649      	mov	r1, r9
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	47d0      	blx	sl
 8005d30:	3001      	adds	r0, #1
 8005d32:	d09d      	beq.n	8005c70 <_printf_i+0x15c>
 8005d34:	3501      	adds	r5, #1
 8005d36:	68e3      	ldr	r3, [r4, #12]
 8005d38:	9903      	ldr	r1, [sp, #12]
 8005d3a:	1a5b      	subs	r3, r3, r1
 8005d3c:	42ab      	cmp	r3, r5
 8005d3e:	dcf2      	bgt.n	8005d26 <_printf_i+0x212>
 8005d40:	e7eb      	b.n	8005d1a <_printf_i+0x206>
 8005d42:	2500      	movs	r5, #0
 8005d44:	f104 0619 	add.w	r6, r4, #25
 8005d48:	e7f5      	b.n	8005d36 <_printf_i+0x222>
 8005d4a:	bf00      	nop
 8005d4c:	080081f2 	.word	0x080081f2
 8005d50:	08008203 	.word	0x08008203

08005d54 <std>:
 8005d54:	2300      	movs	r3, #0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	4604      	mov	r4, r0
 8005d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d62:	6083      	str	r3, [r0, #8]
 8005d64:	8181      	strh	r1, [r0, #12]
 8005d66:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d68:	81c2      	strh	r2, [r0, #14]
 8005d6a:	6183      	str	r3, [r0, #24]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	2208      	movs	r2, #8
 8005d70:	305c      	adds	r0, #92	@ 0x5c
 8005d72:	f000 f928 	bl	8005fc6 <memset>
 8005d76:	4b0d      	ldr	r3, [pc, #52]	@ (8005dac <std+0x58>)
 8005d78:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <std+0x5c>)
 8005d7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <std+0x60>)
 8005d80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d82:	4b0d      	ldr	r3, [pc, #52]	@ (8005db8 <std+0x64>)
 8005d84:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <std+0x68>)
 8005d88:	6224      	str	r4, [r4, #32]
 8005d8a:	429c      	cmp	r4, r3
 8005d8c:	d006      	beq.n	8005d9c <std+0x48>
 8005d8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d92:	4294      	cmp	r4, r2
 8005d94:	d002      	beq.n	8005d9c <std+0x48>
 8005d96:	33d0      	adds	r3, #208	@ 0xd0
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	d105      	bne.n	8005da8 <std+0x54>
 8005d9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da4:	f000 b98c 	b.w	80060c0 <__retarget_lock_init_recursive>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	bf00      	nop
 8005dac:	08005f41 	.word	0x08005f41
 8005db0:	08005f63 	.word	0x08005f63
 8005db4:	08005f9b 	.word	0x08005f9b
 8005db8:	08005fbf 	.word	0x08005fbf
 8005dbc:	20000320 	.word	0x20000320

08005dc0 <stdio_exit_handler>:
 8005dc0:	4a02      	ldr	r2, [pc, #8]	@ (8005dcc <stdio_exit_handler+0xc>)
 8005dc2:	4903      	ldr	r1, [pc, #12]	@ (8005dd0 <stdio_exit_handler+0x10>)
 8005dc4:	4803      	ldr	r0, [pc, #12]	@ (8005dd4 <stdio_exit_handler+0x14>)
 8005dc6:	f000 b869 	b.w	8005e9c <_fwalk_sglue>
 8005dca:	bf00      	nop
 8005dcc:	2000000c 	.word	0x2000000c
 8005dd0:	08007a1d 	.word	0x08007a1d
 8005dd4:	2000001c 	.word	0x2000001c

08005dd8 <cleanup_stdio>:
 8005dd8:	6841      	ldr	r1, [r0, #4]
 8005dda:	4b0c      	ldr	r3, [pc, #48]	@ (8005e0c <cleanup_stdio+0x34>)
 8005ddc:	4299      	cmp	r1, r3
 8005dde:	b510      	push	{r4, lr}
 8005de0:	4604      	mov	r4, r0
 8005de2:	d001      	beq.n	8005de8 <cleanup_stdio+0x10>
 8005de4:	f001 fe1a 	bl	8007a1c <_fflush_r>
 8005de8:	68a1      	ldr	r1, [r4, #8]
 8005dea:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <cleanup_stdio+0x38>)
 8005dec:	4299      	cmp	r1, r3
 8005dee:	d002      	beq.n	8005df6 <cleanup_stdio+0x1e>
 8005df0:	4620      	mov	r0, r4
 8005df2:	f001 fe13 	bl	8007a1c <_fflush_r>
 8005df6:	68e1      	ldr	r1, [r4, #12]
 8005df8:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <cleanup_stdio+0x3c>)
 8005dfa:	4299      	cmp	r1, r3
 8005dfc:	d004      	beq.n	8005e08 <cleanup_stdio+0x30>
 8005dfe:	4620      	mov	r0, r4
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f001 be0a 	b.w	8007a1c <_fflush_r>
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	20000320 	.word	0x20000320
 8005e10:	20000388 	.word	0x20000388
 8005e14:	200003f0 	.word	0x200003f0

08005e18 <global_stdio_init.part.0>:
 8005e18:	b510      	push	{r4, lr}
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <global_stdio_init.part.0+0x30>)
 8005e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8005e4c <global_stdio_init.part.0+0x34>)
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8005e50 <global_stdio_init.part.0+0x38>)
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	4620      	mov	r0, r4
 8005e24:	2200      	movs	r2, #0
 8005e26:	2104      	movs	r1, #4
 8005e28:	f7ff ff94 	bl	8005d54 <std>
 8005e2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e30:	2201      	movs	r2, #1
 8005e32:	2109      	movs	r1, #9
 8005e34:	f7ff ff8e 	bl	8005d54 <std>
 8005e38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e42:	2112      	movs	r1, #18
 8005e44:	f7ff bf86 	b.w	8005d54 <std>
 8005e48:	20000458 	.word	0x20000458
 8005e4c:	20000320 	.word	0x20000320
 8005e50:	08005dc1 	.word	0x08005dc1

08005e54 <__sfp_lock_acquire>:
 8005e54:	4801      	ldr	r0, [pc, #4]	@ (8005e5c <__sfp_lock_acquire+0x8>)
 8005e56:	f000 b934 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	20000461 	.word	0x20000461

08005e60 <__sfp_lock_release>:
 8005e60:	4801      	ldr	r0, [pc, #4]	@ (8005e68 <__sfp_lock_release+0x8>)
 8005e62:	f000 b92f 	b.w	80060c4 <__retarget_lock_release_recursive>
 8005e66:	bf00      	nop
 8005e68:	20000461 	.word	0x20000461

08005e6c <__sinit>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4604      	mov	r4, r0
 8005e70:	f7ff fff0 	bl	8005e54 <__sfp_lock_acquire>
 8005e74:	6a23      	ldr	r3, [r4, #32]
 8005e76:	b11b      	cbz	r3, 8005e80 <__sinit+0x14>
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	f7ff bff0 	b.w	8005e60 <__sfp_lock_release>
 8005e80:	4b04      	ldr	r3, [pc, #16]	@ (8005e94 <__sinit+0x28>)
 8005e82:	6223      	str	r3, [r4, #32]
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__sinit+0x2c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1f5      	bne.n	8005e78 <__sinit+0xc>
 8005e8c:	f7ff ffc4 	bl	8005e18 <global_stdio_init.part.0>
 8005e90:	e7f2      	b.n	8005e78 <__sinit+0xc>
 8005e92:	bf00      	nop
 8005e94:	08005dd9 	.word	0x08005dd9
 8005e98:	20000458 	.word	0x20000458

08005e9c <_fwalk_sglue>:
 8005e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	4688      	mov	r8, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	2600      	movs	r6, #0
 8005ea8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005eac:	f1b9 0901 	subs.w	r9, r9, #1
 8005eb0:	d505      	bpl.n	8005ebe <_fwalk_sglue+0x22>
 8005eb2:	6824      	ldr	r4, [r4, #0]
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	d1f7      	bne.n	8005ea8 <_fwalk_sglue+0xc>
 8005eb8:	4630      	mov	r0, r6
 8005eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ebe:	89ab      	ldrh	r3, [r5, #12]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d907      	bls.n	8005ed4 <_fwalk_sglue+0x38>
 8005ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	d003      	beq.n	8005ed4 <_fwalk_sglue+0x38>
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4638      	mov	r0, r7
 8005ed0:	47c0      	blx	r8
 8005ed2:	4306      	orrs	r6, r0
 8005ed4:	3568      	adds	r5, #104	@ 0x68
 8005ed6:	e7e9      	b.n	8005eac <_fwalk_sglue+0x10>

08005ed8 <sniprintf>:
 8005ed8:	b40c      	push	{r2, r3}
 8005eda:	b530      	push	{r4, r5, lr}
 8005edc:	4b17      	ldr	r3, [pc, #92]	@ (8005f3c <sniprintf+0x64>)
 8005ede:	1e0c      	subs	r4, r1, #0
 8005ee0:	681d      	ldr	r5, [r3, #0]
 8005ee2:	b09d      	sub	sp, #116	@ 0x74
 8005ee4:	da08      	bge.n	8005ef8 <sniprintf+0x20>
 8005ee6:	238b      	movs	r3, #139	@ 0x8b
 8005ee8:	602b      	str	r3, [r5, #0]
 8005eea:	f04f 30ff 	mov.w	r0, #4294967295
 8005eee:	b01d      	add	sp, #116	@ 0x74
 8005ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ef4:	b002      	add	sp, #8
 8005ef6:	4770      	bx	lr
 8005ef8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005efc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005f00:	bf14      	ite	ne
 8005f02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005f06:	4623      	moveq	r3, r4
 8005f08:	9304      	str	r3, [sp, #16]
 8005f0a:	9307      	str	r3, [sp, #28]
 8005f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f10:	9002      	str	r0, [sp, #8]
 8005f12:	9006      	str	r0, [sp, #24]
 8005f14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f1a:	ab21      	add	r3, sp, #132	@ 0x84
 8005f1c:	a902      	add	r1, sp, #8
 8005f1e:	4628      	mov	r0, r5
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	f001 fbfb 	bl	800771c <_svfiprintf_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	bfbc      	itt	lt
 8005f2a:	238b      	movlt	r3, #139	@ 0x8b
 8005f2c:	602b      	strlt	r3, [r5, #0]
 8005f2e:	2c00      	cmp	r4, #0
 8005f30:	d0dd      	beq.n	8005eee <sniprintf+0x16>
 8005f32:	9b02      	ldr	r3, [sp, #8]
 8005f34:	2200      	movs	r2, #0
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	e7d9      	b.n	8005eee <sniprintf+0x16>
 8005f3a:	bf00      	nop
 8005f3c:	20000018 	.word	0x20000018

08005f40 <__sread>:
 8005f40:	b510      	push	{r4, lr}
 8005f42:	460c      	mov	r4, r1
 8005f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f48:	f000 f86c 	bl	8006024 <_read_r>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	bfab      	itete	ge
 8005f50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f52:	89a3      	ldrhlt	r3, [r4, #12]
 8005f54:	181b      	addge	r3, r3, r0
 8005f56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f5a:	bfac      	ite	ge
 8005f5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f5e:	81a3      	strhlt	r3, [r4, #12]
 8005f60:	bd10      	pop	{r4, pc}

08005f62 <__swrite>:
 8005f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f66:	461f      	mov	r7, r3
 8005f68:	898b      	ldrh	r3, [r1, #12]
 8005f6a:	05db      	lsls	r3, r3, #23
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	4616      	mov	r6, r2
 8005f72:	d505      	bpl.n	8005f80 <__swrite+0x1e>
 8005f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f78:	2302      	movs	r3, #2
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f000 f840 	bl	8006000 <_lseek_r>
 8005f80:	89a3      	ldrh	r3, [r4, #12]
 8005f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f8a:	81a3      	strh	r3, [r4, #12]
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	463b      	mov	r3, r7
 8005f90:	4628      	mov	r0, r5
 8005f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f96:	f000 b857 	b.w	8006048 <_write_r>

08005f9a <__sseek>:
 8005f9a:	b510      	push	{r4, lr}
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa2:	f000 f82d 	bl	8006000 <_lseek_r>
 8005fa6:	1c43      	adds	r3, r0, #1
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	bf15      	itete	ne
 8005fac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005fae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005fb2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005fb6:	81a3      	strheq	r3, [r4, #12]
 8005fb8:	bf18      	it	ne
 8005fba:	81a3      	strhne	r3, [r4, #12]
 8005fbc:	bd10      	pop	{r4, pc}

08005fbe <__sclose>:
 8005fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc2:	f000 b80d 	b.w	8005fe0 <_close_r>

08005fc6 <memset>:
 8005fc6:	4402      	add	r2, r0
 8005fc8:	4603      	mov	r3, r0
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d100      	bne.n	8005fd0 <memset+0xa>
 8005fce:	4770      	bx	lr
 8005fd0:	f803 1b01 	strb.w	r1, [r3], #1
 8005fd4:	e7f9      	b.n	8005fca <memset+0x4>
	...

08005fd8 <_localeconv_r>:
 8005fd8:	4800      	ldr	r0, [pc, #0]	@ (8005fdc <_localeconv_r+0x4>)
 8005fda:	4770      	bx	lr
 8005fdc:	20000158 	.word	0x20000158

08005fe0 <_close_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4d06      	ldr	r5, [pc, #24]	@ (8005ffc <_close_r+0x1c>)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	4604      	mov	r4, r0
 8005fe8:	4608      	mov	r0, r1
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	f7fb faf3 	bl	80015d6 <_close>
 8005ff0:	1c43      	adds	r3, r0, #1
 8005ff2:	d102      	bne.n	8005ffa <_close_r+0x1a>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	b103      	cbz	r3, 8005ffa <_close_r+0x1a>
 8005ff8:	6023      	str	r3, [r4, #0]
 8005ffa:	bd38      	pop	{r3, r4, r5, pc}
 8005ffc:	2000045c 	.word	0x2000045c

08006000 <_lseek_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4d07      	ldr	r5, [pc, #28]	@ (8006020 <_lseek_r+0x20>)
 8006004:	4604      	mov	r4, r0
 8006006:	4608      	mov	r0, r1
 8006008:	4611      	mov	r1, r2
 800600a:	2200      	movs	r2, #0
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f7fb fb08 	bl	8001624 <_lseek>
 8006014:	1c43      	adds	r3, r0, #1
 8006016:	d102      	bne.n	800601e <_lseek_r+0x1e>
 8006018:	682b      	ldr	r3, [r5, #0]
 800601a:	b103      	cbz	r3, 800601e <_lseek_r+0x1e>
 800601c:	6023      	str	r3, [r4, #0]
 800601e:	bd38      	pop	{r3, r4, r5, pc}
 8006020:	2000045c 	.word	0x2000045c

08006024 <_read_r>:
 8006024:	b538      	push	{r3, r4, r5, lr}
 8006026:	4d07      	ldr	r5, [pc, #28]	@ (8006044 <_read_r+0x20>)
 8006028:	4604      	mov	r4, r0
 800602a:	4608      	mov	r0, r1
 800602c:	4611      	mov	r1, r2
 800602e:	2200      	movs	r2, #0
 8006030:	602a      	str	r2, [r5, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	f7fb fa96 	bl	8001564 <_read>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_read_r+0x1e>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_read_r+0x1e>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	2000045c 	.word	0x2000045c

08006048 <_write_r>:
 8006048:	b538      	push	{r3, r4, r5, lr}
 800604a:	4d07      	ldr	r5, [pc, #28]	@ (8006068 <_write_r+0x20>)
 800604c:	4604      	mov	r4, r0
 800604e:	4608      	mov	r0, r1
 8006050:	4611      	mov	r1, r2
 8006052:	2200      	movs	r2, #0
 8006054:	602a      	str	r2, [r5, #0]
 8006056:	461a      	mov	r2, r3
 8006058:	f7fb faa1 	bl	800159e <_write>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_write_r+0x1e>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_write_r+0x1e>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	2000045c 	.word	0x2000045c

0800606c <__errno>:
 800606c:	4b01      	ldr	r3, [pc, #4]	@ (8006074 <__errno+0x8>)
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000018 	.word	0x20000018

08006078 <__libc_init_array>:
 8006078:	b570      	push	{r4, r5, r6, lr}
 800607a:	4d0d      	ldr	r5, [pc, #52]	@ (80060b0 <__libc_init_array+0x38>)
 800607c:	4c0d      	ldr	r4, [pc, #52]	@ (80060b4 <__libc_init_array+0x3c>)
 800607e:	1b64      	subs	r4, r4, r5
 8006080:	10a4      	asrs	r4, r4, #2
 8006082:	2600      	movs	r6, #0
 8006084:	42a6      	cmp	r6, r4
 8006086:	d109      	bne.n	800609c <__libc_init_array+0x24>
 8006088:	4d0b      	ldr	r5, [pc, #44]	@ (80060b8 <__libc_init_array+0x40>)
 800608a:	4c0c      	ldr	r4, [pc, #48]	@ (80060bc <__libc_init_array+0x44>)
 800608c:	f002 f864 	bl	8008158 <_init>
 8006090:	1b64      	subs	r4, r4, r5
 8006092:	10a4      	asrs	r4, r4, #2
 8006094:	2600      	movs	r6, #0
 8006096:	42a6      	cmp	r6, r4
 8006098:	d105      	bne.n	80060a6 <__libc_init_array+0x2e>
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a0:	4798      	blx	r3
 80060a2:	3601      	adds	r6, #1
 80060a4:	e7ee      	b.n	8006084 <__libc_init_array+0xc>
 80060a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060aa:	4798      	blx	r3
 80060ac:	3601      	adds	r6, #1
 80060ae:	e7f2      	b.n	8006096 <__libc_init_array+0x1e>
 80060b0:	08008558 	.word	0x08008558
 80060b4:	08008558 	.word	0x08008558
 80060b8:	08008558 	.word	0x08008558
 80060bc:	0800855c 	.word	0x0800855c

080060c0 <__retarget_lock_init_recursive>:
 80060c0:	4770      	bx	lr

080060c2 <__retarget_lock_acquire_recursive>:
 80060c2:	4770      	bx	lr

080060c4 <__retarget_lock_release_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <quorem>:
 80060c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ca:	6903      	ldr	r3, [r0, #16]
 80060cc:	690c      	ldr	r4, [r1, #16]
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	4607      	mov	r7, r0
 80060d2:	db7e      	blt.n	80061d2 <quorem+0x10c>
 80060d4:	3c01      	subs	r4, #1
 80060d6:	f101 0814 	add.w	r8, r1, #20
 80060da:	00a3      	lsls	r3, r4, #2
 80060dc:	f100 0514 	add.w	r5, r0, #20
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f0:	3301      	adds	r3, #1
 80060f2:	429a      	cmp	r2, r3
 80060f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80060fc:	d32e      	bcc.n	800615c <quorem+0x96>
 80060fe:	f04f 0a00 	mov.w	sl, #0
 8006102:	46c4      	mov	ip, r8
 8006104:	46ae      	mov	lr, r5
 8006106:	46d3      	mov	fp, sl
 8006108:	f85c 3b04 	ldr.w	r3, [ip], #4
 800610c:	b298      	uxth	r0, r3
 800610e:	fb06 a000 	mla	r0, r6, r0, sl
 8006112:	0c02      	lsrs	r2, r0, #16
 8006114:	0c1b      	lsrs	r3, r3, #16
 8006116:	fb06 2303 	mla	r3, r6, r3, r2
 800611a:	f8de 2000 	ldr.w	r2, [lr]
 800611e:	b280      	uxth	r0, r0
 8006120:	b292      	uxth	r2, r2
 8006122:	1a12      	subs	r2, r2, r0
 8006124:	445a      	add	r2, fp
 8006126:	f8de 0000 	ldr.w	r0, [lr]
 800612a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800612e:	b29b      	uxth	r3, r3
 8006130:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006134:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006138:	b292      	uxth	r2, r2
 800613a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800613e:	45e1      	cmp	r9, ip
 8006140:	f84e 2b04 	str.w	r2, [lr], #4
 8006144:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006148:	d2de      	bcs.n	8006108 <quorem+0x42>
 800614a:	9b00      	ldr	r3, [sp, #0]
 800614c:	58eb      	ldr	r3, [r5, r3]
 800614e:	b92b      	cbnz	r3, 800615c <quorem+0x96>
 8006150:	9b01      	ldr	r3, [sp, #4]
 8006152:	3b04      	subs	r3, #4
 8006154:	429d      	cmp	r5, r3
 8006156:	461a      	mov	r2, r3
 8006158:	d32f      	bcc.n	80061ba <quorem+0xf4>
 800615a:	613c      	str	r4, [r7, #16]
 800615c:	4638      	mov	r0, r7
 800615e:	f001 f979 	bl	8007454 <__mcmp>
 8006162:	2800      	cmp	r0, #0
 8006164:	db25      	blt.n	80061b2 <quorem+0xec>
 8006166:	4629      	mov	r1, r5
 8006168:	2000      	movs	r0, #0
 800616a:	f858 2b04 	ldr.w	r2, [r8], #4
 800616e:	f8d1 c000 	ldr.w	ip, [r1]
 8006172:	fa1f fe82 	uxth.w	lr, r2
 8006176:	fa1f f38c 	uxth.w	r3, ip
 800617a:	eba3 030e 	sub.w	r3, r3, lr
 800617e:	4403      	add	r3, r0
 8006180:	0c12      	lsrs	r2, r2, #16
 8006182:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006186:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800618a:	b29b      	uxth	r3, r3
 800618c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006190:	45c1      	cmp	r9, r8
 8006192:	f841 3b04 	str.w	r3, [r1], #4
 8006196:	ea4f 4022 	mov.w	r0, r2, asr #16
 800619a:	d2e6      	bcs.n	800616a <quorem+0xa4>
 800619c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061a4:	b922      	cbnz	r2, 80061b0 <quorem+0xea>
 80061a6:	3b04      	subs	r3, #4
 80061a8:	429d      	cmp	r5, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	d30b      	bcc.n	80061c6 <quorem+0x100>
 80061ae:	613c      	str	r4, [r7, #16]
 80061b0:	3601      	adds	r6, #1
 80061b2:	4630      	mov	r0, r6
 80061b4:	b003      	add	sp, #12
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	3b04      	subs	r3, #4
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d1cb      	bne.n	800615a <quorem+0x94>
 80061c2:	3c01      	subs	r4, #1
 80061c4:	e7c6      	b.n	8006154 <quorem+0x8e>
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	3b04      	subs	r3, #4
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d1ef      	bne.n	80061ae <quorem+0xe8>
 80061ce:	3c01      	subs	r4, #1
 80061d0:	e7ea      	b.n	80061a8 <quorem+0xe2>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e7ee      	b.n	80061b4 <quorem+0xee>
	...

080061d8 <_dtoa_r>:
 80061d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	69c7      	ldr	r7, [r0, #28]
 80061de:	b099      	sub	sp, #100	@ 0x64
 80061e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061e4:	ec55 4b10 	vmov	r4, r5, d0
 80061e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80061ec:	4683      	mov	fp, r0
 80061ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80061f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061f2:	b97f      	cbnz	r7, 8006214 <_dtoa_r+0x3c>
 80061f4:	2010      	movs	r0, #16
 80061f6:	f000 fdfd 	bl	8006df4 <malloc>
 80061fa:	4602      	mov	r2, r0
 80061fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006200:	b920      	cbnz	r0, 800620c <_dtoa_r+0x34>
 8006202:	4ba7      	ldr	r3, [pc, #668]	@ (80064a0 <_dtoa_r+0x2c8>)
 8006204:	21ef      	movs	r1, #239	@ 0xef
 8006206:	48a7      	ldr	r0, [pc, #668]	@ (80064a4 <_dtoa_r+0x2cc>)
 8006208:	f001 fc68 	bl	8007adc <__assert_func>
 800620c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006210:	6007      	str	r7, [r0, #0]
 8006212:	60c7      	str	r7, [r0, #12]
 8006214:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006218:	6819      	ldr	r1, [r3, #0]
 800621a:	b159      	cbz	r1, 8006234 <_dtoa_r+0x5c>
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	604a      	str	r2, [r1, #4]
 8006220:	2301      	movs	r3, #1
 8006222:	4093      	lsls	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
 8006226:	4658      	mov	r0, fp
 8006228:	f000 feda 	bl	8006fe0 <_Bfree>
 800622c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	1e2b      	subs	r3, r5, #0
 8006236:	bfb9      	ittee	lt
 8006238:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800623c:	9303      	strlt	r3, [sp, #12]
 800623e:	2300      	movge	r3, #0
 8006240:	6033      	strge	r3, [r6, #0]
 8006242:	9f03      	ldr	r7, [sp, #12]
 8006244:	4b98      	ldr	r3, [pc, #608]	@ (80064a8 <_dtoa_r+0x2d0>)
 8006246:	bfbc      	itt	lt
 8006248:	2201      	movlt	r2, #1
 800624a:	6032      	strlt	r2, [r6, #0]
 800624c:	43bb      	bics	r3, r7
 800624e:	d112      	bne.n	8006276 <_dtoa_r+0x9e>
 8006250:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006252:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800625c:	4323      	orrs	r3, r4
 800625e:	f000 854d 	beq.w	8006cfc <_dtoa_r+0xb24>
 8006262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006264:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80064bc <_dtoa_r+0x2e4>
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 854f 	beq.w	8006d0c <_dtoa_r+0xb34>
 800626e:	f10a 0303 	add.w	r3, sl, #3
 8006272:	f000 bd49 	b.w	8006d08 <_dtoa_r+0xb30>
 8006276:	ed9d 7b02 	vldr	d7, [sp, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	ec51 0b17 	vmov	r0, r1, d7
 8006280:	2300      	movs	r3, #0
 8006282:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006286:	f7fa fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800628a:	4680      	mov	r8, r0
 800628c:	b158      	cbz	r0, 80062a6 <_dtoa_r+0xce>
 800628e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006290:	2301      	movs	r3, #1
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006296:	b113      	cbz	r3, 800629e <_dtoa_r+0xc6>
 8006298:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800629a:	4b84      	ldr	r3, [pc, #528]	@ (80064ac <_dtoa_r+0x2d4>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80064c0 <_dtoa_r+0x2e8>
 80062a2:	f000 bd33 	b.w	8006d0c <_dtoa_r+0xb34>
 80062a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80062aa:	aa16      	add	r2, sp, #88	@ 0x58
 80062ac:	a917      	add	r1, sp, #92	@ 0x5c
 80062ae:	4658      	mov	r0, fp
 80062b0:	f001 f980 	bl	80075b4 <__d2b>
 80062b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80062b8:	4681      	mov	r9, r0
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	d077      	beq.n	80063ae <_dtoa_r+0x1d6>
 80062be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80062c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062d8:	4619      	mov	r1, r3
 80062da:	2200      	movs	r2, #0
 80062dc:	4b74      	ldr	r3, [pc, #464]	@ (80064b0 <_dtoa_r+0x2d8>)
 80062de:	f7f9 ffd3 	bl	8000288 <__aeabi_dsub>
 80062e2:	a369      	add	r3, pc, #420	@ (adr r3, 8006488 <_dtoa_r+0x2b0>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7fa f986 	bl	80005f8 <__aeabi_dmul>
 80062ec:	a368      	add	r3, pc, #416	@ (adr r3, 8006490 <_dtoa_r+0x2b8>)
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f7f9 ffcb 	bl	800028c <__adddf3>
 80062f6:	4604      	mov	r4, r0
 80062f8:	4630      	mov	r0, r6
 80062fa:	460d      	mov	r5, r1
 80062fc:	f7fa f912 	bl	8000524 <__aeabi_i2d>
 8006300:	a365      	add	r3, pc, #404	@ (adr r3, 8006498 <_dtoa_r+0x2c0>)
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	f7fa f977 	bl	80005f8 <__aeabi_dmul>
 800630a:	4602      	mov	r2, r0
 800630c:	460b      	mov	r3, r1
 800630e:	4620      	mov	r0, r4
 8006310:	4629      	mov	r1, r5
 8006312:	f7f9 ffbb 	bl	800028c <__adddf3>
 8006316:	4604      	mov	r4, r0
 8006318:	460d      	mov	r5, r1
 800631a:	f7fa fc1d 	bl	8000b58 <__aeabi_d2iz>
 800631e:	2200      	movs	r2, #0
 8006320:	4607      	mov	r7, r0
 8006322:	2300      	movs	r3, #0
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa fbd8 	bl	8000adc <__aeabi_dcmplt>
 800632c:	b140      	cbz	r0, 8006340 <_dtoa_r+0x168>
 800632e:	4638      	mov	r0, r7
 8006330:	f7fa f8f8 	bl	8000524 <__aeabi_i2d>
 8006334:	4622      	mov	r2, r4
 8006336:	462b      	mov	r3, r5
 8006338:	f7fa fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800633c:	b900      	cbnz	r0, 8006340 <_dtoa_r+0x168>
 800633e:	3f01      	subs	r7, #1
 8006340:	2f16      	cmp	r7, #22
 8006342:	d851      	bhi.n	80063e8 <_dtoa_r+0x210>
 8006344:	4b5b      	ldr	r3, [pc, #364]	@ (80064b4 <_dtoa_r+0x2dc>)
 8006346:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006352:	f7fa fbc3 	bl	8000adc <__aeabi_dcmplt>
 8006356:	2800      	cmp	r0, #0
 8006358:	d048      	beq.n	80063ec <_dtoa_r+0x214>
 800635a:	3f01      	subs	r7, #1
 800635c:	2300      	movs	r3, #0
 800635e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006360:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006362:	1b9b      	subs	r3, r3, r6
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	bf44      	itt	mi
 8006368:	f1c3 0801 	rsbmi	r8, r3, #1
 800636c:	2300      	movmi	r3, #0
 800636e:	9208      	str	r2, [sp, #32]
 8006370:	bf54      	ite	pl
 8006372:	f04f 0800 	movpl.w	r8, #0
 8006376:	9308      	strmi	r3, [sp, #32]
 8006378:	2f00      	cmp	r7, #0
 800637a:	db39      	blt.n	80063f0 <_dtoa_r+0x218>
 800637c:	9b08      	ldr	r3, [sp, #32]
 800637e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006380:	443b      	add	r3, r7
 8006382:	9308      	str	r3, [sp, #32]
 8006384:	2300      	movs	r3, #0
 8006386:	930a      	str	r3, [sp, #40]	@ 0x28
 8006388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638a:	2b09      	cmp	r3, #9
 800638c:	d864      	bhi.n	8006458 <_dtoa_r+0x280>
 800638e:	2b05      	cmp	r3, #5
 8006390:	bfc4      	itt	gt
 8006392:	3b04      	subgt	r3, #4
 8006394:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006398:	f1a3 0302 	sub.w	r3, r3, #2
 800639c:	bfcc      	ite	gt
 800639e:	2400      	movgt	r4, #0
 80063a0:	2401      	movle	r4, #1
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	d863      	bhi.n	800646e <_dtoa_r+0x296>
 80063a6:	e8df f003 	tbb	[pc, r3]
 80063aa:	372a      	.short	0x372a
 80063ac:	5535      	.short	0x5535
 80063ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80063b2:	441e      	add	r6, r3
 80063b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80063b8:	2b20      	cmp	r3, #32
 80063ba:	bfc1      	itttt	gt
 80063bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80063c0:	409f      	lslgt	r7, r3
 80063c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80063c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80063ca:	bfd6      	itet	le
 80063cc:	f1c3 0320 	rsble	r3, r3, #32
 80063d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80063d4:	fa04 f003 	lslle.w	r0, r4, r3
 80063d8:	f7fa f894 	bl	8000504 <__aeabi_ui2d>
 80063dc:	2201      	movs	r2, #1
 80063de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063e2:	3e01      	subs	r6, #1
 80063e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80063e6:	e777      	b.n	80062d8 <_dtoa_r+0x100>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e7b8      	b.n	800635e <_dtoa_r+0x186>
 80063ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80063ee:	e7b7      	b.n	8006360 <_dtoa_r+0x188>
 80063f0:	427b      	negs	r3, r7
 80063f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80063f4:	2300      	movs	r3, #0
 80063f6:	eba8 0807 	sub.w	r8, r8, r7
 80063fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063fc:	e7c4      	b.n	8006388 <_dtoa_r+0x1b0>
 80063fe:	2300      	movs	r3, #0
 8006400:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006404:	2b00      	cmp	r3, #0
 8006406:	dc35      	bgt.n	8006474 <_dtoa_r+0x29c>
 8006408:	2301      	movs	r3, #1
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	9307      	str	r3, [sp, #28]
 800640e:	461a      	mov	r2, r3
 8006410:	920e      	str	r2, [sp, #56]	@ 0x38
 8006412:	e00b      	b.n	800642c <_dtoa_r+0x254>
 8006414:	2301      	movs	r3, #1
 8006416:	e7f3      	b.n	8006400 <_dtoa_r+0x228>
 8006418:	2300      	movs	r3, #0
 800641a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800641c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	3301      	adds	r3, #1
 8006424:	2b01      	cmp	r3, #1
 8006426:	9307      	str	r3, [sp, #28]
 8006428:	bfb8      	it	lt
 800642a:	2301      	movlt	r3, #1
 800642c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006430:	2100      	movs	r1, #0
 8006432:	2204      	movs	r2, #4
 8006434:	f102 0514 	add.w	r5, r2, #20
 8006438:	429d      	cmp	r5, r3
 800643a:	d91f      	bls.n	800647c <_dtoa_r+0x2a4>
 800643c:	6041      	str	r1, [r0, #4]
 800643e:	4658      	mov	r0, fp
 8006440:	f000 fd8e 	bl	8006f60 <_Balloc>
 8006444:	4682      	mov	sl, r0
 8006446:	2800      	cmp	r0, #0
 8006448:	d13c      	bne.n	80064c4 <_dtoa_r+0x2ec>
 800644a:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <_dtoa_r+0x2e0>)
 800644c:	4602      	mov	r2, r0
 800644e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006452:	e6d8      	b.n	8006206 <_dtoa_r+0x2e>
 8006454:	2301      	movs	r3, #1
 8006456:	e7e0      	b.n	800641a <_dtoa_r+0x242>
 8006458:	2401      	movs	r4, #1
 800645a:	2300      	movs	r3, #0
 800645c:	9309      	str	r3, [sp, #36]	@ 0x24
 800645e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006460:	f04f 33ff 	mov.w	r3, #4294967295
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	9307      	str	r3, [sp, #28]
 8006468:	2200      	movs	r2, #0
 800646a:	2312      	movs	r3, #18
 800646c:	e7d0      	b.n	8006410 <_dtoa_r+0x238>
 800646e:	2301      	movs	r3, #1
 8006470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006472:	e7f5      	b.n	8006460 <_dtoa_r+0x288>
 8006474:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	9307      	str	r3, [sp, #28]
 800647a:	e7d7      	b.n	800642c <_dtoa_r+0x254>
 800647c:	3101      	adds	r1, #1
 800647e:	0052      	lsls	r2, r2, #1
 8006480:	e7d8      	b.n	8006434 <_dtoa_r+0x25c>
 8006482:	bf00      	nop
 8006484:	f3af 8000 	nop.w
 8006488:	636f4361 	.word	0x636f4361
 800648c:	3fd287a7 	.word	0x3fd287a7
 8006490:	8b60c8b3 	.word	0x8b60c8b3
 8006494:	3fc68a28 	.word	0x3fc68a28
 8006498:	509f79fb 	.word	0x509f79fb
 800649c:	3fd34413 	.word	0x3fd34413
 80064a0:	08008221 	.word	0x08008221
 80064a4:	08008238 	.word	0x08008238
 80064a8:	7ff00000 	.word	0x7ff00000
 80064ac:	080081f1 	.word	0x080081f1
 80064b0:	3ff80000 	.word	0x3ff80000
 80064b4:	08008330 	.word	0x08008330
 80064b8:	08008290 	.word	0x08008290
 80064bc:	0800821d 	.word	0x0800821d
 80064c0:	080081f0 	.word	0x080081f0
 80064c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	2b0e      	cmp	r3, #14
 80064ce:	f200 80a4 	bhi.w	800661a <_dtoa_r+0x442>
 80064d2:	2c00      	cmp	r4, #0
 80064d4:	f000 80a1 	beq.w	800661a <_dtoa_r+0x442>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	dd33      	ble.n	8006544 <_dtoa_r+0x36c>
 80064dc:	4bad      	ldr	r3, [pc, #692]	@ (8006794 <_dtoa_r+0x5bc>)
 80064de:	f007 020f 	and.w	r2, r7, #15
 80064e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064e6:	ed93 7b00 	vldr	d7, [r3]
 80064ea:	05f8      	lsls	r0, r7, #23
 80064ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064f4:	d516      	bpl.n	8006524 <_dtoa_r+0x34c>
 80064f6:	4ba8      	ldr	r3, [pc, #672]	@ (8006798 <_dtoa_r+0x5c0>)
 80064f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006500:	f7fa f9a4 	bl	800084c <__aeabi_ddiv>
 8006504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006508:	f004 040f 	and.w	r4, r4, #15
 800650c:	2603      	movs	r6, #3
 800650e:	4da2      	ldr	r5, [pc, #648]	@ (8006798 <_dtoa_r+0x5c0>)
 8006510:	b954      	cbnz	r4, 8006528 <_dtoa_r+0x350>
 8006512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800651a:	f7fa f997 	bl	800084c <__aeabi_ddiv>
 800651e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006522:	e028      	b.n	8006576 <_dtoa_r+0x39e>
 8006524:	2602      	movs	r6, #2
 8006526:	e7f2      	b.n	800650e <_dtoa_r+0x336>
 8006528:	07e1      	lsls	r1, r4, #31
 800652a:	d508      	bpl.n	800653e <_dtoa_r+0x366>
 800652c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006530:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006534:	f7fa f860 	bl	80005f8 <__aeabi_dmul>
 8006538:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653c:	3601      	adds	r6, #1
 800653e:	1064      	asrs	r4, r4, #1
 8006540:	3508      	adds	r5, #8
 8006542:	e7e5      	b.n	8006510 <_dtoa_r+0x338>
 8006544:	f000 80d2 	beq.w	80066ec <_dtoa_r+0x514>
 8006548:	427c      	negs	r4, r7
 800654a:	4b92      	ldr	r3, [pc, #584]	@ (8006794 <_dtoa_r+0x5bc>)
 800654c:	4d92      	ldr	r5, [pc, #584]	@ (8006798 <_dtoa_r+0x5c0>)
 800654e:	f004 020f 	and.w	r2, r4, #15
 8006552:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800655e:	f7fa f84b 	bl	80005f8 <__aeabi_dmul>
 8006562:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006566:	1124      	asrs	r4, r4, #4
 8006568:	2300      	movs	r3, #0
 800656a:	2602      	movs	r6, #2
 800656c:	2c00      	cmp	r4, #0
 800656e:	f040 80b2 	bne.w	80066d6 <_dtoa_r+0x4fe>
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1d3      	bne.n	800651e <_dtoa_r+0x346>
 8006576:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006578:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 80b7 	beq.w	80066f0 <_dtoa_r+0x518>
 8006582:	4b86      	ldr	r3, [pc, #536]	@ (800679c <_dtoa_r+0x5c4>)
 8006584:	2200      	movs	r2, #0
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa faa7 	bl	8000adc <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	f000 80ae 	beq.w	80066f0 <_dtoa_r+0x518>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 80aa 	beq.w	80066f0 <_dtoa_r+0x518>
 800659c:	9b00      	ldr	r3, [sp, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd37      	ble.n	8006612 <_dtoa_r+0x43a>
 80065a2:	1e7b      	subs	r3, r7, #1
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	4620      	mov	r0, r4
 80065a8:	4b7d      	ldr	r3, [pc, #500]	@ (80067a0 <_dtoa_r+0x5c8>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	4629      	mov	r1, r5
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065b6:	9c00      	ldr	r4, [sp, #0]
 80065b8:	3601      	adds	r6, #1
 80065ba:	4630      	mov	r0, r6
 80065bc:	f7f9 ffb2 	bl	8000524 <__aeabi_i2d>
 80065c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c4:	f7fa f818 	bl	80005f8 <__aeabi_dmul>
 80065c8:	4b76      	ldr	r3, [pc, #472]	@ (80067a4 <_dtoa_r+0x5cc>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	4605      	mov	r5, r0
 80065d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065d6:	2c00      	cmp	r4, #0
 80065d8:	f040 808d 	bne.w	80066f6 <_dtoa_r+0x51e>
 80065dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e0:	4b71      	ldr	r3, [pc, #452]	@ (80067a8 <_dtoa_r+0x5d0>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	f7f9 fe50 	bl	8000288 <__aeabi_dsub>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065f0:	462a      	mov	r2, r5
 80065f2:	4633      	mov	r3, r6
 80065f4:	f7fa fa90 	bl	8000b18 <__aeabi_dcmpgt>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	f040 828b 	bne.w	8006b14 <_dtoa_r+0x93c>
 80065fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006602:	462a      	mov	r2, r5
 8006604:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006608:	f7fa fa68 	bl	8000adc <__aeabi_dcmplt>
 800660c:	2800      	cmp	r0, #0
 800660e:	f040 8128 	bne.w	8006862 <_dtoa_r+0x68a>
 8006612:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006616:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800661a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800661c:	2b00      	cmp	r3, #0
 800661e:	f2c0 815a 	blt.w	80068d6 <_dtoa_r+0x6fe>
 8006622:	2f0e      	cmp	r7, #14
 8006624:	f300 8157 	bgt.w	80068d6 <_dtoa_r+0x6fe>
 8006628:	4b5a      	ldr	r3, [pc, #360]	@ (8006794 <_dtoa_r+0x5bc>)
 800662a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800662e:	ed93 7b00 	vldr	d7, [r3]
 8006632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006634:	2b00      	cmp	r3, #0
 8006636:	ed8d 7b00 	vstr	d7, [sp]
 800663a:	da03      	bge.n	8006644 <_dtoa_r+0x46c>
 800663c:	9b07      	ldr	r3, [sp, #28]
 800663e:	2b00      	cmp	r3, #0
 8006640:	f340 8101 	ble.w	8006846 <_dtoa_r+0x66e>
 8006644:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006648:	4656      	mov	r6, sl
 800664a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f8fb 	bl	800084c <__aeabi_ddiv>
 8006656:	f7fa fa7f 	bl	8000b58 <__aeabi_d2iz>
 800665a:	4680      	mov	r8, r0
 800665c:	f7f9 ff62 	bl	8000524 <__aeabi_i2d>
 8006660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006664:	f7f9 ffc8 	bl	80005f8 <__aeabi_dmul>
 8006668:	4602      	mov	r2, r0
 800666a:	460b      	mov	r3, r1
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	f806 4b01 	strb.w	r4, [r6], #1
 800667c:	9d07      	ldr	r5, [sp, #28]
 800667e:	eba6 040a 	sub.w	r4, r6, sl
 8006682:	42a5      	cmp	r5, r4
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	f040 8117 	bne.w	80068ba <_dtoa_r+0x6e2>
 800668c:	f7f9 fdfe 	bl	800028c <__adddf3>
 8006690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006694:	4604      	mov	r4, r0
 8006696:	460d      	mov	r5, r1
 8006698:	f7fa fa3e 	bl	8000b18 <__aeabi_dcmpgt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80f9 	bne.w	8006894 <_dtoa_r+0x6bc>
 80066a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066a6:	4620      	mov	r0, r4
 80066a8:	4629      	mov	r1, r5
 80066aa:	f7fa fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ae:	b118      	cbz	r0, 80066b8 <_dtoa_r+0x4e0>
 80066b0:	f018 0f01 	tst.w	r8, #1
 80066b4:	f040 80ee 	bne.w	8006894 <_dtoa_r+0x6bc>
 80066b8:	4649      	mov	r1, r9
 80066ba:	4658      	mov	r0, fp
 80066bc:	f000 fc90 	bl	8006fe0 <_Bfree>
 80066c0:	2300      	movs	r3, #0
 80066c2:	7033      	strb	r3, [r6, #0]
 80066c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80066c6:	3701      	adds	r7, #1
 80066c8:	601f      	str	r7, [r3, #0]
 80066ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 831d 	beq.w	8006d0c <_dtoa_r+0xb34>
 80066d2:	601e      	str	r6, [r3, #0]
 80066d4:	e31a      	b.n	8006d0c <_dtoa_r+0xb34>
 80066d6:	07e2      	lsls	r2, r4, #31
 80066d8:	d505      	bpl.n	80066e6 <_dtoa_r+0x50e>
 80066da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066de:	f7f9 ff8b 	bl	80005f8 <__aeabi_dmul>
 80066e2:	3601      	adds	r6, #1
 80066e4:	2301      	movs	r3, #1
 80066e6:	1064      	asrs	r4, r4, #1
 80066e8:	3508      	adds	r5, #8
 80066ea:	e73f      	b.n	800656c <_dtoa_r+0x394>
 80066ec:	2602      	movs	r6, #2
 80066ee:	e742      	b.n	8006576 <_dtoa_r+0x39e>
 80066f0:	9c07      	ldr	r4, [sp, #28]
 80066f2:	9704      	str	r7, [sp, #16]
 80066f4:	e761      	b.n	80065ba <_dtoa_r+0x3e2>
 80066f6:	4b27      	ldr	r3, [pc, #156]	@ (8006794 <_dtoa_r+0x5bc>)
 80066f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006702:	4454      	add	r4, sl
 8006704:	2900      	cmp	r1, #0
 8006706:	d053      	beq.n	80067b0 <_dtoa_r+0x5d8>
 8006708:	4928      	ldr	r1, [pc, #160]	@ (80067ac <_dtoa_r+0x5d4>)
 800670a:	2000      	movs	r0, #0
 800670c:	f7fa f89e 	bl	800084c <__aeabi_ddiv>
 8006710:	4633      	mov	r3, r6
 8006712:	462a      	mov	r2, r5
 8006714:	f7f9 fdb8 	bl	8000288 <__aeabi_dsub>
 8006718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800671c:	4656      	mov	r6, sl
 800671e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006722:	f7fa fa19 	bl	8000b58 <__aeabi_d2iz>
 8006726:	4605      	mov	r5, r0
 8006728:	f7f9 fefc 	bl	8000524 <__aeabi_i2d>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006734:	f7f9 fda8 	bl	8000288 <__aeabi_dsub>
 8006738:	3530      	adds	r5, #48	@ 0x30
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006742:	f806 5b01 	strb.w	r5, [r6], #1
 8006746:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800674a:	f7fa f9c7 	bl	8000adc <__aeabi_dcmplt>
 800674e:	2800      	cmp	r0, #0
 8006750:	d171      	bne.n	8006836 <_dtoa_r+0x65e>
 8006752:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006756:	4911      	ldr	r1, [pc, #68]	@ (800679c <_dtoa_r+0x5c4>)
 8006758:	2000      	movs	r0, #0
 800675a:	f7f9 fd95 	bl	8000288 <__aeabi_dsub>
 800675e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8095 	bne.w	8006896 <_dtoa_r+0x6be>
 800676c:	42a6      	cmp	r6, r4
 800676e:	f43f af50 	beq.w	8006612 <_dtoa_r+0x43a>
 8006772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006776:	4b0a      	ldr	r3, [pc, #40]	@ (80067a0 <_dtoa_r+0x5c8>)
 8006778:	2200      	movs	r2, #0
 800677a:	f7f9 ff3d 	bl	80005f8 <__aeabi_dmul>
 800677e:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <_dtoa_r+0x5c8>)
 8006780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006784:	2200      	movs	r2, #0
 8006786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678a:	f7f9 ff35 	bl	80005f8 <__aeabi_dmul>
 800678e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006792:	e7c4      	b.n	800671e <_dtoa_r+0x546>
 8006794:	08008330 	.word	0x08008330
 8006798:	08008308 	.word	0x08008308
 800679c:	3ff00000 	.word	0x3ff00000
 80067a0:	40240000 	.word	0x40240000
 80067a4:	401c0000 	.word	0x401c0000
 80067a8:	40140000 	.word	0x40140000
 80067ac:	3fe00000 	.word	0x3fe00000
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	f7f9 ff20 	bl	80005f8 <__aeabi_dmul>
 80067b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80067be:	4656      	mov	r6, sl
 80067c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c4:	f7fa f9c8 	bl	8000b58 <__aeabi_d2iz>
 80067c8:	4605      	mov	r5, r0
 80067ca:	f7f9 feab 	bl	8000524 <__aeabi_i2d>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d6:	f7f9 fd57 	bl	8000288 <__aeabi_dsub>
 80067da:	3530      	adds	r5, #48	@ 0x30
 80067dc:	f806 5b01 	strb.w	r5, [r6], #1
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	42a6      	cmp	r6, r4
 80067e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067ea:	f04f 0200 	mov.w	r2, #0
 80067ee:	d124      	bne.n	800683a <_dtoa_r+0x662>
 80067f0:	4bac      	ldr	r3, [pc, #688]	@ (8006aa4 <_dtoa_r+0x8cc>)
 80067f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067f6:	f7f9 fd49 	bl	800028c <__adddf3>
 80067fa:	4602      	mov	r2, r0
 80067fc:	460b      	mov	r3, r1
 80067fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006802:	f7fa f989 	bl	8000b18 <__aeabi_dcmpgt>
 8006806:	2800      	cmp	r0, #0
 8006808:	d145      	bne.n	8006896 <_dtoa_r+0x6be>
 800680a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800680e:	49a5      	ldr	r1, [pc, #660]	@ (8006aa4 <_dtoa_r+0x8cc>)
 8006810:	2000      	movs	r0, #0
 8006812:	f7f9 fd39 	bl	8000288 <__aeabi_dsub>
 8006816:	4602      	mov	r2, r0
 8006818:	460b      	mov	r3, r1
 800681a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800681e:	f7fa f95d 	bl	8000adc <__aeabi_dcmplt>
 8006822:	2800      	cmp	r0, #0
 8006824:	f43f aef5 	beq.w	8006612 <_dtoa_r+0x43a>
 8006828:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800682a:	1e73      	subs	r3, r6, #1
 800682c:	9315      	str	r3, [sp, #84]	@ 0x54
 800682e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006832:	2b30      	cmp	r3, #48	@ 0x30
 8006834:	d0f8      	beq.n	8006828 <_dtoa_r+0x650>
 8006836:	9f04      	ldr	r7, [sp, #16]
 8006838:	e73e      	b.n	80066b8 <_dtoa_r+0x4e0>
 800683a:	4b9b      	ldr	r3, [pc, #620]	@ (8006aa8 <_dtoa_r+0x8d0>)
 800683c:	f7f9 fedc 	bl	80005f8 <__aeabi_dmul>
 8006840:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006844:	e7bc      	b.n	80067c0 <_dtoa_r+0x5e8>
 8006846:	d10c      	bne.n	8006862 <_dtoa_r+0x68a>
 8006848:	4b98      	ldr	r3, [pc, #608]	@ (8006aac <_dtoa_r+0x8d4>)
 800684a:	2200      	movs	r2, #0
 800684c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006850:	f7f9 fed2 	bl	80005f8 <__aeabi_dmul>
 8006854:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006858:	f7fa f954 	bl	8000b04 <__aeabi_dcmpge>
 800685c:	2800      	cmp	r0, #0
 800685e:	f000 8157 	beq.w	8006b10 <_dtoa_r+0x938>
 8006862:	2400      	movs	r4, #0
 8006864:	4625      	mov	r5, r4
 8006866:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006868:	43db      	mvns	r3, r3
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	4656      	mov	r6, sl
 800686e:	2700      	movs	r7, #0
 8006870:	4621      	mov	r1, r4
 8006872:	4658      	mov	r0, fp
 8006874:	f000 fbb4 	bl	8006fe0 <_Bfree>
 8006878:	2d00      	cmp	r5, #0
 800687a:	d0dc      	beq.n	8006836 <_dtoa_r+0x65e>
 800687c:	b12f      	cbz	r7, 800688a <_dtoa_r+0x6b2>
 800687e:	42af      	cmp	r7, r5
 8006880:	d003      	beq.n	800688a <_dtoa_r+0x6b2>
 8006882:	4639      	mov	r1, r7
 8006884:	4658      	mov	r0, fp
 8006886:	f000 fbab 	bl	8006fe0 <_Bfree>
 800688a:	4629      	mov	r1, r5
 800688c:	4658      	mov	r0, fp
 800688e:	f000 fba7 	bl	8006fe0 <_Bfree>
 8006892:	e7d0      	b.n	8006836 <_dtoa_r+0x65e>
 8006894:	9704      	str	r7, [sp, #16]
 8006896:	4633      	mov	r3, r6
 8006898:	461e      	mov	r6, r3
 800689a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800689e:	2a39      	cmp	r2, #57	@ 0x39
 80068a0:	d107      	bne.n	80068b2 <_dtoa_r+0x6da>
 80068a2:	459a      	cmp	sl, r3
 80068a4:	d1f8      	bne.n	8006898 <_dtoa_r+0x6c0>
 80068a6:	9a04      	ldr	r2, [sp, #16]
 80068a8:	3201      	adds	r2, #1
 80068aa:	9204      	str	r2, [sp, #16]
 80068ac:	2230      	movs	r2, #48	@ 0x30
 80068ae:	f88a 2000 	strb.w	r2, [sl]
 80068b2:	781a      	ldrb	r2, [r3, #0]
 80068b4:	3201      	adds	r2, #1
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e7bd      	b.n	8006836 <_dtoa_r+0x65e>
 80068ba:	4b7b      	ldr	r3, [pc, #492]	@ (8006aa8 <_dtoa_r+0x8d0>)
 80068bc:	2200      	movs	r2, #0
 80068be:	f7f9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80068c2:	2200      	movs	r2, #0
 80068c4:	2300      	movs	r3, #0
 80068c6:	4604      	mov	r4, r0
 80068c8:	460d      	mov	r5, r1
 80068ca:	f7fa f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80068ce:	2800      	cmp	r0, #0
 80068d0:	f43f aebb 	beq.w	800664a <_dtoa_r+0x472>
 80068d4:	e6f0      	b.n	80066b8 <_dtoa_r+0x4e0>
 80068d6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068d8:	2a00      	cmp	r2, #0
 80068da:	f000 80db 	beq.w	8006a94 <_dtoa_r+0x8bc>
 80068de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068e0:	2a01      	cmp	r2, #1
 80068e2:	f300 80bf 	bgt.w	8006a64 <_dtoa_r+0x88c>
 80068e6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	f000 80b7 	beq.w	8006a5c <_dtoa_r+0x884>
 80068ee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068f2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068f4:	4646      	mov	r6, r8
 80068f6:	9a08      	ldr	r2, [sp, #32]
 80068f8:	2101      	movs	r1, #1
 80068fa:	441a      	add	r2, r3
 80068fc:	4658      	mov	r0, fp
 80068fe:	4498      	add	r8, r3
 8006900:	9208      	str	r2, [sp, #32]
 8006902:	f000 fc21 	bl	8007148 <__i2b>
 8006906:	4605      	mov	r5, r0
 8006908:	b15e      	cbz	r6, 8006922 <_dtoa_r+0x74a>
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	dd08      	ble.n	8006922 <_dtoa_r+0x74a>
 8006910:	42b3      	cmp	r3, r6
 8006912:	9a08      	ldr	r2, [sp, #32]
 8006914:	bfa8      	it	ge
 8006916:	4633      	movge	r3, r6
 8006918:	eba8 0803 	sub.w	r8, r8, r3
 800691c:	1af6      	subs	r6, r6, r3
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	9308      	str	r3, [sp, #32]
 8006922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006924:	b1f3      	cbz	r3, 8006964 <_dtoa_r+0x78c>
 8006926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80b7 	beq.w	8006a9c <_dtoa_r+0x8c4>
 800692e:	b18c      	cbz	r4, 8006954 <_dtoa_r+0x77c>
 8006930:	4629      	mov	r1, r5
 8006932:	4622      	mov	r2, r4
 8006934:	4658      	mov	r0, fp
 8006936:	f000 fcc7 	bl	80072c8 <__pow5mult>
 800693a:	464a      	mov	r2, r9
 800693c:	4601      	mov	r1, r0
 800693e:	4605      	mov	r5, r0
 8006940:	4658      	mov	r0, fp
 8006942:	f000 fc17 	bl	8007174 <__multiply>
 8006946:	4649      	mov	r1, r9
 8006948:	9004      	str	r0, [sp, #16]
 800694a:	4658      	mov	r0, fp
 800694c:	f000 fb48 	bl	8006fe0 <_Bfree>
 8006950:	9b04      	ldr	r3, [sp, #16]
 8006952:	4699      	mov	r9, r3
 8006954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006956:	1b1a      	subs	r2, r3, r4
 8006958:	d004      	beq.n	8006964 <_dtoa_r+0x78c>
 800695a:	4649      	mov	r1, r9
 800695c:	4658      	mov	r0, fp
 800695e:	f000 fcb3 	bl	80072c8 <__pow5mult>
 8006962:	4681      	mov	r9, r0
 8006964:	2101      	movs	r1, #1
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fbee 	bl	8007148 <__i2b>
 800696c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800696e:	4604      	mov	r4, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 81cf 	beq.w	8006d14 <_dtoa_r+0xb3c>
 8006976:	461a      	mov	r2, r3
 8006978:	4601      	mov	r1, r0
 800697a:	4658      	mov	r0, fp
 800697c:	f000 fca4 	bl	80072c8 <__pow5mult>
 8006980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006982:	2b01      	cmp	r3, #1
 8006984:	4604      	mov	r4, r0
 8006986:	f300 8095 	bgt.w	8006ab4 <_dtoa_r+0x8dc>
 800698a:	9b02      	ldr	r3, [sp, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8087 	bne.w	8006aa0 <_dtoa_r+0x8c8>
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 8089 	bne.w	8006ab0 <_dtoa_r+0x8d8>
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069a4:	0d1b      	lsrs	r3, r3, #20
 80069a6:	051b      	lsls	r3, r3, #20
 80069a8:	b12b      	cbz	r3, 80069b6 <_dtoa_r+0x7de>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	3301      	adds	r3, #1
 80069ae:	9308      	str	r3, [sp, #32]
 80069b0:	f108 0801 	add.w	r8, r8, #1
 80069b4:	2301      	movs	r3, #1
 80069b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 81b0 	beq.w	8006d20 <_dtoa_r+0xb48>
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069c6:	6918      	ldr	r0, [r3, #16]
 80069c8:	f000 fb72 	bl	80070b0 <__hi0bits>
 80069cc:	f1c0 0020 	rsb	r0, r0, #32
 80069d0:	9b08      	ldr	r3, [sp, #32]
 80069d2:	4418      	add	r0, r3
 80069d4:	f010 001f 	ands.w	r0, r0, #31
 80069d8:	d077      	beq.n	8006aca <_dtoa_r+0x8f2>
 80069da:	f1c0 0320 	rsb	r3, r0, #32
 80069de:	2b04      	cmp	r3, #4
 80069e0:	dd6b      	ble.n	8006aba <_dtoa_r+0x8e2>
 80069e2:	9b08      	ldr	r3, [sp, #32]
 80069e4:	f1c0 001c 	rsb	r0, r0, #28
 80069e8:	4403      	add	r3, r0
 80069ea:	4480      	add	r8, r0
 80069ec:	4406      	add	r6, r0
 80069ee:	9308      	str	r3, [sp, #32]
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	dd05      	ble.n	8006a02 <_dtoa_r+0x82a>
 80069f6:	4649      	mov	r1, r9
 80069f8:	4642      	mov	r2, r8
 80069fa:	4658      	mov	r0, fp
 80069fc:	f000 fcbe 	bl	800737c <__lshift>
 8006a00:	4681      	mov	r9, r0
 8006a02:	9b08      	ldr	r3, [sp, #32]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	dd05      	ble.n	8006a14 <_dtoa_r+0x83c>
 8006a08:	4621      	mov	r1, r4
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	4658      	mov	r0, fp
 8006a0e:	f000 fcb5 	bl	800737c <__lshift>
 8006a12:	4604      	mov	r4, r0
 8006a14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d059      	beq.n	8006ace <_dtoa_r+0x8f6>
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4648      	mov	r0, r9
 8006a1e:	f000 fd19 	bl	8007454 <__mcmp>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	da53      	bge.n	8006ace <_dtoa_r+0x8f6>
 8006a26:	1e7b      	subs	r3, r7, #1
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	220a      	movs	r2, #10
 8006a30:	4658      	mov	r0, fp
 8006a32:	f000 faf7 	bl	8007024 <__multadd>
 8006a36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a38:	4681      	mov	r9, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8172 	beq.w	8006d24 <_dtoa_r+0xb4c>
 8006a40:	2300      	movs	r3, #0
 8006a42:	4629      	mov	r1, r5
 8006a44:	220a      	movs	r2, #10
 8006a46:	4658      	mov	r0, fp
 8006a48:	f000 faec 	bl	8007024 <__multadd>
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	4605      	mov	r5, r0
 8006a52:	dc67      	bgt.n	8006b24 <_dtoa_r+0x94c>
 8006a54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	dc41      	bgt.n	8006ade <_dtoa_r+0x906>
 8006a5a:	e063      	b.n	8006b24 <_dtoa_r+0x94c>
 8006a5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a62:	e746      	b.n	80068f2 <_dtoa_r+0x71a>
 8006a64:	9b07      	ldr	r3, [sp, #28]
 8006a66:	1e5c      	subs	r4, r3, #1
 8006a68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	bfbf      	itttt	lt
 8006a6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a74:	1ae3      	sublt	r3, r4, r3
 8006a76:	bfb4      	ite	lt
 8006a78:	18d2      	addlt	r2, r2, r3
 8006a7a:	1b1c      	subge	r4, r3, r4
 8006a7c:	9b07      	ldr	r3, [sp, #28]
 8006a7e:	bfbc      	itt	lt
 8006a80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a82:	2400      	movlt	r4, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bfb5      	itete	lt
 8006a88:	eba8 0603 	sublt.w	r6, r8, r3
 8006a8c:	9b07      	ldrge	r3, [sp, #28]
 8006a8e:	2300      	movlt	r3, #0
 8006a90:	4646      	movge	r6, r8
 8006a92:	e730      	b.n	80068f6 <_dtoa_r+0x71e>
 8006a94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a98:	4646      	mov	r6, r8
 8006a9a:	e735      	b.n	8006908 <_dtoa_r+0x730>
 8006a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a9e:	e75c      	b.n	800695a <_dtoa_r+0x782>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e788      	b.n	80069b6 <_dtoa_r+0x7de>
 8006aa4:	3fe00000 	.word	0x3fe00000
 8006aa8:	40240000 	.word	0x40240000
 8006aac:	40140000 	.word	0x40140000
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	e780      	b.n	80069b6 <_dtoa_r+0x7de>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ab8:	e782      	b.n	80069c0 <_dtoa_r+0x7e8>
 8006aba:	d099      	beq.n	80069f0 <_dtoa_r+0x818>
 8006abc:	9a08      	ldr	r2, [sp, #32]
 8006abe:	331c      	adds	r3, #28
 8006ac0:	441a      	add	r2, r3
 8006ac2:	4498      	add	r8, r3
 8006ac4:	441e      	add	r6, r3
 8006ac6:	9208      	str	r2, [sp, #32]
 8006ac8:	e792      	b.n	80069f0 <_dtoa_r+0x818>
 8006aca:	4603      	mov	r3, r0
 8006acc:	e7f6      	b.n	8006abc <_dtoa_r+0x8e4>
 8006ace:	9b07      	ldr	r3, [sp, #28]
 8006ad0:	9704      	str	r7, [sp, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc20      	bgt.n	8006b18 <_dtoa_r+0x940>
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	dd1e      	ble.n	8006b1c <_dtoa_r+0x944>
 8006ade:	9b00      	ldr	r3, [sp, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f47f aec0 	bne.w	8006866 <_dtoa_r+0x68e>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	2205      	movs	r2, #5
 8006aea:	4658      	mov	r0, fp
 8006aec:	f000 fa9a 	bl	8007024 <__multadd>
 8006af0:	4601      	mov	r1, r0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fcad 	bl	8007454 <__mcmp>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f77f aeb3 	ble.w	8006866 <_dtoa_r+0x68e>
 8006b00:	4656      	mov	r6, sl
 8006b02:	2331      	movs	r3, #49	@ 0x31
 8006b04:	f806 3b01 	strb.w	r3, [r6], #1
 8006b08:	9b04      	ldr	r3, [sp, #16]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	e6ae      	b.n	800686e <_dtoa_r+0x696>
 8006b10:	9c07      	ldr	r4, [sp, #28]
 8006b12:	9704      	str	r7, [sp, #16]
 8006b14:	4625      	mov	r5, r4
 8006b16:	e7f3      	b.n	8006b00 <_dtoa_r+0x928>
 8006b18:	9b07      	ldr	r3, [sp, #28]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8104 	beq.w	8006d2c <_dtoa_r+0xb54>
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	dd05      	ble.n	8006b34 <_dtoa_r+0x95c>
 8006b28:	4629      	mov	r1, r5
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fc25 	bl	800737c <__lshift>
 8006b32:	4605      	mov	r5, r0
 8006b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d05a      	beq.n	8006bf0 <_dtoa_r+0xa18>
 8006b3a:	6869      	ldr	r1, [r5, #4]
 8006b3c:	4658      	mov	r0, fp
 8006b3e:	f000 fa0f 	bl	8006f60 <_Balloc>
 8006b42:	4606      	mov	r6, r0
 8006b44:	b928      	cbnz	r0, 8006b52 <_dtoa_r+0x97a>
 8006b46:	4b84      	ldr	r3, [pc, #528]	@ (8006d58 <_dtoa_r+0xb80>)
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b4e:	f7ff bb5a 	b.w	8006206 <_dtoa_r+0x2e>
 8006b52:	692a      	ldr	r2, [r5, #16]
 8006b54:	3202      	adds	r2, #2
 8006b56:	0092      	lsls	r2, r2, #2
 8006b58:	f105 010c 	add.w	r1, r5, #12
 8006b5c:	300c      	adds	r0, #12
 8006b5e:	f000 ffaf 	bl	8007ac0 <memcpy>
 8006b62:	2201      	movs	r2, #1
 8006b64:	4631      	mov	r1, r6
 8006b66:	4658      	mov	r0, fp
 8006b68:	f000 fc08 	bl	800737c <__lshift>
 8006b6c:	f10a 0301 	add.w	r3, sl, #1
 8006b70:	9307      	str	r3, [sp, #28]
 8006b72:	9b00      	ldr	r3, [sp, #0]
 8006b74:	4453      	add	r3, sl
 8006b76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b78:	9b02      	ldr	r3, [sp, #8]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	462f      	mov	r7, r5
 8006b80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b82:	4605      	mov	r5, r0
 8006b84:	9b07      	ldr	r3, [sp, #28]
 8006b86:	4621      	mov	r1, r4
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	4648      	mov	r0, r9
 8006b8c:	9300      	str	r3, [sp, #0]
 8006b8e:	f7ff fa9a 	bl	80060c6 <quorem>
 8006b92:	4639      	mov	r1, r7
 8006b94:	9002      	str	r0, [sp, #8]
 8006b96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b9a:	4648      	mov	r0, r9
 8006b9c:	f000 fc5a 	bl	8007454 <__mcmp>
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	9008      	str	r0, [sp, #32]
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4658      	mov	r0, fp
 8006ba8:	f000 fc70 	bl	800748c <__mdiff>
 8006bac:	68c2      	ldr	r2, [r0, #12]
 8006bae:	4606      	mov	r6, r0
 8006bb0:	bb02      	cbnz	r2, 8006bf4 <_dtoa_r+0xa1c>
 8006bb2:	4601      	mov	r1, r0
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	f000 fc4d 	bl	8007454 <__mcmp>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4631      	mov	r1, r6
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bc2:	f000 fa0d 	bl	8006fe0 <_Bfree>
 8006bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bca:	9e07      	ldr	r6, [sp, #28]
 8006bcc:	ea43 0102 	orr.w	r1, r3, r2
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd2:	4319      	orrs	r1, r3
 8006bd4:	d110      	bne.n	8006bf8 <_dtoa_r+0xa20>
 8006bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bda:	d029      	beq.n	8006c30 <_dtoa_r+0xa58>
 8006bdc:	9b08      	ldr	r3, [sp, #32]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	dd02      	ble.n	8006be8 <_dtoa_r+0xa10>
 8006be2:	9b02      	ldr	r3, [sp, #8]
 8006be4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	f883 8000 	strb.w	r8, [r3]
 8006bee:	e63f      	b.n	8006870 <_dtoa_r+0x698>
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	e7bb      	b.n	8006b6c <_dtoa_r+0x994>
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	e7e1      	b.n	8006bbc <_dtoa_r+0x9e4>
 8006bf8:	9b08      	ldr	r3, [sp, #32]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db04      	blt.n	8006c08 <_dtoa_r+0xa30>
 8006bfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c00:	430b      	orrs	r3, r1
 8006c02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c04:	430b      	orrs	r3, r1
 8006c06:	d120      	bne.n	8006c4a <_dtoa_r+0xa72>
 8006c08:	2a00      	cmp	r2, #0
 8006c0a:	dded      	ble.n	8006be8 <_dtoa_r+0xa10>
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4658      	mov	r0, fp
 8006c12:	f000 fbb3 	bl	800737c <__lshift>
 8006c16:	4621      	mov	r1, r4
 8006c18:	4681      	mov	r9, r0
 8006c1a:	f000 fc1b 	bl	8007454 <__mcmp>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	dc03      	bgt.n	8006c2a <_dtoa_r+0xa52>
 8006c22:	d1e1      	bne.n	8006be8 <_dtoa_r+0xa10>
 8006c24:	f018 0f01 	tst.w	r8, #1
 8006c28:	d0de      	beq.n	8006be8 <_dtoa_r+0xa10>
 8006c2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c2e:	d1d8      	bne.n	8006be2 <_dtoa_r+0xa0a>
 8006c30:	9a00      	ldr	r2, [sp, #0]
 8006c32:	2339      	movs	r3, #57	@ 0x39
 8006c34:	7013      	strb	r3, [r2, #0]
 8006c36:	4633      	mov	r3, r6
 8006c38:	461e      	mov	r6, r3
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c40:	2a39      	cmp	r2, #57	@ 0x39
 8006c42:	d052      	beq.n	8006cea <_dtoa_r+0xb12>
 8006c44:	3201      	adds	r2, #1
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e612      	b.n	8006870 <_dtoa_r+0x698>
 8006c4a:	2a00      	cmp	r2, #0
 8006c4c:	dd07      	ble.n	8006c5e <_dtoa_r+0xa86>
 8006c4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c52:	d0ed      	beq.n	8006c30 <_dtoa_r+0xa58>
 8006c54:	9a00      	ldr	r2, [sp, #0]
 8006c56:	f108 0301 	add.w	r3, r8, #1
 8006c5a:	7013      	strb	r3, [r2, #0]
 8006c5c:	e608      	b.n	8006870 <_dtoa_r+0x698>
 8006c5e:	9b07      	ldr	r3, [sp, #28]
 8006c60:	9a07      	ldr	r2, [sp, #28]
 8006c62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d028      	beq.n	8006cbe <_dtoa_r+0xae6>
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	2300      	movs	r3, #0
 8006c70:	220a      	movs	r2, #10
 8006c72:	4658      	mov	r0, fp
 8006c74:	f000 f9d6 	bl	8007024 <__multadd>
 8006c78:	42af      	cmp	r7, r5
 8006c7a:	4681      	mov	r9, r0
 8006c7c:	f04f 0300 	mov.w	r3, #0
 8006c80:	f04f 020a 	mov.w	r2, #10
 8006c84:	4639      	mov	r1, r7
 8006c86:	4658      	mov	r0, fp
 8006c88:	d107      	bne.n	8006c9a <_dtoa_r+0xac2>
 8006c8a:	f000 f9cb 	bl	8007024 <__multadd>
 8006c8e:	4607      	mov	r7, r0
 8006c90:	4605      	mov	r5, r0
 8006c92:	9b07      	ldr	r3, [sp, #28]
 8006c94:	3301      	adds	r3, #1
 8006c96:	9307      	str	r3, [sp, #28]
 8006c98:	e774      	b.n	8006b84 <_dtoa_r+0x9ac>
 8006c9a:	f000 f9c3 	bl	8007024 <__multadd>
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4607      	mov	r7, r0
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	220a      	movs	r2, #10
 8006ca6:	4658      	mov	r0, fp
 8006ca8:	f000 f9bc 	bl	8007024 <__multadd>
 8006cac:	4605      	mov	r5, r0
 8006cae:	e7f0      	b.n	8006c92 <_dtoa_r+0xaba>
 8006cb0:	9b00      	ldr	r3, [sp, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfcc      	ite	gt
 8006cb6:	461e      	movgt	r6, r3
 8006cb8:	2601      	movle	r6, #1
 8006cba:	4456      	add	r6, sl
 8006cbc:	2700      	movs	r7, #0
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	4658      	mov	r0, fp
 8006cc4:	f000 fb5a 	bl	800737c <__lshift>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4681      	mov	r9, r0
 8006ccc:	f000 fbc2 	bl	8007454 <__mcmp>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dcb0      	bgt.n	8006c36 <_dtoa_r+0xa5e>
 8006cd4:	d102      	bne.n	8006cdc <_dtoa_r+0xb04>
 8006cd6:	f018 0f01 	tst.w	r8, #1
 8006cda:	d1ac      	bne.n	8006c36 <_dtoa_r+0xa5e>
 8006cdc:	4633      	mov	r3, r6
 8006cde:	461e      	mov	r6, r3
 8006ce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ce4:	2a30      	cmp	r2, #48	@ 0x30
 8006ce6:	d0fa      	beq.n	8006cde <_dtoa_r+0xb06>
 8006ce8:	e5c2      	b.n	8006870 <_dtoa_r+0x698>
 8006cea:	459a      	cmp	sl, r3
 8006cec:	d1a4      	bne.n	8006c38 <_dtoa_r+0xa60>
 8006cee:	9b04      	ldr	r3, [sp, #16]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	9304      	str	r3, [sp, #16]
 8006cf4:	2331      	movs	r3, #49	@ 0x31
 8006cf6:	f88a 3000 	strb.w	r3, [sl]
 8006cfa:	e5b9      	b.n	8006870 <_dtoa_r+0x698>
 8006cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cfe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d5c <_dtoa_r+0xb84>
 8006d02:	b11b      	cbz	r3, 8006d0c <_dtoa_r+0xb34>
 8006d04:	f10a 0308 	add.w	r3, sl, #8
 8006d08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	b019      	add	sp, #100	@ 0x64
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	f77f ae37 	ble.w	800698a <_dtoa_r+0x7b2>
 8006d1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d20:	2001      	movs	r0, #1
 8006d22:	e655      	b.n	80069d0 <_dtoa_r+0x7f8>
 8006d24:	9b00      	ldr	r3, [sp, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	f77f aed6 	ble.w	8006ad8 <_dtoa_r+0x900>
 8006d2c:	4656      	mov	r6, sl
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4648      	mov	r0, r9
 8006d32:	f7ff f9c8 	bl	80060c6 <quorem>
 8006d36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d3a:	f806 8b01 	strb.w	r8, [r6], #1
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	eba6 020a 	sub.w	r2, r6, sl
 8006d44:	4293      	cmp	r3, r2
 8006d46:	ddb3      	ble.n	8006cb0 <_dtoa_r+0xad8>
 8006d48:	4649      	mov	r1, r9
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	220a      	movs	r2, #10
 8006d4e:	4658      	mov	r0, fp
 8006d50:	f000 f968 	bl	8007024 <__multadd>
 8006d54:	4681      	mov	r9, r0
 8006d56:	e7ea      	b.n	8006d2e <_dtoa_r+0xb56>
 8006d58:	08008290 	.word	0x08008290
 8006d5c:	08008214 	.word	0x08008214

08006d60 <_free_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4605      	mov	r5, r0
 8006d64:	2900      	cmp	r1, #0
 8006d66:	d041      	beq.n	8006dec <_free_r+0x8c>
 8006d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d6c:	1f0c      	subs	r4, r1, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	bfb8      	it	lt
 8006d72:	18e4      	addlt	r4, r4, r3
 8006d74:	f000 f8e8 	bl	8006f48 <__malloc_lock>
 8006d78:	4a1d      	ldr	r2, [pc, #116]	@ (8006df0 <_free_r+0x90>)
 8006d7a:	6813      	ldr	r3, [r2, #0]
 8006d7c:	b933      	cbnz	r3, 8006d8c <_free_r+0x2c>
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	6014      	str	r4, [r2, #0]
 8006d82:	4628      	mov	r0, r5
 8006d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d88:	f000 b8e4 	b.w	8006f54 <__malloc_unlock>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d908      	bls.n	8006da2 <_free_r+0x42>
 8006d90:	6820      	ldr	r0, [r4, #0]
 8006d92:	1821      	adds	r1, r4, r0
 8006d94:	428b      	cmp	r3, r1
 8006d96:	bf01      	itttt	eq
 8006d98:	6819      	ldreq	r1, [r3, #0]
 8006d9a:	685b      	ldreq	r3, [r3, #4]
 8006d9c:	1809      	addeq	r1, r1, r0
 8006d9e:	6021      	streq	r1, [r4, #0]
 8006da0:	e7ed      	b.n	8006d7e <_free_r+0x1e>
 8006da2:	461a      	mov	r2, r3
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	b10b      	cbz	r3, 8006dac <_free_r+0x4c>
 8006da8:	42a3      	cmp	r3, r4
 8006daa:	d9fa      	bls.n	8006da2 <_free_r+0x42>
 8006dac:	6811      	ldr	r1, [r2, #0]
 8006dae:	1850      	adds	r0, r2, r1
 8006db0:	42a0      	cmp	r0, r4
 8006db2:	d10b      	bne.n	8006dcc <_free_r+0x6c>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	4401      	add	r1, r0
 8006db8:	1850      	adds	r0, r2, r1
 8006dba:	4283      	cmp	r3, r0
 8006dbc:	6011      	str	r1, [r2, #0]
 8006dbe:	d1e0      	bne.n	8006d82 <_free_r+0x22>
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	6053      	str	r3, [r2, #4]
 8006dc6:	4408      	add	r0, r1
 8006dc8:	6010      	str	r0, [r2, #0]
 8006dca:	e7da      	b.n	8006d82 <_free_r+0x22>
 8006dcc:	d902      	bls.n	8006dd4 <_free_r+0x74>
 8006dce:	230c      	movs	r3, #12
 8006dd0:	602b      	str	r3, [r5, #0]
 8006dd2:	e7d6      	b.n	8006d82 <_free_r+0x22>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	1821      	adds	r1, r4, r0
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	bf04      	itt	eq
 8006ddc:	6819      	ldreq	r1, [r3, #0]
 8006dde:	685b      	ldreq	r3, [r3, #4]
 8006de0:	6063      	str	r3, [r4, #4]
 8006de2:	bf04      	itt	eq
 8006de4:	1809      	addeq	r1, r1, r0
 8006de6:	6021      	streq	r1, [r4, #0]
 8006de8:	6054      	str	r4, [r2, #4]
 8006dea:	e7ca      	b.n	8006d82 <_free_r+0x22>
 8006dec:	bd38      	pop	{r3, r4, r5, pc}
 8006dee:	bf00      	nop
 8006df0:	20000468 	.word	0x20000468

08006df4 <malloc>:
 8006df4:	4b02      	ldr	r3, [pc, #8]	@ (8006e00 <malloc+0xc>)
 8006df6:	4601      	mov	r1, r0
 8006df8:	6818      	ldr	r0, [r3, #0]
 8006dfa:	f000 b825 	b.w	8006e48 <_malloc_r>
 8006dfe:	bf00      	nop
 8006e00:	20000018 	.word	0x20000018

08006e04 <sbrk_aligned>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	4e0f      	ldr	r6, [pc, #60]	@ (8006e44 <sbrk_aligned+0x40>)
 8006e08:	460c      	mov	r4, r1
 8006e0a:	6831      	ldr	r1, [r6, #0]
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b911      	cbnz	r1, 8006e16 <sbrk_aligned+0x12>
 8006e10:	f000 fe46 	bl	8007aa0 <_sbrk_r>
 8006e14:	6030      	str	r0, [r6, #0]
 8006e16:	4621      	mov	r1, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 fe41 	bl	8007aa0 <_sbrk_r>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d103      	bne.n	8006e2a <sbrk_aligned+0x26>
 8006e22:	f04f 34ff 	mov.w	r4, #4294967295
 8006e26:	4620      	mov	r0, r4
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
 8006e2a:	1cc4      	adds	r4, r0, #3
 8006e2c:	f024 0403 	bic.w	r4, r4, #3
 8006e30:	42a0      	cmp	r0, r4
 8006e32:	d0f8      	beq.n	8006e26 <sbrk_aligned+0x22>
 8006e34:	1a21      	subs	r1, r4, r0
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fe32 	bl	8007aa0 <_sbrk_r>
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d1f2      	bne.n	8006e26 <sbrk_aligned+0x22>
 8006e40:	e7ef      	b.n	8006e22 <sbrk_aligned+0x1e>
 8006e42:	bf00      	nop
 8006e44:	20000464 	.word	0x20000464

08006e48 <_malloc_r>:
 8006e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e4c:	1ccd      	adds	r5, r1, #3
 8006e4e:	f025 0503 	bic.w	r5, r5, #3
 8006e52:	3508      	adds	r5, #8
 8006e54:	2d0c      	cmp	r5, #12
 8006e56:	bf38      	it	cc
 8006e58:	250c      	movcc	r5, #12
 8006e5a:	2d00      	cmp	r5, #0
 8006e5c:	4606      	mov	r6, r0
 8006e5e:	db01      	blt.n	8006e64 <_malloc_r+0x1c>
 8006e60:	42a9      	cmp	r1, r5
 8006e62:	d904      	bls.n	8006e6e <_malloc_r+0x26>
 8006e64:	230c      	movs	r3, #12
 8006e66:	6033      	str	r3, [r6, #0]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f44 <_malloc_r+0xfc>
 8006e72:	f000 f869 	bl	8006f48 <__malloc_lock>
 8006e76:	f8d8 3000 	ldr.w	r3, [r8]
 8006e7a:	461c      	mov	r4, r3
 8006e7c:	bb44      	cbnz	r4, 8006ed0 <_malloc_r+0x88>
 8006e7e:	4629      	mov	r1, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	f7ff ffbf 	bl	8006e04 <sbrk_aligned>
 8006e86:	1c43      	adds	r3, r0, #1
 8006e88:	4604      	mov	r4, r0
 8006e8a:	d158      	bne.n	8006f3e <_malloc_r+0xf6>
 8006e8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006e90:	4627      	mov	r7, r4
 8006e92:	2f00      	cmp	r7, #0
 8006e94:	d143      	bne.n	8006f1e <_malloc_r+0xd6>
 8006e96:	2c00      	cmp	r4, #0
 8006e98:	d04b      	beq.n	8006f32 <_malloc_r+0xea>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	4639      	mov	r1, r7
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	eb04 0903 	add.w	r9, r4, r3
 8006ea4:	f000 fdfc 	bl	8007aa0 <_sbrk_r>
 8006ea8:	4581      	cmp	r9, r0
 8006eaa:	d142      	bne.n	8006f32 <_malloc_r+0xea>
 8006eac:	6821      	ldr	r1, [r4, #0]
 8006eae:	1a6d      	subs	r5, r5, r1
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ffa6 	bl	8006e04 <sbrk_aligned>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	d03a      	beq.n	8006f32 <_malloc_r+0xea>
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	442b      	add	r3, r5
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	bb62      	cbnz	r2, 8006f24 <_malloc_r+0xdc>
 8006eca:	f8c8 7000 	str.w	r7, [r8]
 8006ece:	e00f      	b.n	8006ef0 <_malloc_r+0xa8>
 8006ed0:	6822      	ldr	r2, [r4, #0]
 8006ed2:	1b52      	subs	r2, r2, r5
 8006ed4:	d420      	bmi.n	8006f18 <_malloc_r+0xd0>
 8006ed6:	2a0b      	cmp	r2, #11
 8006ed8:	d917      	bls.n	8006f0a <_malloc_r+0xc2>
 8006eda:	1961      	adds	r1, r4, r5
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	6025      	str	r5, [r4, #0]
 8006ee0:	bf18      	it	ne
 8006ee2:	6059      	strne	r1, [r3, #4]
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	bf08      	it	eq
 8006ee8:	f8c8 1000 	streq.w	r1, [r8]
 8006eec:	5162      	str	r2, [r4, r5]
 8006eee:	604b      	str	r3, [r1, #4]
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	f000 f82f 	bl	8006f54 <__malloc_unlock>
 8006ef6:	f104 000b 	add.w	r0, r4, #11
 8006efa:	1d23      	adds	r3, r4, #4
 8006efc:	f020 0007 	bic.w	r0, r0, #7
 8006f00:	1ac2      	subs	r2, r0, r3
 8006f02:	bf1c      	itt	ne
 8006f04:	1a1b      	subne	r3, r3, r0
 8006f06:	50a3      	strne	r3, [r4, r2]
 8006f08:	e7af      	b.n	8006e6a <_malloc_r+0x22>
 8006f0a:	6862      	ldr	r2, [r4, #4]
 8006f0c:	42a3      	cmp	r3, r4
 8006f0e:	bf0c      	ite	eq
 8006f10:	f8c8 2000 	streq.w	r2, [r8]
 8006f14:	605a      	strne	r2, [r3, #4]
 8006f16:	e7eb      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f18:	4623      	mov	r3, r4
 8006f1a:	6864      	ldr	r4, [r4, #4]
 8006f1c:	e7ae      	b.n	8006e7c <_malloc_r+0x34>
 8006f1e:	463c      	mov	r4, r7
 8006f20:	687f      	ldr	r7, [r7, #4]
 8006f22:	e7b6      	b.n	8006e92 <_malloc_r+0x4a>
 8006f24:	461a      	mov	r2, r3
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	d1fb      	bne.n	8006f24 <_malloc_r+0xdc>
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	6053      	str	r3, [r2, #4]
 8006f30:	e7de      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f32:	230c      	movs	r3, #12
 8006f34:	6033      	str	r3, [r6, #0]
 8006f36:	4630      	mov	r0, r6
 8006f38:	f000 f80c 	bl	8006f54 <__malloc_unlock>
 8006f3c:	e794      	b.n	8006e68 <_malloc_r+0x20>
 8006f3e:	6005      	str	r5, [r0, #0]
 8006f40:	e7d6      	b.n	8006ef0 <_malloc_r+0xa8>
 8006f42:	bf00      	nop
 8006f44:	20000468 	.word	0x20000468

08006f48 <__malloc_lock>:
 8006f48:	4801      	ldr	r0, [pc, #4]	@ (8006f50 <__malloc_lock+0x8>)
 8006f4a:	f7ff b8ba 	b.w	80060c2 <__retarget_lock_acquire_recursive>
 8006f4e:	bf00      	nop
 8006f50:	20000460 	.word	0x20000460

08006f54 <__malloc_unlock>:
 8006f54:	4801      	ldr	r0, [pc, #4]	@ (8006f5c <__malloc_unlock+0x8>)
 8006f56:	f7ff b8b5 	b.w	80060c4 <__retarget_lock_release_recursive>
 8006f5a:	bf00      	nop
 8006f5c:	20000460 	.word	0x20000460

08006f60 <_Balloc>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	69c6      	ldr	r6, [r0, #28]
 8006f64:	4604      	mov	r4, r0
 8006f66:	460d      	mov	r5, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Balloc+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7ff ff42 	bl	8006df4 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	61e0      	str	r0, [r4, #28]
 8006f74:	b920      	cbnz	r0, 8006f80 <_Balloc+0x20>
 8006f76:	4b18      	ldr	r3, [pc, #96]	@ (8006fd8 <_Balloc+0x78>)
 8006f78:	4818      	ldr	r0, [pc, #96]	@ (8006fdc <_Balloc+0x7c>)
 8006f7a:	216b      	movs	r1, #107	@ 0x6b
 8006f7c:	f000 fdae 	bl	8007adc <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	69e6      	ldr	r6, [r4, #28]
 8006f8a:	68f3      	ldr	r3, [r6, #12]
 8006f8c:	b183      	cbz	r3, 8006fb0 <_Balloc+0x50>
 8006f8e:	69e3      	ldr	r3, [r4, #28]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f96:	b9b8      	cbnz	r0, 8006fc8 <_Balloc+0x68>
 8006f98:	2101      	movs	r1, #1
 8006f9a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f9e:	1d72      	adds	r2, r6, #5
 8006fa0:	0092      	lsls	r2, r2, #2
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 fdb8 	bl	8007b18 <_calloc_r>
 8006fa8:	b160      	cbz	r0, 8006fc4 <_Balloc+0x64>
 8006faa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fae:	e00e      	b.n	8006fce <_Balloc+0x6e>
 8006fb0:	2221      	movs	r2, #33	@ 0x21
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	f000 fdaf 	bl	8007b18 <_calloc_r>
 8006fba:	69e3      	ldr	r3, [r4, #28]
 8006fbc:	60f0      	str	r0, [r6, #12]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <_Balloc+0x2e>
 8006fc4:	2000      	movs	r0, #0
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	6802      	ldr	r2, [r0, #0]
 8006fca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fd4:	e7f7      	b.n	8006fc6 <_Balloc+0x66>
 8006fd6:	bf00      	nop
 8006fd8:	08008221 	.word	0x08008221
 8006fdc:	080082a1 	.word	0x080082a1

08006fe0 <_Bfree>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	69c6      	ldr	r6, [r0, #28]
 8006fe4:	4605      	mov	r5, r0
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	b976      	cbnz	r6, 8007008 <_Bfree+0x28>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f7ff ff02 	bl	8006df4 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	61e8      	str	r0, [r5, #28]
 8006ff4:	b920      	cbnz	r0, 8007000 <_Bfree+0x20>
 8006ff6:	4b09      	ldr	r3, [pc, #36]	@ (800701c <_Bfree+0x3c>)
 8006ff8:	4809      	ldr	r0, [pc, #36]	@ (8007020 <_Bfree+0x40>)
 8006ffa:	218f      	movs	r1, #143	@ 0x8f
 8006ffc:	f000 fd6e 	bl	8007adc <__assert_func>
 8007000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007004:	6006      	str	r6, [r0, #0]
 8007006:	60c6      	str	r6, [r0, #12]
 8007008:	b13c      	cbz	r4, 800701a <_Bfree+0x3a>
 800700a:	69eb      	ldr	r3, [r5, #28]
 800700c:	6862      	ldr	r2, [r4, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007014:	6021      	str	r1, [r4, #0]
 8007016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	08008221 	.word	0x08008221
 8007020:	080082a1 	.word	0x080082a1

08007024 <__multadd>:
 8007024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007028:	690d      	ldr	r5, [r1, #16]
 800702a:	4607      	mov	r7, r0
 800702c:	460c      	mov	r4, r1
 800702e:	461e      	mov	r6, r3
 8007030:	f101 0c14 	add.w	ip, r1, #20
 8007034:	2000      	movs	r0, #0
 8007036:	f8dc 3000 	ldr.w	r3, [ip]
 800703a:	b299      	uxth	r1, r3
 800703c:	fb02 6101 	mla	r1, r2, r1, r6
 8007040:	0c1e      	lsrs	r6, r3, #16
 8007042:	0c0b      	lsrs	r3, r1, #16
 8007044:	fb02 3306 	mla	r3, r2, r6, r3
 8007048:	b289      	uxth	r1, r1
 800704a:	3001      	adds	r0, #1
 800704c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007050:	4285      	cmp	r5, r0
 8007052:	f84c 1b04 	str.w	r1, [ip], #4
 8007056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800705a:	dcec      	bgt.n	8007036 <__multadd+0x12>
 800705c:	b30e      	cbz	r6, 80070a2 <__multadd+0x7e>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	42ab      	cmp	r3, r5
 8007062:	dc19      	bgt.n	8007098 <__multadd+0x74>
 8007064:	6861      	ldr	r1, [r4, #4]
 8007066:	4638      	mov	r0, r7
 8007068:	3101      	adds	r1, #1
 800706a:	f7ff ff79 	bl	8006f60 <_Balloc>
 800706e:	4680      	mov	r8, r0
 8007070:	b928      	cbnz	r0, 800707e <__multadd+0x5a>
 8007072:	4602      	mov	r2, r0
 8007074:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <__multadd+0x84>)
 8007076:	480d      	ldr	r0, [pc, #52]	@ (80070ac <__multadd+0x88>)
 8007078:	21ba      	movs	r1, #186	@ 0xba
 800707a:	f000 fd2f 	bl	8007adc <__assert_func>
 800707e:	6922      	ldr	r2, [r4, #16]
 8007080:	3202      	adds	r2, #2
 8007082:	f104 010c 	add.w	r1, r4, #12
 8007086:	0092      	lsls	r2, r2, #2
 8007088:	300c      	adds	r0, #12
 800708a:	f000 fd19 	bl	8007ac0 <memcpy>
 800708e:	4621      	mov	r1, r4
 8007090:	4638      	mov	r0, r7
 8007092:	f7ff ffa5 	bl	8006fe0 <_Bfree>
 8007096:	4644      	mov	r4, r8
 8007098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800709c:	3501      	adds	r5, #1
 800709e:	615e      	str	r6, [r3, #20]
 80070a0:	6125      	str	r5, [r4, #16]
 80070a2:	4620      	mov	r0, r4
 80070a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070a8:	08008290 	.word	0x08008290
 80070ac:	080082a1 	.word	0x080082a1

080070b0 <__hi0bits>:
 80070b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80070b4:	4603      	mov	r3, r0
 80070b6:	bf36      	itet	cc
 80070b8:	0403      	lslcc	r3, r0, #16
 80070ba:	2000      	movcs	r0, #0
 80070bc:	2010      	movcc	r0, #16
 80070be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80070c2:	bf3c      	itt	cc
 80070c4:	021b      	lslcc	r3, r3, #8
 80070c6:	3008      	addcc	r0, #8
 80070c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070cc:	bf3c      	itt	cc
 80070ce:	011b      	lslcc	r3, r3, #4
 80070d0:	3004      	addcc	r0, #4
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d6:	bf3c      	itt	cc
 80070d8:	009b      	lslcc	r3, r3, #2
 80070da:	3002      	addcc	r0, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	db05      	blt.n	80070ec <__hi0bits+0x3c>
 80070e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070e4:	f100 0001 	add.w	r0, r0, #1
 80070e8:	bf08      	it	eq
 80070ea:	2020      	moveq	r0, #32
 80070ec:	4770      	bx	lr

080070ee <__lo0bits>:
 80070ee:	6803      	ldr	r3, [r0, #0]
 80070f0:	4602      	mov	r2, r0
 80070f2:	f013 0007 	ands.w	r0, r3, #7
 80070f6:	d00b      	beq.n	8007110 <__lo0bits+0x22>
 80070f8:	07d9      	lsls	r1, r3, #31
 80070fa:	d421      	bmi.n	8007140 <__lo0bits+0x52>
 80070fc:	0798      	lsls	r0, r3, #30
 80070fe:	bf49      	itett	mi
 8007100:	085b      	lsrmi	r3, r3, #1
 8007102:	089b      	lsrpl	r3, r3, #2
 8007104:	2001      	movmi	r0, #1
 8007106:	6013      	strmi	r3, [r2, #0]
 8007108:	bf5c      	itt	pl
 800710a:	6013      	strpl	r3, [r2, #0]
 800710c:	2002      	movpl	r0, #2
 800710e:	4770      	bx	lr
 8007110:	b299      	uxth	r1, r3
 8007112:	b909      	cbnz	r1, 8007118 <__lo0bits+0x2a>
 8007114:	0c1b      	lsrs	r3, r3, #16
 8007116:	2010      	movs	r0, #16
 8007118:	b2d9      	uxtb	r1, r3
 800711a:	b909      	cbnz	r1, 8007120 <__lo0bits+0x32>
 800711c:	3008      	adds	r0, #8
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	0719      	lsls	r1, r3, #28
 8007122:	bf04      	itt	eq
 8007124:	091b      	lsreq	r3, r3, #4
 8007126:	3004      	addeq	r0, #4
 8007128:	0799      	lsls	r1, r3, #30
 800712a:	bf04      	itt	eq
 800712c:	089b      	lsreq	r3, r3, #2
 800712e:	3002      	addeq	r0, #2
 8007130:	07d9      	lsls	r1, r3, #31
 8007132:	d403      	bmi.n	800713c <__lo0bits+0x4e>
 8007134:	085b      	lsrs	r3, r3, #1
 8007136:	f100 0001 	add.w	r0, r0, #1
 800713a:	d003      	beq.n	8007144 <__lo0bits+0x56>
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	4770      	bx	lr
 8007140:	2000      	movs	r0, #0
 8007142:	4770      	bx	lr
 8007144:	2020      	movs	r0, #32
 8007146:	4770      	bx	lr

08007148 <__i2b>:
 8007148:	b510      	push	{r4, lr}
 800714a:	460c      	mov	r4, r1
 800714c:	2101      	movs	r1, #1
 800714e:	f7ff ff07 	bl	8006f60 <_Balloc>
 8007152:	4602      	mov	r2, r0
 8007154:	b928      	cbnz	r0, 8007162 <__i2b+0x1a>
 8007156:	4b05      	ldr	r3, [pc, #20]	@ (800716c <__i2b+0x24>)
 8007158:	4805      	ldr	r0, [pc, #20]	@ (8007170 <__i2b+0x28>)
 800715a:	f240 1145 	movw	r1, #325	@ 0x145
 800715e:	f000 fcbd 	bl	8007adc <__assert_func>
 8007162:	2301      	movs	r3, #1
 8007164:	6144      	str	r4, [r0, #20]
 8007166:	6103      	str	r3, [r0, #16]
 8007168:	bd10      	pop	{r4, pc}
 800716a:	bf00      	nop
 800716c:	08008290 	.word	0x08008290
 8007170:	080082a1 	.word	0x080082a1

08007174 <__multiply>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4614      	mov	r4, r2
 800717a:	690a      	ldr	r2, [r1, #16]
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	429a      	cmp	r2, r3
 8007180:	bfa8      	it	ge
 8007182:	4623      	movge	r3, r4
 8007184:	460f      	mov	r7, r1
 8007186:	bfa4      	itt	ge
 8007188:	460c      	movge	r4, r1
 800718a:	461f      	movge	r7, r3
 800718c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007190:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007194:	68a3      	ldr	r3, [r4, #8]
 8007196:	6861      	ldr	r1, [r4, #4]
 8007198:	eb0a 0609 	add.w	r6, sl, r9
 800719c:	42b3      	cmp	r3, r6
 800719e:	b085      	sub	sp, #20
 80071a0:	bfb8      	it	lt
 80071a2:	3101      	addlt	r1, #1
 80071a4:	f7ff fedc 	bl	8006f60 <_Balloc>
 80071a8:	b930      	cbnz	r0, 80071b8 <__multiply+0x44>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b44      	ldr	r3, [pc, #272]	@ (80072c0 <__multiply+0x14c>)
 80071ae:	4845      	ldr	r0, [pc, #276]	@ (80072c4 <__multiply+0x150>)
 80071b0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80071b4:	f000 fc92 	bl	8007adc <__assert_func>
 80071b8:	f100 0514 	add.w	r5, r0, #20
 80071bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071c0:	462b      	mov	r3, r5
 80071c2:	2200      	movs	r2, #0
 80071c4:	4543      	cmp	r3, r8
 80071c6:	d321      	bcc.n	800720c <__multiply+0x98>
 80071c8:	f107 0114 	add.w	r1, r7, #20
 80071cc:	f104 0214 	add.w	r2, r4, #20
 80071d0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071d4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071d8:	9302      	str	r3, [sp, #8]
 80071da:	1b13      	subs	r3, r2, r4
 80071dc:	3b15      	subs	r3, #21
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	3304      	adds	r3, #4
 80071e4:	f104 0715 	add.w	r7, r4, #21
 80071e8:	42ba      	cmp	r2, r7
 80071ea:	bf38      	it	cc
 80071ec:	2304      	movcc	r3, #4
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	9b02      	ldr	r3, [sp, #8]
 80071f2:	9103      	str	r1, [sp, #12]
 80071f4:	428b      	cmp	r3, r1
 80071f6:	d80c      	bhi.n	8007212 <__multiply+0x9e>
 80071f8:	2e00      	cmp	r6, #0
 80071fa:	dd03      	ble.n	8007204 <__multiply+0x90>
 80071fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007200:	2b00      	cmp	r3, #0
 8007202:	d05b      	beq.n	80072bc <__multiply+0x148>
 8007204:	6106      	str	r6, [r0, #16]
 8007206:	b005      	add	sp, #20
 8007208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720c:	f843 2b04 	str.w	r2, [r3], #4
 8007210:	e7d8      	b.n	80071c4 <__multiply+0x50>
 8007212:	f8b1 a000 	ldrh.w	sl, [r1]
 8007216:	f1ba 0f00 	cmp.w	sl, #0
 800721a:	d024      	beq.n	8007266 <__multiply+0xf2>
 800721c:	f104 0e14 	add.w	lr, r4, #20
 8007220:	46a9      	mov	r9, r5
 8007222:	f04f 0c00 	mov.w	ip, #0
 8007226:	f85e 7b04 	ldr.w	r7, [lr], #4
 800722a:	f8d9 3000 	ldr.w	r3, [r9]
 800722e:	fa1f fb87 	uxth.w	fp, r7
 8007232:	b29b      	uxth	r3, r3
 8007234:	fb0a 330b 	mla	r3, sl, fp, r3
 8007238:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800723c:	f8d9 7000 	ldr.w	r7, [r9]
 8007240:	4463      	add	r3, ip
 8007242:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007246:	fb0a c70b 	mla	r7, sl, fp, ip
 800724a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800724e:	b29b      	uxth	r3, r3
 8007250:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007254:	4572      	cmp	r2, lr
 8007256:	f849 3b04 	str.w	r3, [r9], #4
 800725a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800725e:	d8e2      	bhi.n	8007226 <__multiply+0xb2>
 8007260:	9b01      	ldr	r3, [sp, #4]
 8007262:	f845 c003 	str.w	ip, [r5, r3]
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800726c:	3104      	adds	r1, #4
 800726e:	f1b9 0f00 	cmp.w	r9, #0
 8007272:	d021      	beq.n	80072b8 <__multiply+0x144>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	f104 0c14 	add.w	ip, r4, #20
 800727a:	46ae      	mov	lr, r5
 800727c:	f04f 0a00 	mov.w	sl, #0
 8007280:	f8bc b000 	ldrh.w	fp, [ip]
 8007284:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007288:	fb09 770b 	mla	r7, r9, fp, r7
 800728c:	4457      	add	r7, sl
 800728e:	b29b      	uxth	r3, r3
 8007290:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007294:	f84e 3b04 	str.w	r3, [lr], #4
 8007298:	f85c 3b04 	ldr.w	r3, [ip], #4
 800729c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072a0:	f8be 3000 	ldrh.w	r3, [lr]
 80072a4:	fb09 330a 	mla	r3, r9, sl, r3
 80072a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80072ac:	4562      	cmp	r2, ip
 80072ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80072b2:	d8e5      	bhi.n	8007280 <__multiply+0x10c>
 80072b4:	9f01      	ldr	r7, [sp, #4]
 80072b6:	51eb      	str	r3, [r5, r7]
 80072b8:	3504      	adds	r5, #4
 80072ba:	e799      	b.n	80071f0 <__multiply+0x7c>
 80072bc:	3e01      	subs	r6, #1
 80072be:	e79b      	b.n	80071f8 <__multiply+0x84>
 80072c0:	08008290 	.word	0x08008290
 80072c4:	080082a1 	.word	0x080082a1

080072c8 <__pow5mult>:
 80072c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072cc:	4615      	mov	r5, r2
 80072ce:	f012 0203 	ands.w	r2, r2, #3
 80072d2:	4607      	mov	r7, r0
 80072d4:	460e      	mov	r6, r1
 80072d6:	d007      	beq.n	80072e8 <__pow5mult+0x20>
 80072d8:	4c25      	ldr	r4, [pc, #148]	@ (8007370 <__pow5mult+0xa8>)
 80072da:	3a01      	subs	r2, #1
 80072dc:	2300      	movs	r3, #0
 80072de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072e2:	f7ff fe9f 	bl	8007024 <__multadd>
 80072e6:	4606      	mov	r6, r0
 80072e8:	10ad      	asrs	r5, r5, #2
 80072ea:	d03d      	beq.n	8007368 <__pow5mult+0xa0>
 80072ec:	69fc      	ldr	r4, [r7, #28]
 80072ee:	b97c      	cbnz	r4, 8007310 <__pow5mult+0x48>
 80072f0:	2010      	movs	r0, #16
 80072f2:	f7ff fd7f 	bl	8006df4 <malloc>
 80072f6:	4602      	mov	r2, r0
 80072f8:	61f8      	str	r0, [r7, #28]
 80072fa:	b928      	cbnz	r0, 8007308 <__pow5mult+0x40>
 80072fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007374 <__pow5mult+0xac>)
 80072fe:	481e      	ldr	r0, [pc, #120]	@ (8007378 <__pow5mult+0xb0>)
 8007300:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007304:	f000 fbea 	bl	8007adc <__assert_func>
 8007308:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800730c:	6004      	str	r4, [r0, #0]
 800730e:	60c4      	str	r4, [r0, #12]
 8007310:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007314:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007318:	b94c      	cbnz	r4, 800732e <__pow5mult+0x66>
 800731a:	f240 2171 	movw	r1, #625	@ 0x271
 800731e:	4638      	mov	r0, r7
 8007320:	f7ff ff12 	bl	8007148 <__i2b>
 8007324:	2300      	movs	r3, #0
 8007326:	f8c8 0008 	str.w	r0, [r8, #8]
 800732a:	4604      	mov	r4, r0
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 0900 	mov.w	r9, #0
 8007332:	07eb      	lsls	r3, r5, #31
 8007334:	d50a      	bpl.n	800734c <__pow5mult+0x84>
 8007336:	4631      	mov	r1, r6
 8007338:	4622      	mov	r2, r4
 800733a:	4638      	mov	r0, r7
 800733c:	f7ff ff1a 	bl	8007174 <__multiply>
 8007340:	4631      	mov	r1, r6
 8007342:	4680      	mov	r8, r0
 8007344:	4638      	mov	r0, r7
 8007346:	f7ff fe4b 	bl	8006fe0 <_Bfree>
 800734a:	4646      	mov	r6, r8
 800734c:	106d      	asrs	r5, r5, #1
 800734e:	d00b      	beq.n	8007368 <__pow5mult+0xa0>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	b938      	cbnz	r0, 8007364 <__pow5mult+0x9c>
 8007354:	4622      	mov	r2, r4
 8007356:	4621      	mov	r1, r4
 8007358:	4638      	mov	r0, r7
 800735a:	f7ff ff0b 	bl	8007174 <__multiply>
 800735e:	6020      	str	r0, [r4, #0]
 8007360:	f8c0 9000 	str.w	r9, [r0]
 8007364:	4604      	mov	r4, r0
 8007366:	e7e4      	b.n	8007332 <__pow5mult+0x6a>
 8007368:	4630      	mov	r0, r6
 800736a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736e:	bf00      	nop
 8007370:	080082fc 	.word	0x080082fc
 8007374:	08008221 	.word	0x08008221
 8007378:	080082a1 	.word	0x080082a1

0800737c <__lshift>:
 800737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007380:	460c      	mov	r4, r1
 8007382:	6849      	ldr	r1, [r1, #4]
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800738a:	68a3      	ldr	r3, [r4, #8]
 800738c:	4607      	mov	r7, r0
 800738e:	4691      	mov	r9, r2
 8007390:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007394:	f108 0601 	add.w	r6, r8, #1
 8007398:	42b3      	cmp	r3, r6
 800739a:	db0b      	blt.n	80073b4 <__lshift+0x38>
 800739c:	4638      	mov	r0, r7
 800739e:	f7ff fddf 	bl	8006f60 <_Balloc>
 80073a2:	4605      	mov	r5, r0
 80073a4:	b948      	cbnz	r0, 80073ba <__lshift+0x3e>
 80073a6:	4602      	mov	r2, r0
 80073a8:	4b28      	ldr	r3, [pc, #160]	@ (800744c <__lshift+0xd0>)
 80073aa:	4829      	ldr	r0, [pc, #164]	@ (8007450 <__lshift+0xd4>)
 80073ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80073b0:	f000 fb94 	bl	8007adc <__assert_func>
 80073b4:	3101      	adds	r1, #1
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	e7ee      	b.n	8007398 <__lshift+0x1c>
 80073ba:	2300      	movs	r3, #0
 80073bc:	f100 0114 	add.w	r1, r0, #20
 80073c0:	f100 0210 	add.w	r2, r0, #16
 80073c4:	4618      	mov	r0, r3
 80073c6:	4553      	cmp	r3, sl
 80073c8:	db33      	blt.n	8007432 <__lshift+0xb6>
 80073ca:	6920      	ldr	r0, [r4, #16]
 80073cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073d0:	f104 0314 	add.w	r3, r4, #20
 80073d4:	f019 091f 	ands.w	r9, r9, #31
 80073d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073e0:	d02b      	beq.n	800743a <__lshift+0xbe>
 80073e2:	f1c9 0e20 	rsb	lr, r9, #32
 80073e6:	468a      	mov	sl, r1
 80073e8:	2200      	movs	r2, #0
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	fa00 f009 	lsl.w	r0, r0, r9
 80073f0:	4310      	orrs	r0, r2
 80073f2:	f84a 0b04 	str.w	r0, [sl], #4
 80073f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fa:	459c      	cmp	ip, r3
 80073fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007400:	d8f3      	bhi.n	80073ea <__lshift+0x6e>
 8007402:	ebac 0304 	sub.w	r3, ip, r4
 8007406:	3b15      	subs	r3, #21
 8007408:	f023 0303 	bic.w	r3, r3, #3
 800740c:	3304      	adds	r3, #4
 800740e:	f104 0015 	add.w	r0, r4, #21
 8007412:	4584      	cmp	ip, r0
 8007414:	bf38      	it	cc
 8007416:	2304      	movcc	r3, #4
 8007418:	50ca      	str	r2, [r1, r3]
 800741a:	b10a      	cbz	r2, 8007420 <__lshift+0xa4>
 800741c:	f108 0602 	add.w	r6, r8, #2
 8007420:	3e01      	subs	r6, #1
 8007422:	4638      	mov	r0, r7
 8007424:	612e      	str	r6, [r5, #16]
 8007426:	4621      	mov	r1, r4
 8007428:	f7ff fdda 	bl	8006fe0 <_Bfree>
 800742c:	4628      	mov	r0, r5
 800742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007432:	f842 0f04 	str.w	r0, [r2, #4]!
 8007436:	3301      	adds	r3, #1
 8007438:	e7c5      	b.n	80073c6 <__lshift+0x4a>
 800743a:	3904      	subs	r1, #4
 800743c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007440:	f841 2f04 	str.w	r2, [r1, #4]!
 8007444:	459c      	cmp	ip, r3
 8007446:	d8f9      	bhi.n	800743c <__lshift+0xc0>
 8007448:	e7ea      	b.n	8007420 <__lshift+0xa4>
 800744a:	bf00      	nop
 800744c:	08008290 	.word	0x08008290
 8007450:	080082a1 	.word	0x080082a1

08007454 <__mcmp>:
 8007454:	690a      	ldr	r2, [r1, #16]
 8007456:	4603      	mov	r3, r0
 8007458:	6900      	ldr	r0, [r0, #16]
 800745a:	1a80      	subs	r0, r0, r2
 800745c:	b530      	push	{r4, r5, lr}
 800745e:	d10e      	bne.n	800747e <__mcmp+0x2a>
 8007460:	3314      	adds	r3, #20
 8007462:	3114      	adds	r1, #20
 8007464:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007468:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800746c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007470:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007474:	4295      	cmp	r5, r2
 8007476:	d003      	beq.n	8007480 <__mcmp+0x2c>
 8007478:	d205      	bcs.n	8007486 <__mcmp+0x32>
 800747a:	f04f 30ff 	mov.w	r0, #4294967295
 800747e:	bd30      	pop	{r4, r5, pc}
 8007480:	42a3      	cmp	r3, r4
 8007482:	d3f3      	bcc.n	800746c <__mcmp+0x18>
 8007484:	e7fb      	b.n	800747e <__mcmp+0x2a>
 8007486:	2001      	movs	r0, #1
 8007488:	e7f9      	b.n	800747e <__mcmp+0x2a>
	...

0800748c <__mdiff>:
 800748c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	4689      	mov	r9, r1
 8007492:	4606      	mov	r6, r0
 8007494:	4611      	mov	r1, r2
 8007496:	4648      	mov	r0, r9
 8007498:	4614      	mov	r4, r2
 800749a:	f7ff ffdb 	bl	8007454 <__mcmp>
 800749e:	1e05      	subs	r5, r0, #0
 80074a0:	d112      	bne.n	80074c8 <__mdiff+0x3c>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4630      	mov	r0, r6
 80074a6:	f7ff fd5b 	bl	8006f60 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__mdiff+0x2e>
 80074ae:	4b3f      	ldr	r3, [pc, #252]	@ (80075ac <__mdiff+0x120>)
 80074b0:	f240 2137 	movw	r1, #567	@ 0x237
 80074b4:	483e      	ldr	r0, [pc, #248]	@ (80075b0 <__mdiff+0x124>)
 80074b6:	f000 fb11 	bl	8007adc <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074c0:	4610      	mov	r0, r2
 80074c2:	b003      	add	sp, #12
 80074c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c8:	bfbc      	itt	lt
 80074ca:	464b      	movlt	r3, r9
 80074cc:	46a1      	movlt	r9, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074d4:	bfba      	itte	lt
 80074d6:	461c      	movlt	r4, r3
 80074d8:	2501      	movlt	r5, #1
 80074da:	2500      	movge	r5, #0
 80074dc:	f7ff fd40 	bl	8006f60 <_Balloc>
 80074e0:	4602      	mov	r2, r0
 80074e2:	b918      	cbnz	r0, 80074ec <__mdiff+0x60>
 80074e4:	4b31      	ldr	r3, [pc, #196]	@ (80075ac <__mdiff+0x120>)
 80074e6:	f240 2145 	movw	r1, #581	@ 0x245
 80074ea:	e7e3      	b.n	80074b4 <__mdiff+0x28>
 80074ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074f0:	6926      	ldr	r6, [r4, #16]
 80074f2:	60c5      	str	r5, [r0, #12]
 80074f4:	f109 0310 	add.w	r3, r9, #16
 80074f8:	f109 0514 	add.w	r5, r9, #20
 80074fc:	f104 0e14 	add.w	lr, r4, #20
 8007500:	f100 0b14 	add.w	fp, r0, #20
 8007504:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007508:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800750c:	9301      	str	r3, [sp, #4]
 800750e:	46d9      	mov	r9, fp
 8007510:	f04f 0c00 	mov.w	ip, #0
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	f85e 0b04 	ldr.w	r0, [lr], #4
 800751a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	fa1f f38a 	uxth.w	r3, sl
 8007524:	4619      	mov	r1, r3
 8007526:	b283      	uxth	r3, r0
 8007528:	1acb      	subs	r3, r1, r3
 800752a:	0c00      	lsrs	r0, r0, #16
 800752c:	4463      	add	r3, ip
 800752e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007532:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800753c:	4576      	cmp	r6, lr
 800753e:	f849 3b04 	str.w	r3, [r9], #4
 8007542:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007546:	d8e5      	bhi.n	8007514 <__mdiff+0x88>
 8007548:	1b33      	subs	r3, r6, r4
 800754a:	3b15      	subs	r3, #21
 800754c:	f023 0303 	bic.w	r3, r3, #3
 8007550:	3415      	adds	r4, #21
 8007552:	3304      	adds	r3, #4
 8007554:	42a6      	cmp	r6, r4
 8007556:	bf38      	it	cc
 8007558:	2304      	movcc	r3, #4
 800755a:	441d      	add	r5, r3
 800755c:	445b      	add	r3, fp
 800755e:	461e      	mov	r6, r3
 8007560:	462c      	mov	r4, r5
 8007562:	4544      	cmp	r4, r8
 8007564:	d30e      	bcc.n	8007584 <__mdiff+0xf8>
 8007566:	f108 0103 	add.w	r1, r8, #3
 800756a:	1b49      	subs	r1, r1, r5
 800756c:	f021 0103 	bic.w	r1, r1, #3
 8007570:	3d03      	subs	r5, #3
 8007572:	45a8      	cmp	r8, r5
 8007574:	bf38      	it	cc
 8007576:	2100      	movcc	r1, #0
 8007578:	440b      	add	r3, r1
 800757a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800757e:	b191      	cbz	r1, 80075a6 <__mdiff+0x11a>
 8007580:	6117      	str	r7, [r2, #16]
 8007582:	e79d      	b.n	80074c0 <__mdiff+0x34>
 8007584:	f854 1b04 	ldr.w	r1, [r4], #4
 8007588:	46e6      	mov	lr, ip
 800758a:	0c08      	lsrs	r0, r1, #16
 800758c:	fa1c fc81 	uxtah	ip, ip, r1
 8007590:	4471      	add	r1, lr
 8007592:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007596:	b289      	uxth	r1, r1
 8007598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800759c:	f846 1b04 	str.w	r1, [r6], #4
 80075a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075a4:	e7dd      	b.n	8007562 <__mdiff+0xd6>
 80075a6:	3f01      	subs	r7, #1
 80075a8:	e7e7      	b.n	800757a <__mdiff+0xee>
 80075aa:	bf00      	nop
 80075ac:	08008290 	.word	0x08008290
 80075b0:	080082a1 	.word	0x080082a1

080075b4 <__d2b>:
 80075b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075b8:	460f      	mov	r7, r1
 80075ba:	2101      	movs	r1, #1
 80075bc:	ec59 8b10 	vmov	r8, r9, d0
 80075c0:	4616      	mov	r6, r2
 80075c2:	f7ff fccd 	bl	8006f60 <_Balloc>
 80075c6:	4604      	mov	r4, r0
 80075c8:	b930      	cbnz	r0, 80075d8 <__d2b+0x24>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b23      	ldr	r3, [pc, #140]	@ (800765c <__d2b+0xa8>)
 80075ce:	4824      	ldr	r0, [pc, #144]	@ (8007660 <__d2b+0xac>)
 80075d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80075d4:	f000 fa82 	bl	8007adc <__assert_func>
 80075d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075e0:	b10d      	cbz	r5, 80075e6 <__d2b+0x32>
 80075e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e6:	9301      	str	r3, [sp, #4]
 80075e8:	f1b8 0300 	subs.w	r3, r8, #0
 80075ec:	d023      	beq.n	8007636 <__d2b+0x82>
 80075ee:	4668      	mov	r0, sp
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	f7ff fd7c 	bl	80070ee <__lo0bits>
 80075f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075fa:	b1d0      	cbz	r0, 8007632 <__d2b+0x7e>
 80075fc:	f1c0 0320 	rsb	r3, r0, #32
 8007600:	fa02 f303 	lsl.w	r3, r2, r3
 8007604:	430b      	orrs	r3, r1
 8007606:	40c2      	lsrs	r2, r0
 8007608:	6163      	str	r3, [r4, #20]
 800760a:	9201      	str	r2, [sp, #4]
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	61a3      	str	r3, [r4, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	bf0c      	ite	eq
 8007614:	2201      	moveq	r2, #1
 8007616:	2202      	movne	r2, #2
 8007618:	6122      	str	r2, [r4, #16]
 800761a:	b1a5      	cbz	r5, 8007646 <__d2b+0x92>
 800761c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007620:	4405      	add	r5, r0
 8007622:	603d      	str	r5, [r7, #0]
 8007624:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007628:	6030      	str	r0, [r6, #0]
 800762a:	4620      	mov	r0, r4
 800762c:	b003      	add	sp, #12
 800762e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007632:	6161      	str	r1, [r4, #20]
 8007634:	e7ea      	b.n	800760c <__d2b+0x58>
 8007636:	a801      	add	r0, sp, #4
 8007638:	f7ff fd59 	bl	80070ee <__lo0bits>
 800763c:	9b01      	ldr	r3, [sp, #4]
 800763e:	6163      	str	r3, [r4, #20]
 8007640:	3020      	adds	r0, #32
 8007642:	2201      	movs	r2, #1
 8007644:	e7e8      	b.n	8007618 <__d2b+0x64>
 8007646:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800764a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800764e:	6038      	str	r0, [r7, #0]
 8007650:	6918      	ldr	r0, [r3, #16]
 8007652:	f7ff fd2d 	bl	80070b0 <__hi0bits>
 8007656:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800765a:	e7e5      	b.n	8007628 <__d2b+0x74>
 800765c:	08008290 	.word	0x08008290
 8007660:	080082a1 	.word	0x080082a1

08007664 <__ssputs_r>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	688e      	ldr	r6, [r1, #8]
 800766a:	461f      	mov	r7, r3
 800766c:	42be      	cmp	r6, r7
 800766e:	680b      	ldr	r3, [r1, #0]
 8007670:	4682      	mov	sl, r0
 8007672:	460c      	mov	r4, r1
 8007674:	4690      	mov	r8, r2
 8007676:	d82d      	bhi.n	80076d4 <__ssputs_r+0x70>
 8007678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800767c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007680:	d026      	beq.n	80076d0 <__ssputs_r+0x6c>
 8007682:	6965      	ldr	r5, [r4, #20]
 8007684:	6909      	ldr	r1, [r1, #16]
 8007686:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800768a:	eba3 0901 	sub.w	r9, r3, r1
 800768e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007692:	1c7b      	adds	r3, r7, #1
 8007694:	444b      	add	r3, r9
 8007696:	106d      	asrs	r5, r5, #1
 8007698:	429d      	cmp	r5, r3
 800769a:	bf38      	it	cc
 800769c:	461d      	movcc	r5, r3
 800769e:	0553      	lsls	r3, r2, #21
 80076a0:	d527      	bpl.n	80076f2 <__ssputs_r+0x8e>
 80076a2:	4629      	mov	r1, r5
 80076a4:	f7ff fbd0 	bl	8006e48 <_malloc_r>
 80076a8:	4606      	mov	r6, r0
 80076aa:	b360      	cbz	r0, 8007706 <__ssputs_r+0xa2>
 80076ac:	6921      	ldr	r1, [r4, #16]
 80076ae:	464a      	mov	r2, r9
 80076b0:	f000 fa06 	bl	8007ac0 <memcpy>
 80076b4:	89a3      	ldrh	r3, [r4, #12]
 80076b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80076ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076be:	81a3      	strh	r3, [r4, #12]
 80076c0:	6126      	str	r6, [r4, #16]
 80076c2:	6165      	str	r5, [r4, #20]
 80076c4:	444e      	add	r6, r9
 80076c6:	eba5 0509 	sub.w	r5, r5, r9
 80076ca:	6026      	str	r6, [r4, #0]
 80076cc:	60a5      	str	r5, [r4, #8]
 80076ce:	463e      	mov	r6, r7
 80076d0:	42be      	cmp	r6, r7
 80076d2:	d900      	bls.n	80076d6 <__ssputs_r+0x72>
 80076d4:	463e      	mov	r6, r7
 80076d6:	6820      	ldr	r0, [r4, #0]
 80076d8:	4632      	mov	r2, r6
 80076da:	4641      	mov	r1, r8
 80076dc:	f000 f9c6 	bl	8007a6c <memmove>
 80076e0:	68a3      	ldr	r3, [r4, #8]
 80076e2:	1b9b      	subs	r3, r3, r6
 80076e4:	60a3      	str	r3, [r4, #8]
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	4433      	add	r3, r6
 80076ea:	6023      	str	r3, [r4, #0]
 80076ec:	2000      	movs	r0, #0
 80076ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f2:	462a      	mov	r2, r5
 80076f4:	f000 fa36 	bl	8007b64 <_realloc_r>
 80076f8:	4606      	mov	r6, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d1e0      	bne.n	80076c0 <__ssputs_r+0x5c>
 80076fe:	6921      	ldr	r1, [r4, #16]
 8007700:	4650      	mov	r0, sl
 8007702:	f7ff fb2d 	bl	8006d60 <_free_r>
 8007706:	230c      	movs	r3, #12
 8007708:	f8ca 3000 	str.w	r3, [sl]
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	e7e9      	b.n	80076ee <__ssputs_r+0x8a>
	...

0800771c <_svfiprintf_r>:
 800771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007720:	4698      	mov	r8, r3
 8007722:	898b      	ldrh	r3, [r1, #12]
 8007724:	061b      	lsls	r3, r3, #24
 8007726:	b09d      	sub	sp, #116	@ 0x74
 8007728:	4607      	mov	r7, r0
 800772a:	460d      	mov	r5, r1
 800772c:	4614      	mov	r4, r2
 800772e:	d510      	bpl.n	8007752 <_svfiprintf_r+0x36>
 8007730:	690b      	ldr	r3, [r1, #16]
 8007732:	b973      	cbnz	r3, 8007752 <_svfiprintf_r+0x36>
 8007734:	2140      	movs	r1, #64	@ 0x40
 8007736:	f7ff fb87 	bl	8006e48 <_malloc_r>
 800773a:	6028      	str	r0, [r5, #0]
 800773c:	6128      	str	r0, [r5, #16]
 800773e:	b930      	cbnz	r0, 800774e <_svfiprintf_r+0x32>
 8007740:	230c      	movs	r3, #12
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	f04f 30ff 	mov.w	r0, #4294967295
 8007748:	b01d      	add	sp, #116	@ 0x74
 800774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774e:	2340      	movs	r3, #64	@ 0x40
 8007750:	616b      	str	r3, [r5, #20]
 8007752:	2300      	movs	r3, #0
 8007754:	9309      	str	r3, [sp, #36]	@ 0x24
 8007756:	2320      	movs	r3, #32
 8007758:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800775c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007760:	2330      	movs	r3, #48	@ 0x30
 8007762:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007900 <_svfiprintf_r+0x1e4>
 8007766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800776a:	f04f 0901 	mov.w	r9, #1
 800776e:	4623      	mov	r3, r4
 8007770:	469a      	mov	sl, r3
 8007772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007776:	b10a      	cbz	r2, 800777c <_svfiprintf_r+0x60>
 8007778:	2a25      	cmp	r2, #37	@ 0x25
 800777a:	d1f9      	bne.n	8007770 <_svfiprintf_r+0x54>
 800777c:	ebba 0b04 	subs.w	fp, sl, r4
 8007780:	d00b      	beq.n	800779a <_svfiprintf_r+0x7e>
 8007782:	465b      	mov	r3, fp
 8007784:	4622      	mov	r2, r4
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ff6b 	bl	8007664 <__ssputs_r>
 800778e:	3001      	adds	r0, #1
 8007790:	f000 80a7 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 8007794:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007796:	445a      	add	r2, fp
 8007798:	9209      	str	r2, [sp, #36]	@ 0x24
 800779a:	f89a 3000 	ldrb.w	r3, [sl]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 809f 	beq.w	80078e2 <_svfiprintf_r+0x1c6>
 80077a4:	2300      	movs	r3, #0
 80077a6:	f04f 32ff 	mov.w	r2, #4294967295
 80077aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077ae:	f10a 0a01 	add.w	sl, sl, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	9307      	str	r3, [sp, #28]
 80077b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80077bc:	4654      	mov	r4, sl
 80077be:	2205      	movs	r2, #5
 80077c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c4:	484e      	ldr	r0, [pc, #312]	@ (8007900 <_svfiprintf_r+0x1e4>)
 80077c6:	f7f8 fd03 	bl	80001d0 <memchr>
 80077ca:	9a04      	ldr	r2, [sp, #16]
 80077cc:	b9d8      	cbnz	r0, 8007806 <_svfiprintf_r+0xea>
 80077ce:	06d0      	lsls	r0, r2, #27
 80077d0:	bf44      	itt	mi
 80077d2:	2320      	movmi	r3, #32
 80077d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077d8:	0711      	lsls	r1, r2, #28
 80077da:	bf44      	itt	mi
 80077dc:	232b      	movmi	r3, #43	@ 0x2b
 80077de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077e2:	f89a 3000 	ldrb.w	r3, [sl]
 80077e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077e8:	d015      	beq.n	8007816 <_svfiprintf_r+0xfa>
 80077ea:	9a07      	ldr	r2, [sp, #28]
 80077ec:	4654      	mov	r4, sl
 80077ee:	2000      	movs	r0, #0
 80077f0:	f04f 0c0a 	mov.w	ip, #10
 80077f4:	4621      	mov	r1, r4
 80077f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077fa:	3b30      	subs	r3, #48	@ 0x30
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d94b      	bls.n	8007898 <_svfiprintf_r+0x17c>
 8007800:	b1b0      	cbz	r0, 8007830 <_svfiprintf_r+0x114>
 8007802:	9207      	str	r2, [sp, #28]
 8007804:	e014      	b.n	8007830 <_svfiprintf_r+0x114>
 8007806:	eba0 0308 	sub.w	r3, r0, r8
 800780a:	fa09 f303 	lsl.w	r3, r9, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	9304      	str	r3, [sp, #16]
 8007812:	46a2      	mov	sl, r4
 8007814:	e7d2      	b.n	80077bc <_svfiprintf_r+0xa0>
 8007816:	9b03      	ldr	r3, [sp, #12]
 8007818:	1d19      	adds	r1, r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	9103      	str	r1, [sp, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	bfbb      	ittet	lt
 8007822:	425b      	neglt	r3, r3
 8007824:	f042 0202 	orrlt.w	r2, r2, #2
 8007828:	9307      	strge	r3, [sp, #28]
 800782a:	9307      	strlt	r3, [sp, #28]
 800782c:	bfb8      	it	lt
 800782e:	9204      	strlt	r2, [sp, #16]
 8007830:	7823      	ldrb	r3, [r4, #0]
 8007832:	2b2e      	cmp	r3, #46	@ 0x2e
 8007834:	d10a      	bne.n	800784c <_svfiprintf_r+0x130>
 8007836:	7863      	ldrb	r3, [r4, #1]
 8007838:	2b2a      	cmp	r3, #42	@ 0x2a
 800783a:	d132      	bne.n	80078a2 <_svfiprintf_r+0x186>
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	9203      	str	r2, [sp, #12]
 8007844:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007848:	3402      	adds	r4, #2
 800784a:	9305      	str	r3, [sp, #20]
 800784c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007910 <_svfiprintf_r+0x1f4>
 8007850:	7821      	ldrb	r1, [r4, #0]
 8007852:	2203      	movs	r2, #3
 8007854:	4650      	mov	r0, sl
 8007856:	f7f8 fcbb 	bl	80001d0 <memchr>
 800785a:	b138      	cbz	r0, 800786c <_svfiprintf_r+0x150>
 800785c:	9b04      	ldr	r3, [sp, #16]
 800785e:	eba0 000a 	sub.w	r0, r0, sl
 8007862:	2240      	movs	r2, #64	@ 0x40
 8007864:	4082      	lsls	r2, r0
 8007866:	4313      	orrs	r3, r2
 8007868:	3401      	adds	r4, #1
 800786a:	9304      	str	r3, [sp, #16]
 800786c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007870:	4824      	ldr	r0, [pc, #144]	@ (8007904 <_svfiprintf_r+0x1e8>)
 8007872:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007876:	2206      	movs	r2, #6
 8007878:	f7f8 fcaa 	bl	80001d0 <memchr>
 800787c:	2800      	cmp	r0, #0
 800787e:	d036      	beq.n	80078ee <_svfiprintf_r+0x1d2>
 8007880:	4b21      	ldr	r3, [pc, #132]	@ (8007908 <_svfiprintf_r+0x1ec>)
 8007882:	bb1b      	cbnz	r3, 80078cc <_svfiprintf_r+0x1b0>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	3307      	adds	r3, #7
 8007888:	f023 0307 	bic.w	r3, r3, #7
 800788c:	3308      	adds	r3, #8
 800788e:	9303      	str	r3, [sp, #12]
 8007890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007892:	4433      	add	r3, r6
 8007894:	9309      	str	r3, [sp, #36]	@ 0x24
 8007896:	e76a      	b.n	800776e <_svfiprintf_r+0x52>
 8007898:	fb0c 3202 	mla	r2, ip, r2, r3
 800789c:	460c      	mov	r4, r1
 800789e:	2001      	movs	r0, #1
 80078a0:	e7a8      	b.n	80077f4 <_svfiprintf_r+0xd8>
 80078a2:	2300      	movs	r3, #0
 80078a4:	3401      	adds	r4, #1
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	4619      	mov	r1, r3
 80078aa:	f04f 0c0a 	mov.w	ip, #10
 80078ae:	4620      	mov	r0, r4
 80078b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078b4:	3a30      	subs	r2, #48	@ 0x30
 80078b6:	2a09      	cmp	r2, #9
 80078b8:	d903      	bls.n	80078c2 <_svfiprintf_r+0x1a6>
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d0c6      	beq.n	800784c <_svfiprintf_r+0x130>
 80078be:	9105      	str	r1, [sp, #20]
 80078c0:	e7c4      	b.n	800784c <_svfiprintf_r+0x130>
 80078c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078c6:	4604      	mov	r4, r0
 80078c8:	2301      	movs	r3, #1
 80078ca:	e7f0      	b.n	80078ae <_svfiprintf_r+0x192>
 80078cc:	ab03      	add	r3, sp, #12
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	462a      	mov	r2, r5
 80078d2:	4b0e      	ldr	r3, [pc, #56]	@ (800790c <_svfiprintf_r+0x1f0>)
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	4638      	mov	r0, r7
 80078d8:	f7fd fe84 	bl	80055e4 <_printf_float>
 80078dc:	1c42      	adds	r2, r0, #1
 80078de:	4606      	mov	r6, r0
 80078e0:	d1d6      	bne.n	8007890 <_svfiprintf_r+0x174>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	065b      	lsls	r3, r3, #25
 80078e6:	f53f af2d 	bmi.w	8007744 <_svfiprintf_r+0x28>
 80078ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078ec:	e72c      	b.n	8007748 <_svfiprintf_r+0x2c>
 80078ee:	ab03      	add	r3, sp, #12
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	462a      	mov	r2, r5
 80078f4:	4b05      	ldr	r3, [pc, #20]	@ (800790c <_svfiprintf_r+0x1f0>)
 80078f6:	a904      	add	r1, sp, #16
 80078f8:	4638      	mov	r0, r7
 80078fa:	f7fe f90b 	bl	8005b14 <_printf_i>
 80078fe:	e7ed      	b.n	80078dc <_svfiprintf_r+0x1c0>
 8007900:	080083f8 	.word	0x080083f8
 8007904:	08008402 	.word	0x08008402
 8007908:	080055e5 	.word	0x080055e5
 800790c:	08007665 	.word	0x08007665
 8007910:	080083fe 	.word	0x080083fe

08007914 <__sflush_r>:
 8007914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	0716      	lsls	r6, r2, #28
 800791e:	4605      	mov	r5, r0
 8007920:	460c      	mov	r4, r1
 8007922:	d454      	bmi.n	80079ce <__sflush_r+0xba>
 8007924:	684b      	ldr	r3, [r1, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x1c>
 800792a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	dd48      	ble.n	80079c2 <__sflush_r+0xae>
 8007930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d045      	beq.n	80079c2 <__sflush_r+0xae>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	6a21      	ldr	r1, [r4, #32]
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	d030      	beq.n	80079a6 <__sflush_r+0x92>
 8007944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	0759      	lsls	r1, r3, #29
 800794a:	d505      	bpl.n	8007958 <__sflush_r+0x44>
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007952:	b10b      	cbz	r3, 8007958 <__sflush_r+0x44>
 8007954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	2300      	movs	r3, #0
 800795a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	4628      	mov	r0, r5
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	d106      	bne.n	8007976 <__sflush_r+0x62>
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	291d      	cmp	r1, #29
 800796c:	d82b      	bhi.n	80079c6 <__sflush_r+0xb2>
 800796e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a18 <__sflush_r+0x104>)
 8007970:	410a      	asrs	r2, r1
 8007972:	07d6      	lsls	r6, r2, #31
 8007974:	d427      	bmi.n	80079c6 <__sflush_r+0xb2>
 8007976:	2200      	movs	r2, #0
 8007978:	6062      	str	r2, [r4, #4]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	d504      	bpl.n	800798c <__sflush_r+0x78>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	d101      	bne.n	800798a <__sflush_r+0x76>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b903      	cbnz	r3, 800798c <__sflush_r+0x78>
 800798a:	6560      	str	r0, [r4, #84]	@ 0x54
 800798c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	b1b9      	cbz	r1, 80079c2 <__sflush_r+0xae>
 8007992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007996:	4299      	cmp	r1, r3
 8007998:	d002      	beq.n	80079a0 <__sflush_r+0x8c>
 800799a:	4628      	mov	r0, r5
 800799c:	f7ff f9e0 	bl	8006d60 <_free_r>
 80079a0:	2300      	movs	r3, #0
 80079a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a4:	e00d      	b.n	80079c2 <__sflush_r+0xae>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b0      	blx	r6
 80079ac:	4602      	mov	r2, r0
 80079ae:	1c50      	adds	r0, r2, #1
 80079b0:	d1c9      	bne.n	8007946 <__sflush_r+0x32>
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0c6      	beq.n	8007946 <__sflush_r+0x32>
 80079b8:	2b1d      	cmp	r3, #29
 80079ba:	d001      	beq.n	80079c0 <__sflush_r+0xac>
 80079bc:	2b16      	cmp	r3, #22
 80079be:	d11e      	bne.n	80079fe <__sflush_r+0xea>
 80079c0:	602f      	str	r7, [r5, #0]
 80079c2:	2000      	movs	r0, #0
 80079c4:	e022      	b.n	8007a0c <__sflush_r+0xf8>
 80079c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	e01b      	b.n	8007a06 <__sflush_r+0xf2>
 80079ce:	690f      	ldr	r7, [r1, #16]
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	d0f6      	beq.n	80079c2 <__sflush_r+0xae>
 80079d4:	0793      	lsls	r3, r2, #30
 80079d6:	680e      	ldr	r6, [r1, #0]
 80079d8:	bf08      	it	eq
 80079da:	694b      	ldreq	r3, [r1, #20]
 80079dc:	600f      	str	r7, [r1, #0]
 80079de:	bf18      	it	ne
 80079e0:	2300      	movne	r3, #0
 80079e2:	eba6 0807 	sub.w	r8, r6, r7
 80079e6:	608b      	str	r3, [r1, #8]
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	dde9      	ble.n	80079c2 <__sflush_r+0xae>
 80079ee:	6a21      	ldr	r1, [r4, #32]
 80079f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079f2:	4643      	mov	r3, r8
 80079f4:	463a      	mov	r2, r7
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b0      	blx	r6
 80079fa:	2800      	cmp	r0, #0
 80079fc:	dc08      	bgt.n	8007a10 <__sflush_r+0xfc>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	4407      	add	r7, r0
 8007a12:	eba8 0800 	sub.w	r8, r8, r0
 8007a16:	e7e7      	b.n	80079e8 <__sflush_r+0xd4>
 8007a18:	dfbffffe 	.word	0xdfbffffe

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b913      	cbnz	r3, 8007a2c <_fflush_r+0x10>
 8007a26:	2500      	movs	r5, #0
 8007a28:	4628      	mov	r0, r5
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	b118      	cbz	r0, 8007a36 <_fflush_r+0x1a>
 8007a2e:	6a03      	ldr	r3, [r0, #32]
 8007a30:	b90b      	cbnz	r3, 8007a36 <_fflush_r+0x1a>
 8007a32:	f7fe fa1b 	bl	8005e6c <__sinit>
 8007a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f3      	beq.n	8007a26 <_fflush_r+0xa>
 8007a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a40:	07d0      	lsls	r0, r2, #31
 8007a42:	d404      	bmi.n	8007a4e <_fflush_r+0x32>
 8007a44:	0599      	lsls	r1, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_fflush_r+0x32>
 8007a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a4a:	f7fe fb3a 	bl	80060c2 <__retarget_lock_acquire_recursive>
 8007a4e:	4628      	mov	r0, r5
 8007a50:	4621      	mov	r1, r4
 8007a52:	f7ff ff5f 	bl	8007914 <__sflush_r>
 8007a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a58:	07da      	lsls	r2, r3, #31
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	d4e4      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	059b      	lsls	r3, r3, #22
 8007a62:	d4e1      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a66:	f7fe fb2d 	bl	80060c4 <__retarget_lock_release_recursive>
 8007a6a:	e7dd      	b.n	8007a28 <_fflush_r+0xc>

08007a6c <memmove>:
 8007a6c:	4288      	cmp	r0, r1
 8007a6e:	b510      	push	{r4, lr}
 8007a70:	eb01 0402 	add.w	r4, r1, r2
 8007a74:	d902      	bls.n	8007a7c <memmove+0x10>
 8007a76:	4284      	cmp	r4, r0
 8007a78:	4623      	mov	r3, r4
 8007a7a:	d807      	bhi.n	8007a8c <memmove+0x20>
 8007a7c:	1e43      	subs	r3, r0, #1
 8007a7e:	42a1      	cmp	r1, r4
 8007a80:	d008      	beq.n	8007a94 <memmove+0x28>
 8007a82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a8a:	e7f8      	b.n	8007a7e <memmove+0x12>
 8007a8c:	4402      	add	r2, r0
 8007a8e:	4601      	mov	r1, r0
 8007a90:	428a      	cmp	r2, r1
 8007a92:	d100      	bne.n	8007a96 <memmove+0x2a>
 8007a94:	bd10      	pop	{r4, pc}
 8007a96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a9e:	e7f7      	b.n	8007a90 <memmove+0x24>

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7f9 fdc8 	bl	8001640 <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	2000045c 	.word	0x2000045c

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <__assert_func>:
 8007adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <__assert_func+0x2c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	68d8      	ldr	r0, [r3, #12]
 8007aea:	b954      	cbnz	r4, 8007b02 <__assert_func+0x26>
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <__assert_func+0x30>)
 8007aee:	461c      	mov	r4, r3
 8007af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af4:	9100      	str	r1, [sp, #0]
 8007af6:	462b      	mov	r3, r5
 8007af8:	4905      	ldr	r1, [pc, #20]	@ (8007b10 <__assert_func+0x34>)
 8007afa:	f000 f86f 	bl	8007bdc <fiprintf>
 8007afe:	f000 f87f 	bl	8007c00 <abort>
 8007b02:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__assert_func+0x38>)
 8007b04:	e7f4      	b.n	8007af0 <__assert_func+0x14>
 8007b06:	bf00      	nop
 8007b08:	20000018 	.word	0x20000018
 8007b0c:	0800844e 	.word	0x0800844e
 8007b10:	08008420 	.word	0x08008420
 8007b14:	08008413 	.word	0x08008413

08007b18 <_calloc_r>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b1e:	b93c      	cbnz	r4, 8007b30 <_calloc_r+0x18>
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7ff f991 	bl	8006e48 <_malloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <_calloc_r+0x1e>
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	220c      	movs	r2, #12
 8007b32:	6002      	str	r2, [r0, #0]
 8007b34:	e7f9      	b.n	8007b2a <_calloc_r+0x12>
 8007b36:	462a      	mov	r2, r5
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f7fe fa44 	bl	8005fc6 <memset>
 8007b3e:	e7f5      	b.n	8007b2c <_calloc_r+0x14>

08007b40 <__ascii_mbtowc>:
 8007b40:	b082      	sub	sp, #8
 8007b42:	b901      	cbnz	r1, 8007b46 <__ascii_mbtowc+0x6>
 8007b44:	a901      	add	r1, sp, #4
 8007b46:	b142      	cbz	r2, 8007b5a <__ascii_mbtowc+0x1a>
 8007b48:	b14b      	cbz	r3, 8007b5e <__ascii_mbtowc+0x1e>
 8007b4a:	7813      	ldrb	r3, [r2, #0]
 8007b4c:	600b      	str	r3, [r1, #0]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	1e10      	subs	r0, r2, #0
 8007b52:	bf18      	it	ne
 8007b54:	2001      	movne	r0, #1
 8007b56:	b002      	add	sp, #8
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7fb      	b.n	8007b56 <__ascii_mbtowc+0x16>
 8007b5e:	f06f 0001 	mvn.w	r0, #1
 8007b62:	e7f8      	b.n	8007b56 <__ascii_mbtowc+0x16>

08007b64 <_realloc_r>:
 8007b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b68:	4680      	mov	r8, r0
 8007b6a:	4615      	mov	r5, r2
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b921      	cbnz	r1, 8007b7a <_realloc_r+0x16>
 8007b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b74:	4611      	mov	r1, r2
 8007b76:	f7ff b967 	b.w	8006e48 <_malloc_r>
 8007b7a:	b92a      	cbnz	r2, 8007b88 <_realloc_r+0x24>
 8007b7c:	f7ff f8f0 	bl	8006d60 <_free_r>
 8007b80:	2400      	movs	r4, #0
 8007b82:	4620      	mov	r0, r4
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	f000 f841 	bl	8007c0e <_malloc_usable_size_r>
 8007b8c:	4285      	cmp	r5, r0
 8007b8e:	4606      	mov	r6, r0
 8007b90:	d802      	bhi.n	8007b98 <_realloc_r+0x34>
 8007b92:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007b96:	d8f4      	bhi.n	8007b82 <_realloc_r+0x1e>
 8007b98:	4629      	mov	r1, r5
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	f7ff f954 	bl	8006e48 <_malloc_r>
 8007ba0:	4607      	mov	r7, r0
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d0ec      	beq.n	8007b80 <_realloc_r+0x1c>
 8007ba6:	42b5      	cmp	r5, r6
 8007ba8:	462a      	mov	r2, r5
 8007baa:	4621      	mov	r1, r4
 8007bac:	bf28      	it	cs
 8007bae:	4632      	movcs	r2, r6
 8007bb0:	f7ff ff86 	bl	8007ac0 <memcpy>
 8007bb4:	4621      	mov	r1, r4
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	f7ff f8d2 	bl	8006d60 <_free_r>
 8007bbc:	463c      	mov	r4, r7
 8007bbe:	e7e0      	b.n	8007b82 <_realloc_r+0x1e>

08007bc0 <__ascii_wctomb>:
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	b141      	cbz	r1, 8007bd8 <__ascii_wctomb+0x18>
 8007bc6:	2aff      	cmp	r2, #255	@ 0xff
 8007bc8:	d904      	bls.n	8007bd4 <__ascii_wctomb+0x14>
 8007bca:	228a      	movs	r2, #138	@ 0x8a
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd2:	4770      	bx	lr
 8007bd4:	700a      	strb	r2, [r1, #0]
 8007bd6:	2001      	movs	r0, #1
 8007bd8:	4770      	bx	lr
	...

08007bdc <fiprintf>:
 8007bdc:	b40e      	push	{r1, r2, r3}
 8007bde:	b503      	push	{r0, r1, lr}
 8007be0:	4601      	mov	r1, r0
 8007be2:	ab03      	add	r3, sp, #12
 8007be4:	4805      	ldr	r0, [pc, #20]	@ (8007bfc <fiprintf+0x20>)
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f000 f83f 	bl	8007c70 <_vfiprintf_r>
 8007bf2:	b002      	add	sp, #8
 8007bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf8:	b003      	add	sp, #12
 8007bfa:	4770      	bx	lr
 8007bfc:	20000018 	.word	0x20000018

08007c00 <abort>:
 8007c00:	b508      	push	{r3, lr}
 8007c02:	2006      	movs	r0, #6
 8007c04:	f000 fa08 	bl	8008018 <raise>
 8007c08:	2001      	movs	r0, #1
 8007c0a:	f7f9 fca0 	bl	800154e <_exit>

08007c0e <_malloc_usable_size_r>:
 8007c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c12:	1f18      	subs	r0, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	bfbc      	itt	lt
 8007c18:	580b      	ldrlt	r3, [r1, r0]
 8007c1a:	18c0      	addlt	r0, r0, r3
 8007c1c:	4770      	bx	lr

08007c1e <__sfputc_r>:
 8007c1e:	6893      	ldr	r3, [r2, #8]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	b410      	push	{r4}
 8007c26:	6093      	str	r3, [r2, #8]
 8007c28:	da08      	bge.n	8007c3c <__sfputc_r+0x1e>
 8007c2a:	6994      	ldr	r4, [r2, #24]
 8007c2c:	42a3      	cmp	r3, r4
 8007c2e:	db01      	blt.n	8007c34 <__sfputc_r+0x16>
 8007c30:	290a      	cmp	r1, #10
 8007c32:	d103      	bne.n	8007c3c <__sfputc_r+0x1e>
 8007c34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c38:	f000 b932 	b.w	8007ea0 <__swbuf_r>
 8007c3c:	6813      	ldr	r3, [r2, #0]
 8007c3e:	1c58      	adds	r0, r3, #1
 8007c40:	6010      	str	r0, [r2, #0]
 8007c42:	7019      	strb	r1, [r3, #0]
 8007c44:	4608      	mov	r0, r1
 8007c46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <__sfputs_r>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	4614      	mov	r4, r2
 8007c54:	18d5      	adds	r5, r2, r3
 8007c56:	42ac      	cmp	r4, r5
 8007c58:	d101      	bne.n	8007c5e <__sfputs_r+0x12>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	e007      	b.n	8007c6e <__sfputs_r+0x22>
 8007c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c62:	463a      	mov	r2, r7
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7ff ffda 	bl	8007c1e <__sfputc_r>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	d1f3      	bne.n	8007c56 <__sfputs_r+0xa>
 8007c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007c70 <_vfiprintf_r>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	460d      	mov	r5, r1
 8007c76:	b09d      	sub	sp, #116	@ 0x74
 8007c78:	4614      	mov	r4, r2
 8007c7a:	4698      	mov	r8, r3
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	b118      	cbz	r0, 8007c88 <_vfiprintf_r+0x18>
 8007c80:	6a03      	ldr	r3, [r0, #32]
 8007c82:	b90b      	cbnz	r3, 8007c88 <_vfiprintf_r+0x18>
 8007c84:	f7fe f8f2 	bl	8005e6c <__sinit>
 8007c88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c8a:	07d9      	lsls	r1, r3, #31
 8007c8c:	d405      	bmi.n	8007c9a <_vfiprintf_r+0x2a>
 8007c8e:	89ab      	ldrh	r3, [r5, #12]
 8007c90:	059a      	lsls	r2, r3, #22
 8007c92:	d402      	bmi.n	8007c9a <_vfiprintf_r+0x2a>
 8007c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c96:	f7fe fa14 	bl	80060c2 <__retarget_lock_acquire_recursive>
 8007c9a:	89ab      	ldrh	r3, [r5, #12]
 8007c9c:	071b      	lsls	r3, r3, #28
 8007c9e:	d501      	bpl.n	8007ca4 <_vfiprintf_r+0x34>
 8007ca0:	692b      	ldr	r3, [r5, #16]
 8007ca2:	b99b      	cbnz	r3, 8007ccc <_vfiprintf_r+0x5c>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	f000 f938 	bl	8007f1c <__swsetup_r>
 8007cac:	b170      	cbz	r0, 8007ccc <_vfiprintf_r+0x5c>
 8007cae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007cb0:	07dc      	lsls	r4, r3, #31
 8007cb2:	d504      	bpl.n	8007cbe <_vfiprintf_r+0x4e>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	b01d      	add	sp, #116	@ 0x74
 8007cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	89ab      	ldrh	r3, [r5, #12]
 8007cc0:	0598      	lsls	r0, r3, #22
 8007cc2:	d4f7      	bmi.n	8007cb4 <_vfiprintf_r+0x44>
 8007cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cc6:	f7fe f9fd 	bl	80060c4 <__retarget_lock_release_recursive>
 8007cca:	e7f3      	b.n	8007cb4 <_vfiprintf_r+0x44>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cd0:	2320      	movs	r3, #32
 8007cd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cda:	2330      	movs	r3, #48	@ 0x30
 8007cdc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e8c <_vfiprintf_r+0x21c>
 8007ce0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ce4:	f04f 0901 	mov.w	r9, #1
 8007ce8:	4623      	mov	r3, r4
 8007cea:	469a      	mov	sl, r3
 8007cec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_vfiprintf_r+0x86>
 8007cf2:	2a25      	cmp	r2, #37	@ 0x25
 8007cf4:	d1f9      	bne.n	8007cea <_vfiprintf_r+0x7a>
 8007cf6:	ebba 0b04 	subs.w	fp, sl, r4
 8007cfa:	d00b      	beq.n	8007d14 <_vfiprintf_r+0xa4>
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	4622      	mov	r2, r4
 8007d00:	4629      	mov	r1, r5
 8007d02:	4630      	mov	r0, r6
 8007d04:	f7ff ffa2 	bl	8007c4c <__sfputs_r>
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f000 80a7 	beq.w	8007e5c <_vfiprintf_r+0x1ec>
 8007d0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d10:	445a      	add	r2, fp
 8007d12:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d14:	f89a 3000 	ldrb.w	r3, [sl]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 809f 	beq.w	8007e5c <_vfiprintf_r+0x1ec>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	f04f 32ff 	mov.w	r2, #4294967295
 8007d24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d28:	f10a 0a01 	add.w	sl, sl, #1
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9307      	str	r3, [sp, #28]
 8007d30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d34:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d36:	4654      	mov	r4, sl
 8007d38:	2205      	movs	r2, #5
 8007d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3e:	4853      	ldr	r0, [pc, #332]	@ (8007e8c <_vfiprintf_r+0x21c>)
 8007d40:	f7f8 fa46 	bl	80001d0 <memchr>
 8007d44:	9a04      	ldr	r2, [sp, #16]
 8007d46:	b9d8      	cbnz	r0, 8007d80 <_vfiprintf_r+0x110>
 8007d48:	06d1      	lsls	r1, r2, #27
 8007d4a:	bf44      	itt	mi
 8007d4c:	2320      	movmi	r3, #32
 8007d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d52:	0713      	lsls	r3, r2, #28
 8007d54:	bf44      	itt	mi
 8007d56:	232b      	movmi	r3, #43	@ 0x2b
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d62:	d015      	beq.n	8007d90 <_vfiprintf_r+0x120>
 8007d64:	9a07      	ldr	r2, [sp, #28]
 8007d66:	4654      	mov	r4, sl
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f04f 0c0a 	mov.w	ip, #10
 8007d6e:	4621      	mov	r1, r4
 8007d70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d74:	3b30      	subs	r3, #48	@ 0x30
 8007d76:	2b09      	cmp	r3, #9
 8007d78:	d94b      	bls.n	8007e12 <_vfiprintf_r+0x1a2>
 8007d7a:	b1b0      	cbz	r0, 8007daa <_vfiprintf_r+0x13a>
 8007d7c:	9207      	str	r2, [sp, #28]
 8007d7e:	e014      	b.n	8007daa <_vfiprintf_r+0x13a>
 8007d80:	eba0 0308 	sub.w	r3, r0, r8
 8007d84:	fa09 f303 	lsl.w	r3, r9, r3
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	9304      	str	r3, [sp, #16]
 8007d8c:	46a2      	mov	sl, r4
 8007d8e:	e7d2      	b.n	8007d36 <_vfiprintf_r+0xc6>
 8007d90:	9b03      	ldr	r3, [sp, #12]
 8007d92:	1d19      	adds	r1, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	9103      	str	r1, [sp, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bfbb      	ittet	lt
 8007d9c:	425b      	neglt	r3, r3
 8007d9e:	f042 0202 	orrlt.w	r2, r2, #2
 8007da2:	9307      	strge	r3, [sp, #28]
 8007da4:	9307      	strlt	r3, [sp, #28]
 8007da6:	bfb8      	it	lt
 8007da8:	9204      	strlt	r2, [sp, #16]
 8007daa:	7823      	ldrb	r3, [r4, #0]
 8007dac:	2b2e      	cmp	r3, #46	@ 0x2e
 8007dae:	d10a      	bne.n	8007dc6 <_vfiprintf_r+0x156>
 8007db0:	7863      	ldrb	r3, [r4, #1]
 8007db2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db4:	d132      	bne.n	8007e1c <_vfiprintf_r+0x1ac>
 8007db6:	9b03      	ldr	r3, [sp, #12]
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	9203      	str	r2, [sp, #12]
 8007dbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dc2:	3402      	adds	r4, #2
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e9c <_vfiprintf_r+0x22c>
 8007dca:	7821      	ldrb	r1, [r4, #0]
 8007dcc:	2203      	movs	r2, #3
 8007dce:	4650      	mov	r0, sl
 8007dd0:	f7f8 f9fe 	bl	80001d0 <memchr>
 8007dd4:	b138      	cbz	r0, 8007de6 <_vfiprintf_r+0x176>
 8007dd6:	9b04      	ldr	r3, [sp, #16]
 8007dd8:	eba0 000a 	sub.w	r0, r0, sl
 8007ddc:	2240      	movs	r2, #64	@ 0x40
 8007dde:	4082      	lsls	r2, r0
 8007de0:	4313      	orrs	r3, r2
 8007de2:	3401      	adds	r4, #1
 8007de4:	9304      	str	r3, [sp, #16]
 8007de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dea:	4829      	ldr	r0, [pc, #164]	@ (8007e90 <_vfiprintf_r+0x220>)
 8007dec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007df0:	2206      	movs	r2, #6
 8007df2:	f7f8 f9ed 	bl	80001d0 <memchr>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d03f      	beq.n	8007e7a <_vfiprintf_r+0x20a>
 8007dfa:	4b26      	ldr	r3, [pc, #152]	@ (8007e94 <_vfiprintf_r+0x224>)
 8007dfc:	bb1b      	cbnz	r3, 8007e46 <_vfiprintf_r+0x1d6>
 8007dfe:	9b03      	ldr	r3, [sp, #12]
 8007e00:	3307      	adds	r3, #7
 8007e02:	f023 0307 	bic.w	r3, r3, #7
 8007e06:	3308      	adds	r3, #8
 8007e08:	9303      	str	r3, [sp, #12]
 8007e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e0c:	443b      	add	r3, r7
 8007e0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e10:	e76a      	b.n	8007ce8 <_vfiprintf_r+0x78>
 8007e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e16:	460c      	mov	r4, r1
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7a8      	b.n	8007d6e <_vfiprintf_r+0xfe>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	3401      	adds	r4, #1
 8007e20:	9305      	str	r3, [sp, #20]
 8007e22:	4619      	mov	r1, r3
 8007e24:	f04f 0c0a 	mov.w	ip, #10
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e2e:	3a30      	subs	r2, #48	@ 0x30
 8007e30:	2a09      	cmp	r2, #9
 8007e32:	d903      	bls.n	8007e3c <_vfiprintf_r+0x1cc>
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0c6      	beq.n	8007dc6 <_vfiprintf_r+0x156>
 8007e38:	9105      	str	r1, [sp, #20]
 8007e3a:	e7c4      	b.n	8007dc6 <_vfiprintf_r+0x156>
 8007e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e40:	4604      	mov	r4, r0
 8007e42:	2301      	movs	r3, #1
 8007e44:	e7f0      	b.n	8007e28 <_vfiprintf_r+0x1b8>
 8007e46:	ab03      	add	r3, sp, #12
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	462a      	mov	r2, r5
 8007e4c:	4b12      	ldr	r3, [pc, #72]	@ (8007e98 <_vfiprintf_r+0x228>)
 8007e4e:	a904      	add	r1, sp, #16
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7fd fbc7 	bl	80055e4 <_printf_float>
 8007e56:	4607      	mov	r7, r0
 8007e58:	1c78      	adds	r0, r7, #1
 8007e5a:	d1d6      	bne.n	8007e0a <_vfiprintf_r+0x19a>
 8007e5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e5e:	07d9      	lsls	r1, r3, #31
 8007e60:	d405      	bmi.n	8007e6e <_vfiprintf_r+0x1fe>
 8007e62:	89ab      	ldrh	r3, [r5, #12]
 8007e64:	059a      	lsls	r2, r3, #22
 8007e66:	d402      	bmi.n	8007e6e <_vfiprintf_r+0x1fe>
 8007e68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e6a:	f7fe f92b 	bl	80060c4 <__retarget_lock_release_recursive>
 8007e6e:	89ab      	ldrh	r3, [r5, #12]
 8007e70:	065b      	lsls	r3, r3, #25
 8007e72:	f53f af1f 	bmi.w	8007cb4 <_vfiprintf_r+0x44>
 8007e76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e78:	e71e      	b.n	8007cb8 <_vfiprintf_r+0x48>
 8007e7a:	ab03      	add	r3, sp, #12
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <_vfiprintf_r+0x228>)
 8007e82:	a904      	add	r1, sp, #16
 8007e84:	4630      	mov	r0, r6
 8007e86:	f7fd fe45 	bl	8005b14 <_printf_i>
 8007e8a:	e7e4      	b.n	8007e56 <_vfiprintf_r+0x1e6>
 8007e8c:	080083f8 	.word	0x080083f8
 8007e90:	08008402 	.word	0x08008402
 8007e94:	080055e5 	.word	0x080055e5
 8007e98:	08007c4d 	.word	0x08007c4d
 8007e9c:	080083fe 	.word	0x080083fe

08007ea0 <__swbuf_r>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	460e      	mov	r6, r1
 8007ea4:	4614      	mov	r4, r2
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	b118      	cbz	r0, 8007eb2 <__swbuf_r+0x12>
 8007eaa:	6a03      	ldr	r3, [r0, #32]
 8007eac:	b90b      	cbnz	r3, 8007eb2 <__swbuf_r+0x12>
 8007eae:	f7fd ffdd 	bl	8005e6c <__sinit>
 8007eb2:	69a3      	ldr	r3, [r4, #24]
 8007eb4:	60a3      	str	r3, [r4, #8]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	071a      	lsls	r2, r3, #28
 8007eba:	d501      	bpl.n	8007ec0 <__swbuf_r+0x20>
 8007ebc:	6923      	ldr	r3, [r4, #16]
 8007ebe:	b943      	cbnz	r3, 8007ed2 <__swbuf_r+0x32>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f000 f82a 	bl	8007f1c <__swsetup_r>
 8007ec8:	b118      	cbz	r0, 8007ed2 <__swbuf_r+0x32>
 8007eca:	f04f 37ff 	mov.w	r7, #4294967295
 8007ece:	4638      	mov	r0, r7
 8007ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6922      	ldr	r2, [r4, #16]
 8007ed6:	1a98      	subs	r0, r3, r2
 8007ed8:	6963      	ldr	r3, [r4, #20]
 8007eda:	b2f6      	uxtb	r6, r6
 8007edc:	4283      	cmp	r3, r0
 8007ede:	4637      	mov	r7, r6
 8007ee0:	dc05      	bgt.n	8007eee <__swbuf_r+0x4e>
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fd99 	bl	8007a1c <_fflush_r>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d1ed      	bne.n	8007eca <__swbuf_r+0x2a>
 8007eee:	68a3      	ldr	r3, [r4, #8]
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	60a3      	str	r3, [r4, #8]
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	6022      	str	r2, [r4, #0]
 8007efa:	701e      	strb	r6, [r3, #0]
 8007efc:	6962      	ldr	r2, [r4, #20]
 8007efe:	1c43      	adds	r3, r0, #1
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d004      	beq.n	8007f0e <__swbuf_r+0x6e>
 8007f04:	89a3      	ldrh	r3, [r4, #12]
 8007f06:	07db      	lsls	r3, r3, #31
 8007f08:	d5e1      	bpl.n	8007ece <__swbuf_r+0x2e>
 8007f0a:	2e0a      	cmp	r6, #10
 8007f0c:	d1df      	bne.n	8007ece <__swbuf_r+0x2e>
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4628      	mov	r0, r5
 8007f12:	f7ff fd83 	bl	8007a1c <_fflush_r>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d0d9      	beq.n	8007ece <__swbuf_r+0x2e>
 8007f1a:	e7d6      	b.n	8007eca <__swbuf_r+0x2a>

08007f1c <__swsetup_r>:
 8007f1c:	b538      	push	{r3, r4, r5, lr}
 8007f1e:	4b29      	ldr	r3, [pc, #164]	@ (8007fc4 <__swsetup_r+0xa8>)
 8007f20:	4605      	mov	r5, r0
 8007f22:	6818      	ldr	r0, [r3, #0]
 8007f24:	460c      	mov	r4, r1
 8007f26:	b118      	cbz	r0, 8007f30 <__swsetup_r+0x14>
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <__swsetup_r+0x14>
 8007f2c:	f7fd ff9e 	bl	8005e6c <__sinit>
 8007f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f34:	0719      	lsls	r1, r3, #28
 8007f36:	d422      	bmi.n	8007f7e <__swsetup_r+0x62>
 8007f38:	06da      	lsls	r2, r3, #27
 8007f3a:	d407      	bmi.n	8007f4c <__swsetup_r+0x30>
 8007f3c:	2209      	movs	r2, #9
 8007f3e:	602a      	str	r2, [r5, #0]
 8007f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	e033      	b.n	8007fb4 <__swsetup_r+0x98>
 8007f4c:	0758      	lsls	r0, r3, #29
 8007f4e:	d512      	bpl.n	8007f76 <__swsetup_r+0x5a>
 8007f50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f52:	b141      	cbz	r1, 8007f66 <__swsetup_r+0x4a>
 8007f54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f58:	4299      	cmp	r1, r3
 8007f5a:	d002      	beq.n	8007f62 <__swsetup_r+0x46>
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7fe feff 	bl	8006d60 <_free_r>
 8007f62:	2300      	movs	r3, #0
 8007f64:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f6c:	81a3      	strh	r3, [r4, #12]
 8007f6e:	2300      	movs	r3, #0
 8007f70:	6063      	str	r3, [r4, #4]
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	f043 0308 	orr.w	r3, r3, #8
 8007f7c:	81a3      	strh	r3, [r4, #12]
 8007f7e:	6923      	ldr	r3, [r4, #16]
 8007f80:	b94b      	cbnz	r3, 8007f96 <__swsetup_r+0x7a>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f8c:	d003      	beq.n	8007f96 <__swsetup_r+0x7a>
 8007f8e:	4621      	mov	r1, r4
 8007f90:	4628      	mov	r0, r5
 8007f92:	f000 f883 	bl	800809c <__smakebuf_r>
 8007f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f9a:	f013 0201 	ands.w	r2, r3, #1
 8007f9e:	d00a      	beq.n	8007fb6 <__swsetup_r+0x9a>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	60a2      	str	r2, [r4, #8]
 8007fa4:	6962      	ldr	r2, [r4, #20]
 8007fa6:	4252      	negs	r2, r2
 8007fa8:	61a2      	str	r2, [r4, #24]
 8007faa:	6922      	ldr	r2, [r4, #16]
 8007fac:	b942      	cbnz	r2, 8007fc0 <__swsetup_r+0xa4>
 8007fae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007fb2:	d1c5      	bne.n	8007f40 <__swsetup_r+0x24>
 8007fb4:	bd38      	pop	{r3, r4, r5, pc}
 8007fb6:	0799      	lsls	r1, r3, #30
 8007fb8:	bf58      	it	pl
 8007fba:	6962      	ldrpl	r2, [r4, #20]
 8007fbc:	60a2      	str	r2, [r4, #8]
 8007fbe:	e7f4      	b.n	8007faa <__swsetup_r+0x8e>
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e7f7      	b.n	8007fb4 <__swsetup_r+0x98>
 8007fc4:	20000018 	.word	0x20000018

08007fc8 <_raise_r>:
 8007fc8:	291f      	cmp	r1, #31
 8007fca:	b538      	push	{r3, r4, r5, lr}
 8007fcc:	4605      	mov	r5, r0
 8007fce:	460c      	mov	r4, r1
 8007fd0:	d904      	bls.n	8007fdc <_raise_r+0x14>
 8007fd2:	2316      	movs	r3, #22
 8007fd4:	6003      	str	r3, [r0, #0]
 8007fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007fda:	bd38      	pop	{r3, r4, r5, pc}
 8007fdc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007fde:	b112      	cbz	r2, 8007fe6 <_raise_r+0x1e>
 8007fe0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fe4:	b94b      	cbnz	r3, 8007ffa <_raise_r+0x32>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 f830 	bl	800804c <_getpid_r>
 8007fec:	4622      	mov	r2, r4
 8007fee:	4601      	mov	r1, r0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ff6:	f000 b817 	b.w	8008028 <_kill_r>
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d00a      	beq.n	8008014 <_raise_r+0x4c>
 8007ffe:	1c59      	adds	r1, r3, #1
 8008000:	d103      	bne.n	800800a <_raise_r+0x42>
 8008002:	2316      	movs	r3, #22
 8008004:	6003      	str	r3, [r0, #0]
 8008006:	2001      	movs	r0, #1
 8008008:	e7e7      	b.n	8007fda <_raise_r+0x12>
 800800a:	2100      	movs	r1, #0
 800800c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008010:	4620      	mov	r0, r4
 8008012:	4798      	blx	r3
 8008014:	2000      	movs	r0, #0
 8008016:	e7e0      	b.n	8007fda <_raise_r+0x12>

08008018 <raise>:
 8008018:	4b02      	ldr	r3, [pc, #8]	@ (8008024 <raise+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f7ff bfd3 	b.w	8007fc8 <_raise_r>
 8008022:	bf00      	nop
 8008024:	20000018 	.word	0x20000018

08008028 <_kill_r>:
 8008028:	b538      	push	{r3, r4, r5, lr}
 800802a:	4d07      	ldr	r5, [pc, #28]	@ (8008048 <_kill_r+0x20>)
 800802c:	2300      	movs	r3, #0
 800802e:	4604      	mov	r4, r0
 8008030:	4608      	mov	r0, r1
 8008032:	4611      	mov	r1, r2
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	f7f9 fa7a 	bl	800152e <_kill>
 800803a:	1c43      	adds	r3, r0, #1
 800803c:	d102      	bne.n	8008044 <_kill_r+0x1c>
 800803e:	682b      	ldr	r3, [r5, #0]
 8008040:	b103      	cbz	r3, 8008044 <_kill_r+0x1c>
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	bd38      	pop	{r3, r4, r5, pc}
 8008046:	bf00      	nop
 8008048:	2000045c 	.word	0x2000045c

0800804c <_getpid_r>:
 800804c:	f7f9 ba67 	b.w	800151e <_getpid>

08008050 <__swhatbuf_r>:
 8008050:	b570      	push	{r4, r5, r6, lr}
 8008052:	460c      	mov	r4, r1
 8008054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008058:	2900      	cmp	r1, #0
 800805a:	b096      	sub	sp, #88	@ 0x58
 800805c:	4615      	mov	r5, r2
 800805e:	461e      	mov	r6, r3
 8008060:	da0d      	bge.n	800807e <__swhatbuf_r+0x2e>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008068:	f04f 0100 	mov.w	r1, #0
 800806c:	bf14      	ite	ne
 800806e:	2340      	movne	r3, #64	@ 0x40
 8008070:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008074:	2000      	movs	r0, #0
 8008076:	6031      	str	r1, [r6, #0]
 8008078:	602b      	str	r3, [r5, #0]
 800807a:	b016      	add	sp, #88	@ 0x58
 800807c:	bd70      	pop	{r4, r5, r6, pc}
 800807e:	466a      	mov	r2, sp
 8008080:	f000 f848 	bl	8008114 <_fstat_r>
 8008084:	2800      	cmp	r0, #0
 8008086:	dbec      	blt.n	8008062 <__swhatbuf_r+0x12>
 8008088:	9901      	ldr	r1, [sp, #4]
 800808a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800808e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008092:	4259      	negs	r1, r3
 8008094:	4159      	adcs	r1, r3
 8008096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800809a:	e7eb      	b.n	8008074 <__swhatbuf_r+0x24>

0800809c <__smakebuf_r>:
 800809c:	898b      	ldrh	r3, [r1, #12]
 800809e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080a0:	079d      	lsls	r5, r3, #30
 80080a2:	4606      	mov	r6, r0
 80080a4:	460c      	mov	r4, r1
 80080a6:	d507      	bpl.n	80080b8 <__smakebuf_r+0x1c>
 80080a8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080ac:	6023      	str	r3, [r4, #0]
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	2301      	movs	r3, #1
 80080b2:	6163      	str	r3, [r4, #20]
 80080b4:	b003      	add	sp, #12
 80080b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080b8:	ab01      	add	r3, sp, #4
 80080ba:	466a      	mov	r2, sp
 80080bc:	f7ff ffc8 	bl	8008050 <__swhatbuf_r>
 80080c0:	9f00      	ldr	r7, [sp, #0]
 80080c2:	4605      	mov	r5, r0
 80080c4:	4639      	mov	r1, r7
 80080c6:	4630      	mov	r0, r6
 80080c8:	f7fe febe 	bl	8006e48 <_malloc_r>
 80080cc:	b948      	cbnz	r0, 80080e2 <__smakebuf_r+0x46>
 80080ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d2:	059a      	lsls	r2, r3, #22
 80080d4:	d4ee      	bmi.n	80080b4 <__smakebuf_r+0x18>
 80080d6:	f023 0303 	bic.w	r3, r3, #3
 80080da:	f043 0302 	orr.w	r3, r3, #2
 80080de:	81a3      	strh	r3, [r4, #12]
 80080e0:	e7e2      	b.n	80080a8 <__smakebuf_r+0xc>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	6020      	str	r0, [r4, #0]
 80080e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080ea:	81a3      	strh	r3, [r4, #12]
 80080ec:	9b01      	ldr	r3, [sp, #4]
 80080ee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80080f2:	b15b      	cbz	r3, 800810c <__smakebuf_r+0x70>
 80080f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 f81d 	bl	8008138 <_isatty_r>
 80080fe:	b128      	cbz	r0, 800810c <__smakebuf_r+0x70>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	f043 0301 	orr.w	r3, r3, #1
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	431d      	orrs	r5, r3
 8008110:	81a5      	strh	r5, [r4, #12]
 8008112:	e7cf      	b.n	80080b4 <__smakebuf_r+0x18>

08008114 <_fstat_r>:
 8008114:	b538      	push	{r3, r4, r5, lr}
 8008116:	4d07      	ldr	r5, [pc, #28]	@ (8008134 <_fstat_r+0x20>)
 8008118:	2300      	movs	r3, #0
 800811a:	4604      	mov	r4, r0
 800811c:	4608      	mov	r0, r1
 800811e:	4611      	mov	r1, r2
 8008120:	602b      	str	r3, [r5, #0]
 8008122:	f7f9 fa64 	bl	80015ee <_fstat>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	d102      	bne.n	8008130 <_fstat_r+0x1c>
 800812a:	682b      	ldr	r3, [r5, #0]
 800812c:	b103      	cbz	r3, 8008130 <_fstat_r+0x1c>
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	bd38      	pop	{r3, r4, r5, pc}
 8008132:	bf00      	nop
 8008134:	2000045c 	.word	0x2000045c

08008138 <_isatty_r>:
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4d06      	ldr	r5, [pc, #24]	@ (8008154 <_isatty_r+0x1c>)
 800813c:	2300      	movs	r3, #0
 800813e:	4604      	mov	r4, r0
 8008140:	4608      	mov	r0, r1
 8008142:	602b      	str	r3, [r5, #0]
 8008144:	f7f9 fa63 	bl	800160e <_isatty>
 8008148:	1c43      	adds	r3, r0, #1
 800814a:	d102      	bne.n	8008152 <_isatty_r+0x1a>
 800814c:	682b      	ldr	r3, [r5, #0]
 800814e:	b103      	cbz	r3, 8008152 <_isatty_r+0x1a>
 8008150:	6023      	str	r3, [r4, #0]
 8008152:	bd38      	pop	{r3, r4, r5, pc}
 8008154:	2000045c 	.word	0x2000045c

08008158 <_init>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	bf00      	nop
 800815c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800815e:	bc08      	pop	{r3}
 8008160:	469e      	mov	lr, r3
 8008162:	4770      	bx	lr

08008164 <_fini>:
 8008164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008166:	bf00      	nop
 8008168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800816a:	bc08      	pop	{r3}
 800816c:	469e      	mov	lr, r3
 800816e:	4770      	bx	lr
